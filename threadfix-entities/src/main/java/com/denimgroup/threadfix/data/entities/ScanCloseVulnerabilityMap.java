////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.data.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import java.util.ArrayList;
import java.util.Calendar;

/**
 * This class allows us to save data about which vulnerabilities were closed by each scan.
 * 
 * This information is useful for reporting.
 * 
 * @author mcollins
 *
 */
@Entity
@Table(name = "ScanCloseVulnerabilityMap")
public class ScanCloseVulnerabilityMap extends BaseEntity implements FindingLike, Comparable<ScanCloseVulnerabilityMap> {

	private static final long serialVersionUID = 6597271584783368634L;

	private Vulnerability vulnerability;
	private Scan scan;

	/**
	 * This constructor is here because Spring demanded it and should not be used.
	 *
	 */
	public ScanCloseVulnerabilityMap(){}

	/**
	 * This constructor maps everything correctly, so just creating the object is enough.
	 * This object is useless without the mappings, so it makes sense to include them here.
	 * @param scan
	 */
	public ScanCloseVulnerabilityMap(Vulnerability vulnerability, Scan scan) {
		this.vulnerability = vulnerability;
		this.scan = scan;
		
		if (vulnerability != null) {
			if (vulnerability.getScanCloseVulnerabilityMaps() == null) {
				vulnerability.setScanCloseVulnerabilityMaps(new ArrayList<ScanCloseVulnerabilityMap>());
			}
			vulnerability.getScanCloseVulnerabilityMaps().add(this);
		}
		
		if (scan != null) {
			if (scan.getScanCloseVulnerabilityMaps() == null) {
				scan.setScanCloseVulnerabilityMaps(new ArrayList<ScanCloseVulnerabilityMap>());
			}
			scan.getScanCloseVulnerabilityMaps().add(this);
		}
	}

	@Override
	@ManyToOne
	@JoinColumn(name = "vulnerabilityId")
	public Vulnerability getVulnerability() {
		return vulnerability;
	}

	public void setVulnerability(Vulnerability vulnerability) {
		this.vulnerability = vulnerability;
	}

	@ManyToOne
	@JoinColumn(name = "scanId")
	@JsonIgnore
	public Scan getScan() {
		return scan;
	}

	public void setScan(Scan scan) {
		this.scan = scan;
	}

	@Override
	public int compareTo(ScanCloseVulnerabilityMap o) {
		Calendar scan1Time = this.getScan().getImportTime();
		Calendar scan2Time = o.getScan().getImportTime();

		if (scan1Time == null || scan2Time == null) {
			return 0;
		}

		return scan1Time.compareTo(scan2Time);
	}
	
	public String toString() {
		return "{id=" + getId() +
				", vuln=" + (vulnerability == null ? "null" : vulnerability.getId()) +
				", scan=" + (scan == null ? "null" : scan.getId());
	}
}
