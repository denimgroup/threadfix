////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.entities;

import com.denimgroup.threadfix.data.enums.VulnerabilityDefectConsistencyState;
import com.denimgroup.threadfix.views.AllViews;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonView;

import javax.persistence.*;
import javax.validation.constraints.Size;
import java.util.*;

import static com.denimgroup.threadfix.CollectionUtils.*;
import static com.denimgroup.threadfix.data.entities.AuthenticationRequired.UNKNOWN;

@Entity
@Table(name = "Vulnerability")
public class Vulnerability extends BaseEntity {

	private static final long serialVersionUID = 8339606486988417904L;

	public static final int ENUM_LENGTH = 50;

	private Application application;
	private Defect defect;
	private String vulnerabilityDefectConsistencyState;
	private GenericVulnerability genericVulnerability;
	private GenericSeverity genericSeverity;
	private GenericSeverity originalGenericSeverity = null;
	private SurfaceLocation surfaceLocation;
	
	private String calculatedUrlPath, calculatedFilePath;
	
	@Size(max = 128, message = "{errors.maxlength} 128.")
	private String variableHash;
	
	@Size(max = 128, message = "{errors.maxlength} 128.")
	private String locationVariableHash;
	
	@Size(max = 128, message = "{errors.maxlength} 128.")
	private String locationHash;
	
	private boolean active = true;
	private boolean isFalsePositive = false;
	private Boolean hidden = false;
	private boolean foundByScanner = true;
	private boolean expired = false;
	private Boolean foundHAMEndpoint = false;

	private Calendar wafRuleGeneratedTime;
	private Calendar defectSubmittedTime;
	private Calendar defectClosedTime;
	private Calendar openTime;
	private Calendar closeTime;

	private List<Audit> audits;
	private List<Finding> findings;
	private List<WafRule> wafRules;
	private List<VulnerabilityComment> comments;
	private List<Document> documents;
	private List<Event> events;
	
	private List<ScanCloseVulnerabilityMap> scanCloseVulnerabilityMaps;
	private List<ScanReopenVulnerabilityMap> scanReopenVulnerabilityMaps;

	private List<EndpointPermission> endpointPermissions;
	
	private Finding originalFinding = null;
    private GRCControl grcControl;

	private List<Tag> tags = list();

    @OneToOne(mappedBy = "vulnerability", cascade = CascadeType.ALL)
    @JsonView({ AllViews.TableRow.class, AllViews.VulnSearch.class,
            AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
    public GRCControl getGrcControl() {
        return grcControl;
    }

    public void setGrcControl(GRCControl grcControl) {
        this.grcControl = grcControl;
    }

	@ManyToOne
	@JoinColumn(name = "applicationId")
	@JsonIgnore
	public Application getApplication() {
		return application;
	}

	public void setApplication(Application application) {
		this.application = application;
	}
	
	@OneToMany(mappedBy = "vulnerability", cascade = CascadeType.ALL)
	@JsonIgnore
	public List<ScanCloseVulnerabilityMap> getScanCloseVulnerabilityMaps() {
		return scanCloseVulnerabilityMaps;
	}

	public void setScanCloseVulnerabilityMaps(List<ScanCloseVulnerabilityMap> scanCloseVulnerabilityMaps) {
		this.scanCloseVulnerabilityMaps = scanCloseVulnerabilityMaps;
	}
	
	@OneToMany(mappedBy = "vulnerability", cascade = CascadeType.ALL)
	@JsonIgnore
	public List<ScanReopenVulnerabilityMap> getScanReopenVulnerabilityMaps() {
		return scanReopenVulnerabilityMaps;
	}

	public void setScanReopenVulnerabilityMaps(List<ScanReopenVulnerabilityMap> scanReopenVulnerabilityMaps) {
		this.scanReopenVulnerabilityMaps = scanReopenVulnerabilityMaps;
	}

	@ManyToOne
	@JoinColumn(name = "defectId")
    @JsonView({ AllViews.TableRow.class, AllViews.VulnSearch.class,
			AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
	public Defect getDefect() {
		return defect;
	}

	public void setDefect(Defect defect) {
		this.defect = defect;
	}

	@Column(length = ENUM_LENGTH)
	@JsonIgnore
	public String getVulnerabilityDefectConsistencyState() {
		return vulnerabilityDefectConsistencyState;
	}

	public void setVulnerabilityDefectConsistencyState(String vulnerabilityDefectConsistencyState) {
		this.vulnerabilityDefectConsistencyState = vulnerabilityDefectConsistencyState;
	}

	public void setVulnerabilityDefectConsistencyState(VulnerabilityDefectConsistencyState vulnerabilityDefectConsistencyState) {
		if (vulnerabilityDefectConsistencyState == null) {
			this.vulnerabilityDefectConsistencyState = null;
		} else {
			this.vulnerabilityDefectConsistencyState = vulnerabilityDefectConsistencyState.name();
		}
	}

	@Transient
	@JsonIgnore
	public VulnerabilityDefectConsistencyState getVulnerabilityDefectConsistencyStateEnum() {
		return VulnerabilityDefectConsistencyState.getVulnerabilityDefectConsistencyState(vulnerabilityDefectConsistencyState);
	}

	@ManyToOne
	@JoinColumn(name = "genericVulnerabilityId")
    @JsonView({AllViews.TableRow.class, AllViews.RestVulnSearch.class, AllViews.VulnerabilityDetail.class, AllViews.UIVulnSearch.class})
	public GenericVulnerability getGenericVulnerability() {
		return genericVulnerability;
	}

	public void setGenericVulnerability(GenericVulnerability genericVulnerability) {
		this.genericVulnerability = genericVulnerability;
	}

	@ManyToOne
	@JoinColumn(name = "genericSeverityId")
    @JsonView({AllViews.TableRow.class, AllViews.RestVulnSearch.class, AllViews.VulnerabilityDetail.class, AllViews.UIVulnSearch.class})
	public GenericSeverity getGenericSeverity() {
		return genericSeverity;
	}

	public void setGenericSeverity(GenericSeverity genericSeverity) {
		this.genericSeverity = genericSeverity;
	}
	
	@ManyToOne
	@JoinColumn(name = "originalGenericSeverityId")
	public GenericSeverity getOriginalGenericSeverity() {
		if (originalGenericSeverity == null) {
			originalGenericSeverity = genericSeverity;
		}
		return originalGenericSeverity;
	}

	public void setOriginalGenericSeverity(GenericSeverity originalGenericSeverity) {
		this.originalGenericSeverity = originalGenericSeverity;
	}
	
	@Column(length = 128, nullable = true)
	@JsonIgnore
	public String getVariableHash() {
		return variableHash;
	}

	public void setVariableHash(String variableHash) {
		this.variableHash = variableHash;
	}

	@Column(length = 128, nullable = true)
	@JsonIgnore
	public String getLocationVariableHash() {
		return locationVariableHash;
	}

	public void setLocationVariableHash(String locationVariableHash) {
		this.locationVariableHash = locationVariableHash;
	}

	@Column(length = 128, nullable = true)
	@JsonIgnore
	public String getLocationHash() {
		return locationHash;
	}

	public void setLocationHash(String locationHash) {
		this.locationHash = locationHash;
	}
	
	@Column
	public String getCalculatedUrlPath() {
		return calculatedUrlPath;
	}

	public void setCalculatedUrlPath(String calculatedUrlPath) {
		this.calculatedUrlPath = calculatedUrlPath;
	}

	@Column
    @JsonView({ AllViews.UIVulnSearch.class, AllViews.RestVulnSearch.class })
    public String getCalculatedFilePath() {
		return calculatedFilePath;
	}

	public void setCalculatedFilePath(String calculatedFilePath) {
		this.calculatedFilePath = calculatedFilePath;
	}

	@Column(nullable = false)
    @JsonView({AllViews.RestVulnSearch.class, AllViews.VulnSearchApplications.class, AllViews.VulnerabilityDetail.class})
	public boolean isActive() {
		return active;
	}

	public void setActive(boolean isActive) {
		this.active = isActive;
	}
	
	@Column(nullable = true)
    @JsonView({AllViews.RestVulnSearch.class, AllViews.VulnSearchApplications.class, AllViews.VulnerabilityDetail.class})
    public Boolean getHidden() {
		if (hidden == null) {
			hidden = false;
		}
		return hidden;
	}

	public void setHidden(Boolean hidden) {
		this.hidden = hidden;
	}
	
	@Column(nullable = false)
    @JsonView({AllViews.RestVulnSearch.class, AllViews.VulnSearchApplications.class, AllViews.VulnerabilityDetail.class})
	public boolean getIsFalsePositive() {
		return isFalsePositive;
	}

	public void setIsFalsePositive(boolean isFalsePositive) {
		this.isFalsePositive = isFalsePositive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@JsonIgnore
	public Calendar getWafRuleGeneratedTime() {
		return wafRuleGeneratedTime;
	}

	public void setWafRuleGeneratedTime(Calendar wafRuleGeneratedTime) {
		this.wafRuleGeneratedTime = wafRuleGeneratedTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@JsonIgnore
	public Calendar getDefectSubmittedTime() {
		return defectSubmittedTime;
	}

	public void setDefectSubmittedTime(Calendar defectSubmittedTime) {
		this.defectSubmittedTime = defectSubmittedTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@JsonIgnore
	public Calendar getDefectClosedTime() {
		return defectClosedTime;
	}

	public void setDefectClosedTime(Calendar defectClosedTime) {
		this.defectClosedTime = defectClosedTime;
	}
	
	// this should just point to the surface location that the vulnerability was created with.
	@ManyToOne
	@JoinColumn(name = "surfaceLocationId")
	public SurfaceLocation getSurfaceLocation() {
		return surfaceLocation;
	}

	public void setSurfaceLocation(SurfaceLocation surfaceLocation) {
		this.surfaceLocation = surfaceLocation;
	}

	@Temporal(TemporalType.TIMESTAMP)
	public Calendar getOpenTime() {
		return openTime;
	}

	public void setOpenTime(Calendar openTime) {
		this.openTime = openTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@JsonView(AllViews.VulnSearchApplications.class)
	public Calendar getCloseTime() {
		return closeTime;
	}

	public void setCloseTime(Calendar closeTime) {
		this.closeTime = closeTime;
	}

	@Column(nullable = false)
	@JsonIgnore
	public boolean isExpired() {
		return expired;
	}

	public void setExpired(boolean isExpired) {
		this.expired = isExpired;
	}

	@Column
	@JsonView(AllViews.VulnSearchApplications.class)
	public Boolean getFoundHAMEndpoint() {
		return foundHAMEndpoint == null ? false : foundHAMEndpoint;
	}

	public void setFoundHAMEndpoint(Boolean foundHAMEndpoint) {
		this.foundHAMEndpoint = foundHAMEndpoint;
	}

	/**
	 * This indicates whether the user has closed the vulnerability.
	 * @return
	 */
	@Column(nullable = false)
	@JsonView(AllViews.VulnerabilityDetail.class)
	public boolean isFoundByScanner() {
		return foundByScanner;
	}
	
	public void setFoundByScanner(boolean isFoundByScanner) {
		this.foundByScanner = isFoundByScanner;
	}

	@OneToMany(mappedBy = "vulnerability")
	@JsonIgnore
	public List<Audit> getAudits() {
		return audits;
	}

	public void setAudits(List<Audit> audits) {
		this.audits = audits;
	}

	@OneToMany(mappedBy = "vulnerability")
    @JsonView({AllViews.TableRow.class, AllViews.RestVulnSearch.class, AllViews.VulnerabilityDetail.class, AllViews.UIVulnSearch.class})
    public List<Finding> getFindings() {
		return findings;
	}

	public void setFindings(List<Finding> findings) {
		this.findings = findings;
	}
	
	@OneToMany(mappedBy = "vulnerability")
    @JsonView({ AllViews.TableRow.class, AllViews.VulnSearch.class,
            AllViews.VulnerabilityDetail.class, AllViews.UIVulnSearch.class, AllViews.RestVulnSearch.class })
	public List<VulnerabilityComment> getVulnerabilityComments() {
		return comments;
	}
	
	public void setVulnerabilityComments(List<VulnerabilityComment> comments) {
		this.comments = comments;
	}
	
	@OneToMany(mappedBy = "vulnerability")
    @JsonView({ AllViews.TableRow.class, AllViews.VulnSearch.class,
            AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
	public List<Document> getDocuments() {
		return documents;
	}

	public void setDocuments(List<Document> documents) {
		this.documents = documents;
	}

	@OneToMany(mappedBy = "vulnerability")
	@OrderBy("date ASC")
	@JsonIgnore
	public List<Event> getEvents() {
		return events;
	}

	public void setEvents(List<Event> events) {
		this.events = events;
	}

	@OneToMany(mappedBy = "vulnerability", cascade = CascadeType.ALL)
	@JsonIgnore
	public List<WafRule> getWafRules() {
		return wafRules;
	}

	public void setWafRules(List<WafRule> wafRules) {
		this.wafRules = wafRules;
	}

	@ManyToMany(mappedBy = "vulnerabilityList")
	@JsonIgnore
	public List<EndpointPermission> getEndpointPermissions() {
		return endpointPermissions;
	}

	public void setEndpointPermissions(List<EndpointPermission> endpointPermissions) {
		this.endpointPermissions = endpointPermissions;
	}

	@Transient
	@JsonIgnore
	public int getNoOfSecurityEvents() {
		int numEvents = 0;
		for (WafRule wafRule : wafRules) {
			numEvents += wafRule.getSecurityEvents().size();
		}

		return numEvents;
	}

	@Transient
	@JsonIgnore
	public String getIsOpen() {
		return isActive() ? "OPEN" : "CLOSED";
	}
	
	/**
	 * This method is for reporting to help ensure that we aren't counting vulns more than once.
	 */
	@Transient
    @JsonView({ AllViews.TableRow.class, AllViews.VulnerabilityDetail.class })
	public Finding getOriginalFinding() {
		if (originalFinding == null && getFindings() != null) {
			for (Finding finding : getFindings()) {
				if (finding == null) {
					continue;
				}
				
				if (finding.isFirstFindingForVuln()) {
					originalFinding = finding;
					break;
				}
			}

			// If we couldn't find the originalFinding, then assume it is the first one in finding list
			if (originalFinding == null && getFindings().size() >= 1)
				originalFinding = getFindings().get(0);
		}

		return originalFinding;
	}

	public void clearOriginalFinding() {
		originalFinding = null;
	}
	
	@Transient
    @JsonIgnore
	public String getDisplayPath() {
		String path = null;
		
		if (calculatedUrlPath != null) {
			path = calculatedUrlPath;
		} else if (surfaceLocation != null) {
			path = surfaceLocation.getPath();
		}
		
		return path;
	}
	
	@Transient
    @JsonIgnore
	public VulnerabilityMarker toVulnerabilityMarker() {

        VulnerabilityMarker marker = new VulnerabilityMarker();

        marker.setFilePath(getFindingCalculatedFilePath())
                .setLineNumber(getEntryPointLineNumber())
                .setGenericVulnId(genericVulnerability.getId())
                .setGenericVulnName(genericVulnerability.getName())
                .setParameter(surfaceLocation.getParameter());

		if (getDefect() != null) {
            marker.setDefectId(getDefect().getNativeId())
                    .setDefectUrl(getDefect().getDefectURL());
        }

		Set<String> scanners = set();

		marker.setSeverity(getSeverityName());

		for (Finding finding : getFindings()) {
			scanners.add(finding.getChannelNameOrNull());
		}

		marker.setScanners(listFrom(scanners));

        return marker;
	}
	
	@Transient
    @JsonIgnore
	public String getFindingCalculatedFilePath() {
		String filePath = null;
		
		if (findings != null) {
			for (Finding finding : findings) {
				if (finding != null && finding.getCalculatedFilePath() != null) {
					filePath = finding.getCalculatedFilePath();
					break;
				}
			}
		}
		
		return filePath;
	}
	
	@Transient
    @JsonIgnore
	public int getEntryPointLineNumber() {
		int lineNumber = -1;
		
		if (findings != null) {
			for (Finding finding : findings) {
				if (finding != null && finding.getDataFlowElements() != null &&
						!finding.getDataFlowElements().isEmpty() &&
						finding.getDataFlowElements().get(0).getLineNumber() != -1) {
					lineNumber = finding.getDataFlowElements().get(0).getLineNumber();
					break;
				} else if (finding != null && finding.getEntryPointLineNumber() != -1) {
					lineNumber = finding.getEntryPointLineNumber();
				}
			}
		}
		
		return lineNumber;
	}
	
	@Override
	public String toString() {
		return "[" + getId() + ", " + genericVulnerability +
				" " + surfaceLocation.getPath() +
				" " + surfaceLocation.getParameter() +
				"]";
	}

    @Transient
    @JsonView({ AllViews.TableRow.class, AllViews.VulnSearch.class,
            AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
    public String getParameter() {
        return getSurfaceLocation() == null ? null :
                getSurfaceLocation().getParameter();
    }

    @Transient
    @JsonView({ AllViews.TableRow.class, AllViews.VulnSearch.class,
            AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
    public String getPath() {
        return getCalculatedUrlPath() == null || getCalculatedUrlPath().isEmpty() ? (getSurfaceLocation() == null ? null :getSurfaceLocation().getPath())
				: getCalculatedUrlPath();
    }

    @Transient
    @JsonView({AllViews.TableRow.class, AllViews.VulnSearch.class, AllViews.VulnerabilityDetail.class})
    public String getFullUrl(){
		if (surfaceLocation != null && surfaceLocation.getUrl() != null) {
			return surfaceLocation.getUrl().toString();
		} else {
			return null;
		}
    }

    @Transient
    @JsonView({ AllViews.TableRow.class, AllViews.UIVulnSearch.class, AllViews.RestVulnSearch.class })
    public String getVulnId() {
        return getId().toString();
    }

    @Transient
    @JsonView({ AllViews.TableRow.class, AllViews.VulnSearch.class,
            AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
    public Dependency getDependency() {
        Finding originalFinding = getOriginalFinding();

        if (originalFinding != null) {
            return originalFinding.getDependency();
        } else {
            return null;
        }
    }

    @Transient
    @JsonView({AllViews.TableRow.class, AllViews.VulnerabilityDetail.class})
    public String getVulnerabilityName() {
        if (getGenericVulnerability() != null) {
            return getGenericVulnerability().getName();
        } else {
            return null;
        }
    }

    @Transient
    @JsonView({AllViews.TableRow.class, AllViews.VulnerabilityDetail.class})
    public String getSeverityName() {
        if (getGenericSeverity() != null) {
            return getGenericSeverity().getName();
        } else {
            return null;
        }
    }

	@Transient
	@JsonView({AllViews.TableRow.class, AllViews.VulnerabilityDetail.class})
	public Integer getSeverityId() {
		if (getGenericSeverity() != null) {
			return getGenericSeverity().getId();
		} else {
			return null;
		}
	}

    @Transient
    @JsonView({ AllViews.UIVulnSearch.class, AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
    private Organization getTeam() {
        return getApplication() == null ?
                null :
                getApplication().getOrganization();
    }

    @Transient
    @JsonView({ AllViews.UIVulnSearch.class, AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
    private Application getApp() {
        return getApplication() == null ? null : getApplication();
    }

    @Transient
    @JsonView({ AllViews.UIVulnSearch.class, AllViews.VulnSearchApplications.class, AllViews.RestVulnSearch.class })
    public List<String> getChannelNames() {
        if (getFindings() == null || getFindings().isEmpty()) {
            return new ArrayList<String>();
        }

        List<String> returnList = new ArrayList<String>();

        for (Finding finding : getFindings()) {
            if (finding.getScan() != null &&
                    finding.getScan().getApplicationChannel() != null &&
                    finding.getScan().getApplicationChannel().getChannelType() != null) {
                returnList.add(finding.getScan().getApplicationChannel().getChannelType().getName());
            }
        }

        return returnList;
    }

	@Transient
	@JsonView({ AllViews.UIVulnSearch.class, AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class })
	public List<Finding> getStaticFindings() {
		if (getFindings() == null)
			return null;

		List<Finding> staticFindingList = list();

		for (Finding finding : getFindings()) {
			if (finding != null && finding.getIsStatic()) {
				if (finding.getDataFlowElements() != null
						&& finding.getDataFlowElements().size() != 0) {
					Collections.sort(finding.getDataFlowElements());
					staticFindingList.add(finding);
				}
			}
		}

		return staticFindingList;
	}

	@Transient
    @JsonView({ AllViews.UIVulnSearch.class, AllViews.VulnerabilityDetail.class, AllViews.RestVulnSearch.class  })
	public List<Finding> getDynamicFindings() {
		if (getFindings() == null)
			return null;

		List<Finding> dynamicFindingList = list();

		for (Finding finding : getFindings()) {
			if (finding != null && !finding.getIsStatic()
					&& ((finding.getAttackRequest() != null && !finding.getAttackRequest().isEmpty())
					|| (finding.getAttackResponse() != null) && !finding.getAttackResponse().isEmpty())) {
				dynamicFindingList.add(finding);
			}
		}

		return dynamicFindingList;
	}

	AuthenticationRequired authenticationRequired = UNKNOWN;

	@Column
	@JsonIgnore
	@Enumerated
	public AuthenticationRequired getAuthenticationRequired() {
		return authenticationRequired;
	}

	public void setAuthenticationRequired(AuthenticationRequired authenticationRequired) {
		this.authenticationRequired = authenticationRequired;
	}

	@Transient
	@JsonProperty("authenticationRequired")
	@JsonView({AllViews.UIVulnSearch.class, AllViews.VulnerabilityDetail.class })
	public AuthenticationRequired getAuthenticationRequiredJSONProperty() {
		return authenticationRequired == null ? UNKNOWN : authenticationRequired;
	}

	private String formatTime(Calendar calendar){
		if (calendar!=null) {
			return calendar.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + calendar.get(Calendar.DAY_OF_MONTH) + ", " + calendar.get(Calendar.YEAR);
		}
		else {
			return null;
		}
	}

	@Transient
	@JsonProperty("humanTimes")
	@JsonView(AllViews.VulnerabilityDetail.class)
	public Map<String, String> getHumanTimes(){
		return map("openTime", formatTime(openTime),
				"closeTime", formatTime(closeTime),
				"wafRuleGeneratedTime", formatTime(wafRuleGeneratedTime),
				"defectSubmittedTime", formatTime(defectSubmittedTime),
				"defectClosedTime", formatTime(defectClosedTime));
	}

	@ManyToMany(cascade = CascadeType.PERSIST, fetch = FetchType.LAZY)
	@JoinTable(name="Vulnerability_Tag",
			joinColumns={@JoinColumn(name="Vulnerability_Id")},
			inverseJoinColumns={@JoinColumn(name="Tag_Id")})
	@JsonView({AllViews.VulnerabilityDetail.class, AllViews.UIVulnSearch.class, AllViews.VulnSearchApplications.class})
	public List<Tag> getTags() {
		return tags;
	}

	public void setTags(List<Tag> tags) {
		this.tags = tags;
	}
	/**
	 * List of fields for snapshot report, they might be duplicated with some other fields above
	 */

	@Transient
	@JsonView(AllViews.VulnSearchApplications.class)
	public String getSeverity() {
		return getSeverityName();
	}

	@Transient
	@JsonView(AllViews.VulnSearchApplications.class)
	public String getGenericVulnName() {
		return getGenericVulnerability().getName();
	}

    @Transient
    @JsonView(AllViews.VulnSearchApplications.class)
    public Integer getGenericVulnDisplayId() {
        return getGenericVulnerability().getDisplayId();
    }

    @Transient
	@JsonView(AllViews.VulnSearchApplications.class)
	public Calendar getImportTime() {
		return getOpenTime();
	}

	@Transient
	@JsonView(AllViews.VulnSearchApplications.class)
	public String getAppName() {
		return getApplication().getName();
	}

	@Transient
	@JsonView(AllViews.VulnSearchApplications.class)
	public Integer getAppId() {
		return getApplication().getId();
	}

	@Transient
	@JsonView(AllViews.VulnSearchApplications.class)
	public String getTeamName() {
		return getApplication().getOrganization().getName();
	}

	@Transient
	@JsonView(AllViews.VulnSearchApplications.class)
	public Integer getTeamId() {
		return getApplication().getOrganization().getId();
	}

	/**
	 * Getting a list of versions that vuln was found at the end of each version.
	 * @return
	 */
	@Transient
	@JsonView({AllViews.UIVulnSearch.class, AllViews.VulnerabilityDetail.class })
	public List<ApplicationVersion> getVersions() {
		List<ApplicationVersion> versions = list();

		List<ApplicationVersion> applicationVersions = listFrom(getApplication().getVersions());
		List<ScanCloseVulnerabilityMap> closeMaps = listFrom(this.getScanCloseVulnerabilityMaps());
		List<ScanReopenVulnerabilityMap> reopenMaps = listFrom(this.getScanReopenVulnerabilityMaps());
		Collections.sort(closeMaps);
		Collections.sort(reopenMaps);

		// Checking for each application version
		Date toDate;
		for (int i = 0; i< applicationVersions.size(); i++) {
			toDate = i == applicationVersions.size() - 1 ? null : applicationVersions.get(i + 1).getDate(); // end of this version, which is the beginning of next version
			Date lastTimeOpen = this.getImportTime().getTime();  // last time this vuln found open in this version
			Date lastTimeClose = null;  // last time this vuln found closed in this version
			for (ScanReopenVulnerabilityMap openMap : reopenMaps) {
				if (toDate == null || openMap.getScan().getImportTime().getTime().compareTo(toDate) < 0) {
					lastTimeOpen = openMap.getScan().getImportTime().getTime();
				}
			}
			for (ScanCloseVulnerabilityMap closeMap : closeMaps) {
				if (toDate == null || closeMap.getScan().getImportTime().getTime().compareTo(toDate) < 0) {
					lastTimeClose = closeMap.getScan().getImportTime().getTime();
				}
			}

			if ((toDate == null || lastTimeOpen.compareTo(toDate) < 0) && (lastTimeClose == null || lastTimeOpen.after(lastTimeClose))) { // present and open
				versions.add(applicationVersions.get(i));
			}
		}

		return versions;
	}

	@Transient
	public String getUri() {
		return "/organizations/" + getTeamId() + "/applications/" + getAppId() + "/vulnerabilities/" + getId();
	}
	/**
	 * End list of fields for snapshot report, they might be duplicated with some other fields above
	 */

}
