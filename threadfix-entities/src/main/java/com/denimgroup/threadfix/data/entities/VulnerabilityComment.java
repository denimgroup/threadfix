////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.entities;

import com.denimgroup.threadfix.views.AllViews;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonView;

import javax.persistence.*;
import java.util.*;

@Entity
@Table(name = "VulnerabilityComment")
public class VulnerabilityComment extends AuditableEntity {

	private static final long serialVersionUID = -2819882984861551170L;

	private String comment;
	private User user;
	private Date time;
	private Vulnerability vulnerability;
	private Integer deletedVulnerabilityId;

    private List<Tag> tags = new ArrayList<Tag>();

	public static final int COMMENT_LENGTH = 200;

	@ManyToOne
	@JoinColumn(name = "vulnerabilityId")
    @JsonIgnore
    public Vulnerability getVulnerability() {
		return vulnerability;
	}

	public void setVulnerability(Vulnerability vulnerability) {
		this.vulnerability = vulnerability;
	}
	
	@Column(length = COMMENT_LENGTH, nullable = true)
    @JsonView({AllViews.TableRow.class, AllViews.VulnSearch.class, AllViews.VulnerabilityDetail.class})
	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	@ManyToOne
	@JoinColumn(nullable = true, name = "userId")
	@JsonIgnore
	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Temporal(TemporalType.TIMESTAMP)
    @JsonView({AllViews.TableRow.class, AllViews.VulnSearch.class, AllViews.VulnerabilityDetail.class})
    public Date getTime() {
		return time;
	}

	public void setTime(Date time) {
		this.time = time;
	}

	@Column(nullable = true)
	public Integer getDeletedVulnerabilityId() {
		return deletedVulnerabilityId;
	}

	public void setDeletedVulnerabilityId(Integer deletedVulnerabilityId) {
		this.deletedVulnerabilityId = deletedVulnerabilityId;
	}

    @Transient
    @JsonView({AllViews.TableRow.class, AllViews.VulnSearch.class, AllViews.VulnerabilityDetail.class})
    private String getUsername() {
        return getUser() == null ? "" : getUser().getBestName();
    }

    @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(name="VulnerabilityComment_Tag",
            joinColumns={@JoinColumn(name="VulnerabilityComment_Id")},
            inverseJoinColumns={@JoinColumn(name="Tag_Id")})
    @JsonView({AllViews.VulnerabilityDetail.class, AllViews.UIVulnSearch.class})
    public List<Tag> getTags() {
        return tags;
    }

    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    @Transient
    @JsonView(AllViews.RestViewTag.class)
    public Map<String, Object> getCommentInfo(){
        Map<String, Object> commentInfo = new HashMap<String, Object>();
        commentInfo.put("commentId", getId());
        commentInfo.put("comment", getComment());
        if (getVulnerability() != null
                && getVulnerability().getApplication() != null
                && getVulnerability().getApplication().isActive()) {
            commentInfo.put("vulnerabilityId", getVulnerability().getId());
            commentInfo.put("vulnerabilityName", getVulnerability().getGenericVulnerability().getName());
            commentInfo.put("applicationId", getVulnerability().getApplication().getId());
            commentInfo.put("applicationName", getVulnerability().getApplication().getName());
            commentInfo.put("teamId", getVulnerability().getApplication().getOrganization().getId());
            commentInfo.put("teamName", getVulnerability().getApplication().getOrganization().getName());
            Map<String, Object> severityMap = new HashMap<String, Object>();
            severityMap.put("name", getVulnerability().getGenericSeverity().getName());
            severityMap.put("intValue", getVulnerability().getGenericSeverity().getIntValue());
            commentInfo.put("genericSeverity", severityMap);
        }
        commentInfo.put("tags", getTags());
        commentInfo.put("username", getUsername());
        commentInfo.put("time", getTime());

        return commentInfo;
    }
}
