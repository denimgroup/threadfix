////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonView;

import javax.persistence.*;
import java.util.List;

import static com.denimgroup.threadfix.CollectionUtils.list;

/**
 * Created by mcollins on 3/31/15.
 */
@Entity
@Table(name = "EndpointPermission")
public class EndpointPermission extends BaseEntity {

    Application application = null;
    String name = null;
    List<Vulnerability> vulnerabilityList = list();
    List<Finding> findingList = list();

    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    @JoinColumn(name = "applicationId")
    @JsonIgnore
    public Application getApplication() {
        return application;
    }

    public void setApplication(Application application) {
        this.application = application;
    }

    @JsonView(Object.class)
    @Column
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @JsonIgnore
    @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(
            name="EndpointPermission_Vulnerability",
            joinColumns        = { @JoinColumn(name="EndpointPermission_Id") },
            inverseJoinColumns = { @JoinColumn(name="Vulnerability_Id") }
    )
    public List<Vulnerability> getVulnerabilityList() {
        return vulnerabilityList;
    }

    public void setVulnerabilityList(List<Vulnerability> vulnerabilityList) {
        this.vulnerabilityList = vulnerabilityList;
    }

    @JsonIgnore
    @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(
            name="EndpointPermission_Finding",
            joinColumns       = { @JoinColumn(name="EndpointPermission_Id") },
            inverseJoinColumns= { @JoinColumn(name="Finding_Id") }
    )
    public List<Finding> getFindingList() {
        return findingList;
    }

    public void setFindingList(List<Finding> findingList) {
        this.findingList = findingList;
    }


    // Autogenerated methods
    // we need these for contains()
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        EndpointPermission that = (EndpointPermission) o;

        if (application != null ? !application.equals(that.application) : that.application != null) return false;
        return !(name != null ? !name.equals(that.name) : that.name != null);
    }

    @Override
    public int hashCode() {
        int result = application != null ? application.hashCode() : 0;
        result = 31 * result + (name != null ? name.hashCode() : 0);
        return result;
    }
}
