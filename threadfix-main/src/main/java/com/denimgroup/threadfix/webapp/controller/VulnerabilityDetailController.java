////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.webapp.controller;

import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.remote.response.RestResponse;
import com.denimgroup.threadfix.service.*;
import com.denimgroup.threadfix.service.enterprise.EnterpriseTest;
import com.denimgroup.threadfix.service.queue.QueueSender;
import com.denimgroup.threadfix.service.util.ControllerUtils;
import com.denimgroup.threadfix.service.util.PermissionUtils;
import com.denimgroup.threadfix.views.AllViews;
import com.denimgroup.threadfix.webapp.utils.ResourceNotFoundException;
import com.denimgroup.threadfix.util.UrlShortener;
import com.fasterxml.jackson.annotation.JsonView;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.denimgroup.threadfix.CollectionUtils.list;


@Controller
@RequestMapping("/organizations/{orgId}/applications/{appId}/vulnerabilities")
public class VulnerabilityDetailController {

    @Autowired
    private VulnerabilityService        vulnerabilityService;
    @Autowired
	private VulnerabilityStatusService  vulnerabilityStatusService;
    @Autowired
    private ApplicationService          applicationService;
    @Autowired
    private VulnerabilityCommentService vulnerabilityCommentService;
    @Autowired
    private FindingService              findingService;
    @Autowired
    private ChannelVulnerabilityService channelVulnerabilityService;
    @Autowired
    private QueueSender                 queueSender;
    @Autowired
    private TagService tagService;
	@Autowired(required = false)
	private SharedComponentService sharedComponentService;

    private final SanitizedLogger log = new SanitizedLogger(VulnerabilityDetailController.class);

    // switched to not show our guess as to static surfaceLocations - only show
    // surfaceLocation for dynamic scans.
    @RequestMapping(value = "/{vulnerabilityId}", method = RequestMethod.GET)
    public ModelAndView detail(@PathVariable("appId") int appId, @PathVariable("orgId") int orgId,
                               @PathVariable("vulnerabilityId") int vulnerabilityId, Model model,
                               HttpServletRequest request) {

        if (!PermissionUtils.isAuthorized(Permission.READ_ACCESS, orgId, appId)) {
            return new ModelAndView("403");
        }
        Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);

        checkResourceNotFound(vulnerability, vulnerabilityId, appId);

        String[] times = vulnerabilityService.getTimeDifferences(vulnerability);

        PermissionUtils.addPermissions(model, orgId, appId,
				Permission.CAN_MODIFY_VULNERABILITIES,
				Permission.CAN_SUBMIT_DEFECTS,
				Permission.CAN_MANAGE_GRC_TOOLS,
				Permission.CAN_SUBMIT_COMMENTS);

        List<VulnerabilityComment> comments = vulnerabilityCommentService.loadAllForVuln(vulnerabilityId);
        Object successMessage = ControllerUtils.getSuccessMessage(request);
        Object error = ControllerUtils.getErrorMessage(request);

        ModelAndView mav = new ModelAndView("applications/vulnerability");
        mav.addObject("comments", comments);
        mav.addObject("vulnerability", vulnerability);
        mav.addObject("timeArray", times);
        mav.addObject("successMessage", successMessage);
        mav.addObject("errorMessage", error);
        mav.addObject("manualSeverities", findingService.getManualSeverities());
        mav.addObject("urlManualList", findingService.getAllManualUrls(appId));
        mav.addObject("manualChannelVulnerabilities", channelVulnerabilityService.loadAllManual());
		mav.addObject("isEnterprise", EnterpriseTest.isEnterprise());
        return mav;
    }

    @RequestMapping(value = "/{vulnerabilityId}/batch/{batchIds}/{rank}", method = RequestMethod.GET)
    public ModelAndView detailBatch(@PathVariable("appId") int appId, @PathVariable("orgId") int orgId,
                               @PathVariable("vulnerabilityId") int vulnerabilityId,
                               @PathVariable("batchIds") String batchIds, @PathVariable("rank") int rank,
                               Model model, HttpServletRequest request) {

        String[] batchReviewIds = batchIds.split("-");
        int batchSize = batchReviewIds.length;

		if (appId == -1) { // this is batch review from Team page.
			Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
			if (vulnerability == null || vulnerability.getApplication() == null) {
				return new ModelAndView("404");
			}
			appId = vulnerability.getApplication().getId();
			// without a redirect, this will cause JS errors
			return new ModelAndView(
					"redirect:/organizations/" + orgId +
					"/applications/" + appId +
					"/vulnerabilities/" + vulnerabilityId +
					"/batch/" + batchIds +
					"/" + rank);
		}


        if (batchSize == 1) {
            return detail(appId, orgId, vulnerabilityId, model, request);
        }
        if (batchSize < rank || rank < 0) { // signifies a bad batch size
            return new ModelAndView("404");
        }

        int givenCurrent = UrlShortener.decode(batchReviewIds[rank-1]);
        if (givenCurrent != vulnerabilityId) {
            return new ModelAndView("404");
        }

        if (rank > 1) {
            Vulnerability previousVuln = vulnerabilityService.loadVulnerability(UrlShortener.decode(batchReviewIds[rank-2]));
            if (previousVuln != null) model.addAttribute("previousVuln", previousVuln);
        }
        if (rank < batchSize) {
            Vulnerability nextVuln = vulnerabilityService.loadVulnerability(UrlShortener.decode(batchReviewIds[rank]));
            if (nextVuln != null) model.addAttribute("nextVuln", nextVuln);
        }
        model.addAttribute("batchIds", batchIds);
        model.addAttribute("currentRank", rank);
        model.addAttribute("numBatchVulns", batchSize);
        return detail(appId, orgId, vulnerabilityId, model, request);
    }

	@JsonView(AllViews.VulnerabilityDetail.class)
	@RequestMapping(value = "/{vulnerabilityId}/table", method = RequestMethod.GET)
    @ResponseBody
    public Object table(@PathVariable("appId") int appId,
                 @PathVariable("orgId") int orgId,
                 @PathVariable("vulnerabilityId") int vulnerabilityId) {

        Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);

        SurfaceLocation surfaceLocation = vulnerabilityService
                .getSurfaceLocationFromDynamicFinding(vulnerability);
        List<Finding> staticFindingList = vulnerability == null ? null : vulnerability.getStaticFindings();

        // if there's only one static finding, display its data flow elements.
        Finding singleStaticFinding = null;
        if (staticFindingList != null && staticFindingList.size() == 1) {
            singleStaticFinding = staticFindingList.get(0);
            staticFindingList = null;
        }

        Map<String, Object> returnMap = new HashMap<>();
        returnMap.put("vulnerability", vulnerability);
        returnMap.put("surfaceLocation", surfaceLocation);
        returnMap.put("singleStaticFinding", singleStaticFinding);
        returnMap.put("staticFindingList", staticFindingList);

        // manual Finding form
        returnMap.put("manualSeverities", findingService.getManualSeverities());
        returnMap.put("recentPathList", findingService.getRecentDynamicPaths(appId));
        returnMap.put("recentFileList", findingService.getRecentStaticPaths(appId));
        returnMap.put("manualChannelVulnerabilities", channelVulnerabilityService.loadAllManual());
        returnMap.put("tags", tagService.loadAllCommentTags());
		returnMap.put("vulnTags", tagService.loadAllVulnTags());

		// permission
		returnMap.put("canModifyVulnerabilities", PermissionUtils.isAuthorized(Permission.CAN_MODIFY_VULNERABILITIES, orgId, appId));
		returnMap.put("canSubmitDefects", PermissionUtils.isAuthorized(Permission.CAN_SUBMIT_DEFECTS, orgId, appId));

		// shared components
		if (sharedComponentService != null) {
			returnMap.put("sharedVulns", sharedComponentService.retrieveSharedVulns(vulnerability));
		}
        return RestResponse.success(returnMap);
    }
	
	// switched to not show our guess as to static surfaceLocations - only show
	// surfaceLocation for dynamic scans.
	@RequestMapping(value = "/{vulnerabilityId}/addComment", method = RequestMethod.POST)
	@JsonView(AllViews.UIVulnSearch.class)
	@ResponseBody
	public Object addComment(
			@PathVariable("orgId") int orgId,
			@PathVariable("appId") int appId,
            @Valid @ModelAttribute VulnerabilityComment vulnerabilityComment,
            BindingResult bindingResult,
			@PathVariable("vulnerabilityId") int vulnerabilityId) {

		if (!PermissionUtils.isAuthorized(Permission.CAN_SUBMIT_COMMENTS, orgId, appId)) {
			return RestResponse.failure("403");
		}

		log.info("About to validate and add comment to vulnerability with id " + vulnerabilityId);

		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		checkResourceNotFound(vulnerability, vulnerabilityId, appId);
		
		String result = vulnerabilityCommentService.addCommentToVuln(vulnerabilityComment, vulnerabilityId);
		
		if (result == null) {
            result = "The submitted comment was invalid.";
        }

		if (!result.equals(VulnerabilityCommentService.VALID)) {
			return RestResponse.failure(result);
		}

		List<VulnerabilityComment> comments = vulnerabilityCommentService.loadAllForVuln(vulnerabilityId);
		return RestResponse.success(comments);
	}

	@JsonView(AllViews.TableRow.class)
    @RequestMapping(value = "/{vulnerabilityId}/vulnComments/{vulnCommentId}/update", method = RequestMethod.POST)
	@ResponseBody
	public Object updateComment(@PathVariable("appId") int appId,
								 @Valid @ModelAttribute VulnerabilityComment vulnerabilityComment,
								 BindingResult bindingResult,
								 @PathVariable("vulnerabilityId") int vulnerabilityId,
								 @PathVariable("vulnCommentId") int vulnCommentId) {

        Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);

        checkResourceNotFound(vulnerability, vulnerabilityId, appId);

		log.info("About to validate and update comment to vulnerability with id " + vulnerabilityId);

        VulnerabilityComment dbComment = vulnerabilityCommentService.loadVulnerabilityCommentById(vulnCommentId);
        if (dbComment == null || dbComment.getId().intValue() != vulnerabilityComment.getId().intValue()) {
            return RestResponse.failure("Invalid data");
        }

        dbComment.setTags(vulnerabilityComment.getTags());
        vulnerabilityCommentService.saveVulnerabilityComment(dbComment);
		List<VulnerabilityComment> comments = vulnerabilityCommentService.loadAllForVuln(vulnerabilityId);
		return RestResponse.success(comments);
    }

	@RequestMapping(value = "/{vulnerabilityId}/defect", method = RequestMethod.GET)
	public String viewDefect(@PathVariable("appId") int appId, @PathVariable("orgId") int orgId,
			@PathVariable("vulnerabilityId") int vulnerabilityId, ModelMap model) {
		
		if (!PermissionUtils.isAuthorized(Permission.READ_ACCESS,orgId,appId)) {
			return "403";
		}
		
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		checkResourceNotFound(vulnerability, vulnerabilityId, appId);
		
		if (vulnerability.getDefect() == null) {
			log.warn("The requested Vulnerability did not have an associated Defect, returning to the Vulnerability page.");
			return "redirect:/organizations/" + orgId + "/applications/" + appId + "/vulnerabilities/" + vulnerabilityId;
		}
		
		model.addAttribute("defect", vulnerability.getDefect());
		return "applications/defects";
	}
	
	@RequestMapping(value = "/{vulnerabilityId}/close", method = RequestMethod.GET)
	@ResponseBody
	public Object closeVulnerability(@PathVariable("vulnerabilityId") int vulnerabilityId,
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId) {
		
		if (!PermissionUtils.isAuthorized(Permission.CAN_MODIFY_VULNERABILITIES, orgId, appId)) {
			return RestResponse.failure("You don't have permission to modify vulnerabilities.");
		}

		log.info("Closing vulnerability with id " + vulnerabilityId);

		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		checkResourceNotFound(vulnerability, vulnerabilityId, appId);

        vulnerabilityService.closeAll(list(vulnerabilityId));

        queueSender.updateCachedStatistics(appId);

		return RestResponse.success("The vulnerability is now closed.");
	}
	
	@RequestMapping(value = "/{vulnerabilityId}/open", method = RequestMethod.GET)
	@ResponseBody
	public Object openVulnerability(@PathVariable("vulnerabilityId") int vulnerabilityId,
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId) {
		
		if (!PermissionUtils.isAuthorized(Permission.CAN_MODIFY_VULNERABILITIES, orgId, appId)) {
			return RestResponse.failure("You don't have permission to modify vulnerabilities.");
		}

		log.info("Opening vulnerability with id " + vulnerabilityId);

		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		checkResourceNotFound(vulnerability, vulnerabilityId, appId);

		List<Integer> vulnerabilityIds = list();
		vulnerabilityIds.add(vulnerabilityId);
		vulnerabilityService.openAll(vulnerabilityIds);
		vulnerabilityService.storeVulnerability(vulnerability);

        queueSender.updateCachedStatistics(appId);

		return RestResponse.success("The vulnerability is now open.");
	}
	
	@RequestMapping(value = "/{vulnerabilityId}/markFalsePositive", method = RequestMethod.GET)
	@ResponseBody
	public Object markFalsePositive(@PathVariable("vulnerabilityId") int vulnerabilityId,
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId, ModelMap model) {
		if (!PermissionUtils.isAuthorized(Permission.CAN_MODIFY_VULNERABILITIES, orgId, appId)) {
			return RestResponse.failure("You don't have permission to modify vulnerabilities.");
		}

		log.info("Marking false positive vulnerability with id " + vulnerabilityId);

		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		checkResourceNotFound(vulnerability, vulnerabilityId, appId);

		vulnerabilityStatusService.markVulnerabilityFalsePositive(vulnerability, null, false, false);
		vulnerabilityService.storeVulnerability(vulnerability);

        queueSender.updateCachedStatistics(appId);

		return RestResponse.success("The vulnerability is now false positive.");
	}
	
	@RequestMapping(value = "/{vulnerabilityId}/markNotFalsePositive", method = RequestMethod.GET)
	@ResponseBody
	public Object markNotFalsePositive(@PathVariable("vulnerabilityId") int vulnerabilityId,
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId, ModelMap model) {
		
		if (!PermissionUtils.isAuthorized(Permission.CAN_MODIFY_VULNERABILITIES, orgId, appId)) {
			return RestResponse.failure("You don't have permission to modify vulnerabilities.");
		}

		log.info("Unmarking false positive vulnerability with id " + vulnerabilityId);

		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		checkResourceNotFound(vulnerability, vulnerabilityId, appId);

		vulnerabilityStatusService.unmarkVulnerabilityFalsePositive(vulnerability, null, false, false);
		vulnerabilityService.storeVulnerability(vulnerability);

        queueSender.updateCachedStatistics(appId);

		return RestResponse.success("Unmarked false positive vulnerability.");
	}

	@RequestMapping(value = "/{vulnerabilityId}/mergeFindings", method = RequestMethod.GET)
	public String mergeFinding(@PathVariable("vulnerabilityId") int vulnerabilityId, ModelMap model,
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId) {
		
		if (!PermissionUtils.isAuthorized(Permission.CAN_MODIFY_VULNERABILITIES, orgId, appId)) {
			return "403";
		}
		
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		checkResourceNotFound(vulnerability, vulnerabilityId, appId);
		
		if (vulnerability.getFindings() != null
				&& vulnerability.getFindings().size() != 0
				&& vulnerability.getFindings().size() != 1) {
			List<Finding> findings = vulnerability.getFindings();
			model.addAttribute(findings);
		}
		model.addAttribute(vulnerability);
		model.addAttribute("isEnterprise", EnterpriseTest.isEnterprise());
		return "/applications/vulnerability";
	}
	
	private void checkResourceNotFound(Vulnerability vuln, int vulnId, int appId) {
		Application application = applicationService.loadApplication(appId);
		
		if (vuln == null || application == null || !application.isActive()) {
			log.warn(ResourceNotFoundException.getLogMessage("Vulnerability", vulnId));
			throw new ResourceNotFoundException();
		}
	}
}
