////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.webapp.controller.rest;

import com.denimgroup.threadfix.data.entities.Permission;
import com.denimgroup.threadfix.data.entities.Vulnerability;
import com.denimgroup.threadfix.data.entities.VulnerabilitySearchParameters;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.remote.response.RestResponse;
import com.denimgroup.threadfix.service.*;
import com.denimgroup.threadfix.service.util.PermissionUtils;
import com.denimgroup.threadfix.util.Result;
import com.denimgroup.threadfix.views.AllViews;
import com.denimgroup.threadfix.webapp.controller.CustomJacksonObjectMapper;
import com.denimgroup.threadfix.webapp.controller.NumericDatePropertyEditorSupport;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Date;

import static com.denimgroup.threadfix.remote.response.RestResponse.resultError;
import static com.denimgroup.threadfix.webapp.controller.rest.RestMethod.APPLICATION_SCAN_LIST;

/**
 * Created by mac on 5/20/14.
 */
@RestController
@RequestMapping("/rest/vulnerabilities")
public class VulnerabilityRestController extends TFRestController {

    private static final SanitizedLogger LOG = new SanitizedLogger(VulnerabilityRestController.class);

    @Autowired
    public VulnerabilitySearchService vulnerabilitySearchService;
    @Autowired
    public OrganizationService organizationService;
    @Autowired
    public ChannelTypeService channelTypeService;
    @Autowired
    public VulnerabilityService vulnerabilityService;
    @Autowired
    public VulnerabilityCommentService vulnerabilityCommentService;

    // Turn Date.getTime() javascript numbers into java.util.Date objects.
    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(Date.class, new NumericDatePropertyEditorSupport());
    }

    @RequestMapping(method = RequestMethod.POST)
    public Object searchVulnerabilities(@ModelAttribute VulnerabilitySearchParameters parameters,
            HttpServletRequest request) throws IOException {

        LOG.info("Received REST request for vulnerability search.");

        Result<String> keyCheck = checkKeyGlobal(request, APPLICATION_SCAN_LIST);
        if (!keyCheck.success()) {
            return resultError(keyCheck);
        }

        long start = System.currentTimeMillis();

        // Look up stuff so people can submit things with names instead of ids
        vulnerabilitySearchService.doNameLookups(parameters);

        ThreadFixUserDetails details = getUserDetailsFromApiKeyInRequest(request);

        Object response =
                RestResponse.success(vulnerabilitySearchService.performLookupREST(parameters, details));

        LOG.debug(response.toString());

        LOG.info("Loading vulns took " + (System.currentTimeMillis() - start) + " ms");

        String serialized;
        CustomJacksonObjectMapper mapper = new CustomJacksonObjectMapper();
        ObjectWriter writer;

        if ("true".equals(request.getParameter("includeCustomText"))) {
            writer = mapper.writerWithView(AllViews.RestVulnSearchWithCustomText.class);
        } else {
            writer = mapper.writerWithView(AllViews.RestVulnSearch.class);
        }

        serialized = writer.writeValueAsString(response);
        return serialized;
    }

    @RequestMapping(value="/{vulnId}/addComment", method = RequestMethod.POST)
    public Object addComment(HttpServletRequest request,
                             @PathVariable("vulnId") int vulnId) {
        ThreadFixUserDetails user = getUserDetailsFromApiKeyInRequest(request);
        if (user == null) {
            return RestResponse.failure("Your API key is not valid, it is not attached to any user. " +
                    "ThreadFix needs API key that is attached to users to add comment from REST API.");
        }

        Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnId);
        if (vulnerability == null) {
            return RestResponse.failure("Couldn't find vulnerability with Id " + vulnId + ".");
        }

        int orgId = vulnerability.getTeamId();
        int appId = vulnerability.getAppId();

        if (!PermissionUtils.isAuthorized(user, Permission.CAN_SUBMIT_COMMENTS, orgId, appId)) {
            return RestResponse.failure("You don't have permission to add comment to this vulnerability.");
        }

        String result = vulnerabilityCommentService.addCommentToVulnFromRest(request, vulnId, user);

        if (result == null) {
            result = "The submitted comment was invalid.";
        }

        if (!result.equals(VulnerabilityCommentService.VALID)) {
            return RestResponse.failure(result);
        }

        return RestResponse.success("Comment added successfully.");

    }

}
