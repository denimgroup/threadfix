////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.data.dao.*;
import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.service.queue.QueueSender;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.denimgroup.threadfix.CollectionUtils.list;

@Service
public class VulnerabilityFilterServiceImpl implements VulnerabilityFilterService {

    private VulnerabilityFilterDao  vulnerabilityFilterDao;
    private GenericVulnerabilityDao genericVulnerabilityDao;
    private GenericSeverityDao      genericSeverityDao;
    private VulnerabilityDao        vulnerabilityDao;
    private ApplicationDao          applicationDao;
    private OrganizationDao         organizationDao;
    private SeverityFilterService   severityFilterService;
    private ScanDao                 scanDao;
    @Autowired
    private QueueSender             queueSender;
    @Autowired
    private VulnerabilityService vulnerabilityService;
    @Autowired
    private ApplicationService applicationService;
    private final SanitizedLogger log = new SanitizedLogger(VulnerabilityFilterServiceImpl.class);

    @Autowired
    public VulnerabilityFilterServiceImpl(
            SeverityFilterService severityFilterService,
            OrganizationDao organizationDao,
            ApplicationDao applicationDao,
            VulnerabilityDao vulnerabilityDao,
            GenericSeverityDao genericSeverityDao,
            VulnerabilityFilterDao vulnerabilityFilterDao,
            GenericVulnerabilityDao genericVulnerabilityDao,
            ScanDao scanDao) {
        this.vulnerabilityDao = vulnerabilityDao;
        this.severityFilterService = severityFilterService;
        this.applicationDao = applicationDao;
        this.organizationDao = organizationDao;
        this.vulnerabilityFilterDao = vulnerabilityFilterDao;
        this.genericSeverityDao = genericSeverityDao;
        this.genericVulnerabilityDao = genericVulnerabilityDao;
        this.scanDao = scanDao;
    }

    @Override
    public VulnerabilityFilter load(int vulnFilterId) {
        return vulnerabilityFilterDao.retrieveById(vulnFilterId);
    }

    @Override
    public VulnerabilityFilter validate(VulnerabilityFilter vulnerabilityFilter,
                                        BindingResult bindingResult) {
        return validate(vulnerabilityFilter, bindingResult, -1);
    }

    @Override
    public VulnerabilityFilter validate(
            VulnerabilityFilter vulnerabilityFilter,
            BindingResult bindingResult,
            int id) {
        if (vulnerabilityFilter == null ||
                vulnerabilityFilter.getSourceGenericVulnerability() == null ||
                vulnerabilityFilter.getTargetGenericSeverity() == null) {
            bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
            return null;
        }

        GenericVulnerability vuln = getGenericVulnerability(
                vulnerabilityFilter.getSourceGenericVulnerability().getName());

        int vulnId = -1;
        if (vuln != null) {
			vulnId = vuln.getId();
			vulnerabilityFilter.setSourceGenericVulnerability(vuln);
		}
		
		boolean hasSeverity = false;
		if (vulnerabilityFilter.getTargetGenericSeverity().getId() == -1) {
			hasSeverity = true;
			vulnerabilityFilter.setTargetGenericSeverity(null);
			vulnerabilityFilter.setHide(true);
		} else {
			GenericSeverity severity = genericSeverityDao.retrieveById(
					vulnerabilityFilter.getTargetGenericSeverity().getId());
			hasSeverity = severity != null;
			if (hasSeverity) {
				vulnerabilityFilter.setHide(false);
				vulnerabilityFilter.setTargetGenericSeverity(severity);
			}
		}
		
		VulnerabilityFilter databaseFilter = vulnerabilityFilterDao.retrieveByVulnerabilityAndType(
				vulnId, vulnerabilityFilter);
		
		if (databaseFilter != null && databaseFilter.getId() != null && databaseFilter.getId() != id) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This filter already exists.");
		} else if (vuln == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
		} else if (!hasSeverity) {
			bindingResult.rejectValue("targetGenericSeverity.id", null, "This severity was not found.");
		}
		
		return vulnerabilityFilter;
	}

	@Override
	@Transactional(readOnly=false)
	public void save(VulnerabilityFilter vulnerabilityFilter, int orgId, int appId) {
		if (vulnerabilityFilter != null) {

			vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);
			
			if (appId != -1) {
				Application application = applicationDao.retrieveById(appId);
				vulnerabilityFilter.setApplication(application);
				updateApplicationVulnerabilities(application);
			} else if (orgId != -1) {
				Organization org = organizationDao.retrieveById(orgId);
				vulnerabilityFilter.setOrganization(org);
				updateOrganizationVulnerabilities(org);
			} else {
				vulnerabilityFilter.setGlobal(true);

                queueSender.updateVulnFilter();
			}
			vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);
            log.info("Saving Vulnerability Filter with ID " + vulnerabilityFilter.getId() + ".");
		}
	}

	public GenericVulnerability getGenericVulnerability(String formString) {
		GenericVulnerability returnValue = null;
		
		String result = getRegexResult(formString, "\\(CWE ([0-9]+)\\)");
		
		if (result != null) {
			// Try ID
			GenericVulnerability genericVulnerability =
					genericVulnerabilityDao.retrieveByDisplayId(Integer.valueOf(result));
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		} else {
			// Try full name
			GenericVulnerability genericVulnerability =
					genericVulnerabilityDao.retrieveByName(formString);
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		}
		
		return returnValue;
	}
	
	protected String getRegexResult(String targetString, String regex) {
		if (targetString == null || targetString.isEmpty() || regex == null || regex.isEmpty()) {
			return null;
		}

		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(targetString);

		if (matcher.find()) {
			return matcher.group(1);
		} else {
			return null;
		}
	}

	@Transactional
	@Override
	public void delete(int filterId, int orgId, int appId) {
		log.info("Deleting Vulnerability Filter.");
		vulnerabilityFilterDao.delete(filterId);
		updateVulnerabilities(orgId, appId);
	}
	
	@Override
	public void updateVulnerabilities(Scan scan) {
		
		scanDao.saveOrUpdate(scan);
		
		if (scan != null && scan.getFindings() != null) {
			
			List<Vulnerability> vulns = list();
			
			for (Finding finding : scan.getFindings()) {
				if (finding != null && finding.getVulnerability() != null) {
					vulns.add(finding.getVulnerability());
				}
			}
			
			int orgId = scan.getApplication().getOrganization().getId(),
					appId = scan.getApplication().getId();
			
			List<VulnerabilityFilter> filters = vulnerabilityFilterDao.retrieveAllEffective(orgId, appId);
			
			updateVulnerabilities(vulns, filters, severityFilterService.loadEffectiveFilter(orgId, appId));
		}
	}
	
	// These methods all eventually call updateApplicationVulnerabilities.
	// They can't call updateVulnerabilities(List<Vulnerability>) directly because
	// they need to load the application's filters as well.
	@Override
	@Transactional
	public void updateVulnerabilities(int orgId, int appId) {
		if (orgId == -1 && appId == -1) {
			log.info("Sending Updating all ThreadFix Vulnerabilities to QueueSender.");
            queueSender.updateVulnFilter();
		} else if (appId != -1) {
			Application app = applicationDao.retrieveById(appId);
			log.info("Updating ThreadFix Vulnerabilities for application " + app.getName());
			updateApplicationVulnerabilities(app);
		} else {
			Organization organization = organizationDao.retrieveById(orgId);
			log.info("Updating ThreadFix Vulnerabilities for team " + organization.getName());
			updateOrganizationVulnerabilities(organization);
		}
	}

    @Override
	public void updateAllVulnerabilities() {
		for (Organization organization : organizationDao.retrieveAllActive()) {
			updateOrganizationVulnerabilities(organization);
		}
	}

	private void updateOrganizationVulnerabilities(Organization organization) {
		if (organization != null && organization.getApplications() != null) {
			for (Application application : organization.getApplications()) {
				if (application != null) {
					updateApplicationVulnerabilities(application);
				}
			}
		}
	}
	
	private void updateApplicationVulnerabilities(Application application) {
		
		if (application != null &&
				application.getOrganization() != null &&
				application.getOrganization().getId() != null) {
			
			int appId = application.getId();
			
			List<VulnerabilityFilter> filters =
					vulnerabilityFilterDao.retrieveAllEffective(application.getOrganization().getId(), appId);
			
			List<Vulnerability> vulns = vulnerabilityDao.retrieveAllByApplication(appId);

			Set<Integer> idsToIgnore = updateVulnerabilities(vulns, filters,
					severityFilterService.loadEffectiveFilter(application.getOrganization().getId(), appId));

			updateApplicationScans(application, idsToIgnore);

            log.info("Processing statistics update for application with ID " + appId);
            vulnerabilityService.updateVulnerabilityReport(
                    applicationService.loadApplication(appId)
            );
		}
	}
	
	private void updateApplicationScans(Application application, Set<Integer> idsToIgnore) {
		List<Scan> scans = application.getScans();
		
		for (Scan scan : scans) {
			if (scan != null) {
				Set<Integer>
					allVulnIds      = new HashSet<>(),
					repeatVulnIds   = new HashSet<>(),
					newVulnIds      = new HashSet<>(),
					closedVulnIds   = new HashSet<>(),
					reopenedVulnIds = new HashSet<>();
					
				// There's an extra boolean condition here, so we can't use addVulnerabilityIds
				for (Finding finding : scan.getFindings()) {
					if (finding != null && finding.getVulnerability() != null
							&& finding.getVulnerability().getId() != null) {
						
						if (finding.isFirstFindingForVuln()) {
							newVulnIds.add(finding.getVulnerability().getId());
						} else {
							repeatVulnIds.add(finding.getVulnerability().getId());
						}
					}
				}
			
				addVulnerabilityIds(scan.getScanRepeatFindingMaps(),       repeatVulnIds);
				addVulnerabilityIds(scan.getScanCloseVulnerabilityMaps(),  closedVulnIds);
				addVulnerabilityIds(scan.getScanReopenVulnerabilityMaps(), reopenedVulnIds);
				
				allVulnIds.addAll(newVulnIds);
				allVulnIds.addAll(repeatVulnIds);
				allVulnIds.addAll(reopenedVulnIds);
				
				int totalCount = allVulnIds.size();
				
				newVulnIds.removeAll(idsToIgnore);
				repeatVulnIds.removeAll(idsToIgnore);
				closedVulnIds.removeAll(idsToIgnore);
				reopenedVulnIds.removeAll(idsToIgnore);
				allVulnIds.removeAll(idsToIgnore);
				
				int totalCountWithFilters = allVulnIds.size();
				int totalHiddenVulns = totalCount - totalCountWithFilters;
				
				scan.setNumberNewVulnerabilities(newVulnIds.size());
				scan.setNumberClosedVulnerabilities(closedVulnIds.size());
				scan.setNumberResurfacedVulnerabilities(reopenedVulnIds.size());
				scan.setNumberTotalVulnerabilities(totalCountWithFilters);
				scan.setNumberHiddenVulnerabilities(totalHiddenVulns);
				
				scanDao.saveOrUpdate(scan);
				
				updateScanCounts(scan);
			}
		}
	}
	
	private void addVulnerabilityIds(List<? extends FindingLike> findingLikes, Set<Integer> ids) {
		if (findingLikes == null || findingLikes.isEmpty()) {
			return;
		}
		
		for (FindingLike findingLike : findingLikes) {
			if (findingLike != null && findingLike.getVulnerability() != null
					&& findingLike.getVulnerability().getId() != null) {
				ids.add(findingLike.getVulnerability().getId());
			}
		}
	}
	
	// The return value is a set of vulnerability IDs that were ignored.
	private Set<Integer> updateVulnerabilities(List<Vulnerability> vulnerabilities,
			List<VulnerabilityFilter> vulnerabilityFilters,
			SeverityFilter severityFilters) {
		if (vulnerabilities == null || vulnerabilityFilters == null) {
			return new HashSet<>();
		}
		
		Map<Integer, GenericSeverity> map = getMap(vulnerabilityFilters);
		Set<Integer> ignoredIds = new HashSet<>();
		
		for (Vulnerability vulnerability : vulnerabilities) {
			if (vulnerability != null ) {
				boolean hiddenByVulnFilter = false;
				
				if (map.containsKey(vulnerability.getGenericVulnerability().getId())) {
					GenericSeverity value = map.get(vulnerability.getGenericVulnerability().getId());
					if (value == null) {
						hiddenByVulnFilter = true;
					} else {
						vulnerability.setGenericSeverity(value);
					}
				}

				boolean shouldHide = hiddenByVulnFilter || severityFilters.shouldHide(vulnerability.getGenericSeverity());
				vulnerability.setHidden(shouldHide);
				
				if (shouldHide) {
					ignoredIds.add(vulnerability.getId());
				}
				
				vulnerabilityDao.saveOrUpdate(vulnerability);
			}
		}
		
		return ignoredIds;
	}
	
	// This method produces a map of generic vuln IDs to generic severities
	public Map<Integer, GenericSeverity> getMap(List<VulnerabilityFilter> filters) {
		Map<Integer, GenericSeverity> returnMap = new HashMap<>();
		
		// add global stuff first
		for (VulnerabilityFilter filter : filters) {
			if (filter.getGlobal()) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}
		
		// then organization
		for (VulnerabilityFilter filter : filters) {
			if (filter.getOrganization() != null) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}
		
		// then application
		for (VulnerabilityFilter filter : filters) {
			if (filter.getApplication() != null) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}
		
		return returnMap;
	}

	public List<VulnerabilityFilter> loadAllGlobal() {
		return vulnerabilityFilterDao.retrieveAllGlobal();
	}

	public List<VulnerabilityFilter> loadAllOrganization(int orgId) {
		return vulnerabilityFilterDao.retrieveAll(orgId);
	}

	public List<VulnerabilityFilter> loadAllApplication(int appId) {
		Application application = applicationDao.retrieveById(appId);
		if (application != null &&
				application.getOrganization() != null &&
				application.getOrganization().getId() != null) {
			return vulnerabilityFilterDao.retrieveAll(application.getOrganization().getId(), appId);
		} else {
			return list();
		}
	}
	
	@Override
	public VulnerabilityFilter getNewFilter(int orgId, int appId) {
		VulnerabilityFilter vulnerabilityFilter = new VulnerabilityFilter();
		if (appId != -1) {
			vulnerabilityFilter.setApplication(applicationDao.retrieveById(appId));
		} else if (orgId != -1) {
			vulnerabilityFilter.setOrganization(organizationDao.retrieveById(orgId));
		} else {
			vulnerabilityFilter.setGlobal(true);
		}
		return vulnerabilityFilter;
	}
	
	@Override
	public List<VulnerabilityFilter> getPrimaryVulnerabilityList(int orgId, int appId) {
		List<VulnerabilityFilter> filters;
		if (appId != -1) {
			filters = loadAllApplication(appId);
		} else if (orgId != -1) {
			filters = loadAllOrganization(orgId);
		} else {
			filters = loadAllGlobal();
		}
		return filters;
	}

	@Override
	public void updateScanCounts(Scan scan) {
		Map<String, Object> mapMap = scanDao.getMapSeverityMap(scan);
		Map<String, Object> findingMap = scanDao.getFindingSeverityMap(scan);
		if (mapMap != null && mapMap.get("id").equals(scan.getId()) && mapMap.get("id").equals(scan.getId())) {
			scan.setNumberInfoVulnerabilities((Long)mapMap.get("info") + (Long)findingMap.get("info"));
			scan.setNumberLowVulnerabilities((Long)mapMap.get("low") + (Long)findingMap.get("low"));
			scan.setNumberMediumVulnerabilities((Long)mapMap.get("medium") + (Long)findingMap.get("medium"));
			scan.setNumberHighVulnerabilities((Long)mapMap.get("high") + (Long)findingMap.get("high"));
			scan.setNumberCriticalVulnerabilities((Long)mapMap.get("critical") + (Long)findingMap.get("critical"));
			scanDao.saveOrUpdate(scan);
		} else {
			log.warn("ID from the database didn't match the scan ID, counts will not be added to the scan.");
		}
	}
}
