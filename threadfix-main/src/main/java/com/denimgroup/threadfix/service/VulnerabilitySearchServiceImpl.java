////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.CollectionUtils;
import com.denimgroup.threadfix.data.dao.ApplicationDao;
import com.denimgroup.threadfix.data.dao.OrganizationDao;
import com.denimgroup.threadfix.data.dao.VulnerabilitySearchDao;
import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.service.util.PermissionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.denimgroup.threadfix.CollectionUtils.list;
import static com.denimgroup.threadfix.CollectionUtils.map;

/**
 * Created by mac on 5/7/14.
 */
@Service
public class VulnerabilitySearchServiceImpl implements VulnerabilitySearchService {

    @Autowired
    private VulnerabilitySearchDao vulnerabilitySearchDao;
    @Autowired
    private ChannelTypeService     channelTypeService;
    @Autowired
    private ApplicationDao         applicationDao;
    @Autowired
    private OrganizationDao organizationDao;

    @Override
    public List<Vulnerability> performLookup(VulnerabilitySearchParameters parameters) {
        applyPermissions(parameters);
        return vulnerabilitySearchDao.performLookup(parameters);
    }

    @Override
    public List<Vulnerability> performLookupREST(VulnerabilitySearchParameters parameters, ThreadFixUserDetails details) {
        applyPermissions(parameters, details);
        return vulnerabilitySearchDao.performLookup(parameters);
    }

    @Override
    public long performLookupCount(VulnerabilitySearchParameters parameters) {
        applyPermissions(parameters);
        return vulnerabilitySearchDao.performLookupCount(parameters);
    }

    @Override
    public List<VulnerabilityTreeElement> getTree(VulnerabilitySearchParameters parameters) {
        List<VulnerabilityTreeElement> resultList = list();
        applyPermissions(parameters);
        resultList.addAll(vulnerabilitySearchDao.getTree(parameters));

        // Query all vulnerabilities of Sonatype and Dependency Check for
        // OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities
        if (parameters.getUsingComponentsWithKnownVulnerabilities()) {

            List<GenericVulnerability> oldGenVulns = parameters.getGenericVulnerabilities();
            List<ChannelType> channelTypes = parameters.getChannelTypes();

            parameters.setGenericVulnerabilities(CollectionUtils.<GenericVulnerability>list());
            channelTypes.add(channelTypeService.loadChannel(ScannerType.DEPENDENCY_CHECK.getDisplayName()));
            channelTypes.add(channelTypeService.loadChannel(ScannerType.SONATYPE.getDisplayName()));

            List<VulnerabilityTreeElement> dependencyVulnsList = vulnerabilitySearchDao.getTree(parameters);
            if (dependencyVulnsList != null) {
                for (VulnerabilityTreeElement element: dependencyVulnsList)
                    element.setMemberOf(937);
                resultList.addAll(dependencyVulnsList);
            }

            parameters.setGenericVulnerabilities(oldGenVulns);
            parameters.setChannelTypes(channelTypes.subList(0, channelTypes.size()-2));
        }

        return resultList;
    }

    @Override
    public Long getCount(VulnerabilitySearchParameters parameters) {
        return vulnerabilitySearchDao.getCount(parameters);
    }

    // make sure that only information from proper teams and applications get included in results.
    @Override
    public void applyPermissions(VulnerabilitySearchParameters parameters) {
        applyPermissions(parameters, null);
    }

    @Override
    public Map<String, Object> generatePointInTimeAgeReport(VulnerabilitySearchParameters parameters) {
        Map<String, Object> map = map();
        applyPermissions(parameters);

        map.put("averageAges", vulnerabilitySearchDao.getAges(parameters));
        return map;
    }

    @Override
    public List<Object> generateProgressByTypeReport(VulnerabilitySearchParameters parameters) {
        applyPermissions(parameters);
        List<Object> results = list();
        Map<String, Map> vulnTypesInfoMap = map();
        List<Map> vulnTypeList = vulnerabilitySearchDao.getProgressByType(parameters);
        for (Map vulnTypeFromDB : vulnTypeList) {
            String vulnId = String.valueOf(vulnTypeFromDB.get("vulnId"));
            if (vulnTypesInfoMap.get(vulnId) == null) {
                vulnTypesInfoMap.put(vulnId,
                        map("description", vulnTypeFromDB.get("description"),
                                "total", 0L,
                                "averageAgeOpen", 0L,
                                "averageTimeToClose", 0L,
                                "percentClosed", 0L,
                                "numOpen", 0L,
                                "numClosed", 0L));
            }

            vulnTypesInfoMap.get(vulnId).put("total", (Long)vulnTypesInfoMap.get(vulnId).get("total") + (Long) vulnTypeFromDB.get("total"));

            if (vulnTypeFromDB.get("status") == null ||
                    !(boolean) vulnTypeFromDB.get("status")) {
                vulnTypesInfoMap.get(vulnId).put("numClosed",  vulnTypeFromDB.get("total"));
                vulnTypesInfoMap.get(vulnId).put("averageTimeToClose",  Math.round((Double) vulnTypeFromDB.get("averageTimeToClose")));
            } else {
                vulnTypesInfoMap.get(vulnId).put("numOpen",  vulnTypeFromDB.get("total"));
                vulnTypesInfoMap.get(vulnId).put("averageAgeOpen",  Math.round((Double) vulnTypeFromDB.get("averageAgeOpen")));
            }
        }

        for (String key: vulnTypesInfoMap.keySet()) {
            Map eachVulnType = vulnTypesInfoMap.get(key);
            eachVulnType.put("percentClosed", Math.round((Long)eachVulnType.get("numClosed") * 100/(Long)eachVulnType.get("total")));

            results.add(eachVulnType);
        }

        return results;
    }

    @Override
    public Map<String, Object> generateScanComparisonReport(VulnerabilitySearchParameters parameters) {

        parameters.setShowFalsePositive(false);
        parameters.setShowHidden(false);
        parameters.setShowClosed(false);
        parameters.setShowOpen(true);

        List<Map> nonFPmap = vulnerabilitySearchDao.getScanComparison(parameters, false);

        Long totalVuln = vulnerabilitySearchDao.getCount(parameters);

        parameters.setShowFalsePositive(true);
        List<Map> fPmap =  vulnerabilitySearchDao.getScanComparison(parameters, true);

        Map<String, Map> channelsInfoTempMap = map();
        List<Object> returnValues = list();
        for (Map channelNonFPMap: nonFPmap) {
            String channelName = String.valueOf(channelNonFPMap.get("channelName"));

            if (channelsInfoTempMap.get(channelName) == null) {
                channelsInfoTempMap.put(channelName, map("channelName", channelName,
                        "foundCount", 0L,
                        "foundPercent", 0L,
                        "fpCount", 0L,
                        "fpPercent", 0L,
                        "HAMCount", 0L,
                        "HAMPercent", 0L));
            }
            channelsInfoTempMap.get(channelName).put("foundCount", (Long)channelsInfoTempMap.get(channelName).get("foundCount") + (Long) channelNonFPMap.get("foundCount"));
            if (channelNonFPMap.get("foundHAMEndpoint") != null &&
                    (boolean)channelNonFPMap.get("foundHAMEndpoint")) {
                channelsInfoTempMap.get(channelName).put("HAMCount", channelNonFPMap.get("foundCount"));
            }
        }

        for (Map channelFPMap: fPmap) {
            String channelName = String.valueOf(channelFPMap.get("channelName"));

            if (channelsInfoTempMap.get(channelName) == null) {
                channelsInfoTempMap.put(channelName, map("channelName", channelName,
                        "foundCount", 0,
                        "foundPercent", 0,
                        "fpCount", 0,
                        "fpPercent", 0,
                        "HAMCount", 0,
                        "HAMPercent", 0));
            }
            channelsInfoTempMap.get(channelName).put("fpCount", channelFPMap.get("foundCount"));
        }

        for (String key: channelsInfoTempMap.keySet()) {
            Map channelInfo = channelsInfoTempMap.get(key);
            Long foundCount = Long.valueOf(String.valueOf(channelInfo.get("foundCount")));
            Long fpCount = Long.valueOf(String.valueOf(channelInfo.get("fpCount")));
            Long HAMCount = Long.valueOf(String.valueOf(channelInfo.get("HAMCount")));

            channelInfo.put("foundPercent", (double)(totalVuln == 0 ? 0 : Math.round(foundCount * 10000 / totalVuln))/100 + "%");
            channelInfo.put("fpPercent", (double)((foundCount + fpCount) == 0 ? 0 : Math.round(fpCount * 10000 / (foundCount + fpCount)))/100 + "%");
            channelInfo.put("HAMPercent", (double)(totalVuln == 0 ? 0 : Math.round(HAMCount * 10000 / totalVuln))/100 + "%");
            returnValues.add(channelInfo);
        }

        return map("totalVuln", totalVuln, "channelsInfo", returnValues);
    }

    public void applyPermissions(VulnerabilitySearchParameters parameters, ThreadFixUserDetails details) {
        Set<Integer> teamIds = PermissionUtils.getAuthenticatedTeamIds(),
                appIds = PermissionUtils.getAuthenticatedAppIds();

        if (details != null) {
            teamIds = PermissionUtils.getAuthenticatedTeamIds(details);
            appIds  = PermissionUtils.getAuthenticatedAppIds(details);
        }

        List<Organization> filteredTeamList = list();
        List<Application> filteredApplicationList = list();

        if (teamIds != null) {
            if (parameters.getTeams() != null && !parameters.getTeams().isEmpty()) {
                for (Organization organization : parameters.getTeams()) {
                    if (teamIds.contains(organization.getId())) {
                        filteredTeamList.add(organization);
                    }
                }
            }
        }
        if (parameters.getTeams() != null && !parameters.getTeams().isEmpty() && appIds != null) {
            for (Organization organization : parameters.getTeams()) {
                if (teamIds != null && teamIds.contains(organization.getId()))
                    continue;
                Organization dbOrganization = organizationDao.retrieveById(organization.getId());
                for (Application app: dbOrganization.getActiveApplications()) {
                    if (appIds.contains(app.getId())) {
                        filteredApplicationList.add(app);
                    }
                }

            }
        }

        if (appIds != null) {
            if (parameters.getApplications() != null && !parameters.getApplications().isEmpty()) {
                for (Application application : parameters.getApplications()) {
                    if (appIds.contains(application.getId())) {
                        filteredApplicationList.add(application);
                    } else {
                        Application databaseApplication = applicationDao.retrieveById(application.getId());

                        // TODO move team ID lookup to DB level
                        if (teamIds != null &&
                                databaseApplication != null &&
                                databaseApplication.getOrganization() != null &&
                                databaseApplication.getOrganization().getId() != null &&
                                teamIds.contains(databaseApplication.getOrganization().getId())) {
                            filteredApplicationList.add(application);
                        } else {
                            assert false : "Invalid application ID received in " +
                                    "VulnerabilitySearchParameters: " + application.getId();
                        }

                    }
                }
            }
        }

        // If retrieving all applications then only return applications that user has access to
        if (filteredTeamList.isEmpty() && filteredApplicationList.isEmpty()) {
            if (teamIds != null) {
                for (int teamId: teamIds) {
                    filteredTeamList.add(organizationDao.retrieveById(teamId));
                }
            }

            if (appIds != null) {
                for (int appId: appIds) {
                    filteredApplicationList.add(applicationDao.retrieveById(appId));
                }
            }
        }

        if (teamIds != null)
            parameters.setTeams(filteredTeamList);
        if (appIds != null)
            parameters.setApplications(filteredApplicationList);
    }

    @Override
    public void doNameLookups(VulnerabilitySearchParameters parameters) {
        if (parameters.getChannelTypes() != null) {
            for (ChannelType channelType : parameters.getChannelTypes()) {
                if (channelType.getId() == null && channelType.getName() != null) {
                    ChannelType actualChannelType = channelTypeService.loadChannel(channelType.getName());
                    if (actualChannelType != null) {
                        channelType.setId(actualChannelType.getId());
                    }
                }
            }
        }

    }

}
