////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.CollectionUtils;
import com.denimgroup.threadfix.data.dao.ApplicationDao;
import com.denimgroup.threadfix.data.dao.OrganizationDao;
import com.denimgroup.threadfix.data.dao.VulnerabilitySearchDao;
import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.service.util.PermissionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;

import static com.denimgroup.threadfix.CollectionUtils.list;

/**
 * Created by mac on 5/7/14.
 */
@Service
public class VulnerabilitySearchServiceImpl implements VulnerabilitySearchService {

    @Autowired
    private VulnerabilitySearchDao vulnerabilitySearchDao;
    @Autowired
    private ChannelTypeService     channelTypeService;
    @Autowired
    private ApplicationDao         applicationDao;
    @Autowired
    private OrganizationDao organizationDao;

    @Override
    public List<Vulnerability> performLookup(VulnerabilitySearchParameters parameters) {
        applyPermissions(parameters);
        return vulnerabilitySearchDao.performLookup(parameters);
    }

    @Override
    public List<VulnerabilityTreeElement> getTree(VulnerabilitySearchParameters parameters) {
        List<VulnerabilityTreeElement> resultList = list();
        applyPermissions(parameters);
        resultList.addAll(vulnerabilitySearchDao.getTree(parameters));

        // Query all vulnerabilities of Sonatype and Dependency Check for
        // OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities
        if (parameters.getUsingComponentsWithKnownVulnerabilities()) {

            List<GenericVulnerability> oldGenVulns = parameters.getGenericVulnerabilities();
            List<ChannelType> channelTypes = parameters.getChannelTypes();

            parameters.setGenericVulnerabilities(CollectionUtils.<GenericVulnerability>list());
            channelTypes.add(channelTypeService.loadChannel(ScannerType.DEPENDENCY_CHECK.getFullName()));
            channelTypes.add(channelTypeService.loadChannel(ScannerType.SONATYPE.getFullName()));

            List<VulnerabilityTreeElement> dependencyVunlsList = vulnerabilitySearchDao.getTree(parameters);
            if (dependencyVunlsList != null) {
                for (VulnerabilityTreeElement element: dependencyVunlsList)
                    element.setMemberOf(937);
                resultList.addAll(dependencyVunlsList);
            }

            parameters.setGenericVulnerabilities(oldGenVulns);
            parameters.setChannelTypes(channelTypes.subList(0, channelTypes.size()-2));
        }

        return resultList;
    }

    @Override
    public Long getCount(VulnerabilitySearchParameters parameters) {
        return vulnerabilitySearchDao.getCount(parameters);
    }

    // make sure that only information from proper teams and applications get included in results.
    @Override
    public void applyPermissions(VulnerabilitySearchParameters parameters) {
        Set<Integer> teamIds = PermissionUtils.getAuthenticatedTeamIds(),
                appIds = PermissionUtils.getAuthenticatedAppIds();
        List<Organization> filteredTeamList = list();
        List<Application> filteredApplicationList = list();

        if (teamIds != null) {
            if (parameters.getTeams() != null && !parameters.getTeams().isEmpty()) {
                for (Organization organization : parameters.getTeams()) {
                    if (teamIds.contains(organization.getId())) {
                        filteredTeamList.add(organization);
                    }
                }
            }
        }
        if (parameters.getTeams() != null && !parameters.getTeams().isEmpty() && appIds != null) {
            for (Organization organization : parameters.getTeams()) {
                if (teamIds != null && teamIds.contains(organization.getId()))
                    continue;
                Organization dbOrganization = organizationDao.retrieveById(organization.getId());
                for (Application app: dbOrganization.getActiveApplications()) {
                    if (appIds.contains(app.getId())) {
                        filteredApplicationList.add(app);
                    }
                }

            }
        }

        if (appIds != null) {
            if (parameters.getApplications() != null && !parameters.getApplications().isEmpty()) {
                for (Application application : parameters.getApplications()) {
                    if (appIds.contains(application.getId())) {
                        filteredApplicationList.add(application);
                    } else {
                        Application databaseApplication = applicationDao.retrieveById(application.getId());

                        // TODO move team ID lookup to DB level
                        if (teamIds != null &&
                                databaseApplication != null &&
                                databaseApplication.getOrganization() != null &&
                                databaseApplication.getOrganization().getId() != null &&
                                teamIds.contains(databaseApplication.getOrganization().getId())) {
                            filteredApplicationList.add(application);
                        } else {
                            assert false : "Invalid application ID received in " +
                                    "VulnerabilitySearchParameters: " + application.getId();
                        }

                    }
                }
            }
        }

        // If retrieving all applications then only return applications that user has access to
        if (filteredTeamList.isEmpty() && filteredApplicationList.isEmpty()) {
            if (teamIds != null) {
                for (int teamId: teamIds) {
                    filteredTeamList.add(organizationDao.retrieveById(teamId));
                }
            }

            if (appIds != null) {
                for (int appId: appIds) {
                    filteredApplicationList.add(applicationDao.retrieveById(appId));
                }
            }
        }

        if (teamIds != null)
            parameters.setTeams(filteredTeamList);
        if (appIds != null)
            parameters.setApplications(filteredApplicationList);
    }

    @Override
    public void doNameLookups(VulnerabilitySearchParameters parameters) {
        if (parameters.getChannelTypes() != null) {
            for (ChannelType channelType : parameters.getChannelTypes()) {
                if (channelType.getId() == null && channelType.getName() != null) {
                    ChannelType actualChannelType = channelTypeService.loadChannel(channelType.getName());
                    if (actualChannelType != null) {
                        channelType.setId(actualChannelType.getId());
                    }
                }
            }
        }

    }

}
