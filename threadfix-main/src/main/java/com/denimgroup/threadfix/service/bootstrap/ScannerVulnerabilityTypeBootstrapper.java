////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service.bootstrap;

import com.denimgroup.threadfix.importer.update.impl.ChannelVulnerabilityUpdater;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

import static com.denimgroup.threadfix.CollectionUtils.list;

/**
 * Created by mcollins on 8/14/15.
 */
@Component
public class ScannerVulnerabilityTypeBootstrapper {

    List<String> types = list(
            "acunetix", "appscan", "appscanenterprise", "appscansource",
            "arachni", "brakeman", "burp", "catnet", "cenzic", "checkmarx",
            "dependencycheck", "findbugs", "fortify", "manual", "nessus",
            "netsparker", "nto", "qualysguard", "skipfish", "veracode",
            "w3af", "webinspect", "whitehat", "zap");

    @Autowired
    ChannelVulnerabilityUpdater channelVulnerabilityUpdater;

    private static final SanitizedLogger LOG = new SanitizedLogger(ScannerVulnerabilityTypeBootstrapper.class);

    @Transactional
    public void bootstrap() {
        LOG.info("Adding basic types.");

        for (String type : types) {
            String fileNameWithCSV = type + ".csv";
            InputStream stream = getResource(fileNameWithCSV);

            if (stream == null) {
                throw new IllegalStateException("Unable to find " + type + ".csv.");
            }

            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));

            try {
                channelVulnerabilityUpdater.doUpdate(fileNameWithCSV, reader);
            } catch (IOException e) {
                throw new IllegalStateException("Failed during startup at file " + fileNameWithCSV, e);
            }
        }
    }

    private InputStream getResource(String fileName) {
        return ScannerVulnerabilityTypeBootstrapper
                .class
                .getClassLoader()
                .getResourceAsStream("bootstrap/scanners/" + fileName);
    }

}
