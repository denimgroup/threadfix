////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.data.dao.GenericVulnerabilityDao;
import com.denimgroup.threadfix.data.entities.GenericVulnerability;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@Transactional(readOnly = false) // used to be true

public class GenericVulnerabilityServiceImpl implements GenericVulnerabilityService{
	
	private GenericVulnerabilityDao genericVulnerabilityDao;
	
	@Autowired
	public GenericVulnerabilityServiceImpl(GenericVulnerabilityDao genericVulnerabilityDao) {
		this.genericVulnerabilityDao = genericVulnerabilityDao;
	}

	@Override
	public List<GenericVulnerability> loadAll() {
		return genericVulnerabilityDao.retrieveAll();
	}

    @Override
    public GenericVulnerability loadById(int id) {
        return genericVulnerabilityDao.retrieveById(id);
    }

    @Override
    public GenericVulnerability loadByName(String name) {
        GenericVulnerability returnValue = null;

        String result = getRegexResult(name, "\\(CWE ([0-9]+)\\)");

        if (result != null) {
            // Try ID
            GenericVulnerability genericVulnerability =
                    genericVulnerabilityDao.retrieveByDisplayId(Integer.valueOf(result));
            if (genericVulnerability != null && genericVulnerability.getId() != null) {
                returnValue = genericVulnerability;
            }
        } else {
            // Try full name
            GenericVulnerability genericVulnerability =
                    genericVulnerabilityDao.retrieveByName(name);
            if (genericVulnerability != null && genericVulnerability.getId() != null) {
                returnValue = genericVulnerability;
            }
        }

        return returnValue;
    }

    protected String getRegexResult(String targetString, String regex) {
        if (targetString == null || targetString.isEmpty() || regex == null || regex.isEmpty()) {
            return null;
        }

        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(targetString);

        if (matcher.find()) {
            return matcher.group(1);
        } else {
            return null;
        }
    }

    @Override
    public List<GenericVulnerability> loadAllWithCustomText() {
        return genericVulnerabilityDao.retrieveAllWithCustomText();
    }

    @Override
    public void store(GenericVulnerability genericVulnerability) {
        genericVulnerabilityDao.saveOrUpdate(genericVulnerability);
    }

    @Override
    public GenericVulnerability loadByDisplayId(Integer displayId){
        return genericVulnerabilityDao.retrieveByDisplayId(displayId);
    }
}
