////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service.bootstrap;

import com.denimgroup.threadfix.data.dao.GenericVulnerabilityDao;
import com.denimgroup.threadfix.data.entities.GenericVulnerability;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static com.denimgroup.threadfix.CollectionUtils.list;
import static com.denimgroup.threadfix.service.bootstrap.ResourceLineIterable.getIterator;
import static java.lang.Integer.valueOf;

/**
 * Created by mcollins on 8/13/15.
 */
@Component
public class GenericVulnerabilityBootstrapper {

    private static final SanitizedLogger LOG = new SanitizedLogger(GenericVulnerabilityBootstrapper.class);

    @Autowired
    GenericVulnerabilityDao genericVulnerabilityDao;

    @Transactional
    public void bootstrap() {

        LOG.info("Starting generic vulnerability bootstrapping.");

        long start = System.currentTimeMillis();

        int lineNumber = 0;

        List<GenericVulnerability> vulnerabilityList = list();

        List<GenericVulnerability> existing = genericVulnerabilityDao.retrieveAll();

        if (existing.size() != 0) {
            throw new IllegalStateException("Generic Vulnerability bootstrapper called with existing types.");
        }

        int last = 0;

        for (String line : getIterator("bootstrap/cwe/base.csv")) {
            String[] split = line.split("\\|");
            lineNumber++;

            assert split.length == 2 :
                    "Line " + lineNumber + " had " + split.length + " sections instead of 2.";

            String name = split[0];
            String cweId = split[1];

            if (!cweId.matches("^[0-9]+$")) {
                throw new IllegalStateException("Non-numeric CWE encountered during bootstrap: " + cweId);
            }

            if (Integer.valueOf(cweId) <= last) {
                throw new IllegalStateException(
                        "Please ensure that the lines are ordered properly in ascending order. " +
                                "Line was " + lineNumber + ", CWE text was " + cweId);
            }

            last = Integer.valueOf(cweId);

            LOG.debug("Adding entry for " + name);

            GenericVulnerability vulnerability = new GenericVulnerability();

            vulnerability.setName(name);
            vulnerability.setCweId(valueOf(cweId));

            vulnerabilityList.add(vulnerability);
        }

        genericVulnerabilityDao.insertAll(vulnerabilityList);

        LOG.info("Bootstrapping generic vulns took " + (System.currentTimeMillis() - start));
    }

}
