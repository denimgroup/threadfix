var myAppModule = angular.module('threadfix')

myAppModule.controller('VulnerabilityCommentsTableController', function ($scope, $window, $http, $rootScope, tfEncoder, vulnSearchParameterService) {

    $scope.goToAppFromVuln = function (vuln) {
        $window.location.href = tfEncoder.encode("/organizations/" + vuln.team.id + "/applications/" + vuln.app.id);
    };

    $scope.goToTeamFromVuln = function (vuln) {
        $window.location.href = tfEncoder.encode("/organizations/" + vuln.team.id);
    };

    $scope.goToTag = function (tag) {
        window.location.href = tfEncoder.encode("/configuration/tags/" + tag.id + "/view");
    };

    $scope.goToVuln = function (vuln) {
        $window.location.href = tfEncoder.encode("/organizations/" + vuln.team.id + "/applications/" + vuln.app.id + "/vulnerabilities/" + vuln.id);
    };

    $scope.expand = function (vulnList) {
        vulnList.forEach(function (vuln) {
            vuln.expanded = true;
        });
    };

    $scope.contract = function (vulnList) {
        vulnList.forEach(function (vuln) {
            vuln.expanded = false;
        });
    };

    $scope.toggle = function (vuln) {
        if (typeof vuln.expanded === "undefined") {
            vuln.expanded = false;
        }
        vuln.expanded = !vuln.expanded;
    };

    $scope.goToPage = function(valid) {
        if (valid) {
            $scope.page = $scope.pageInput;
            $scope.init();
        }
    };

    $scope.$on("updateTableVulnerabilities", function(event) {
        $scope.page = 1;
        $scope.init();
    });

    $scope.init = function(){

        if ($scope.vulnType) {
            var parameters = updateParameters();

            if ($scope.vulnType === 'openVulns') {
                parameters.showOpen = true;
                parameters.showClosed = false;
                parameters.startDate = undefined;
//                parameters.endDate = undefined;
            } else if ($scope.vulnType === 'closedVulns') {
                parameters.showOpen = false;
                parameters.showClosed = true;
                parameters.startCloseDate = parameters.startDate;
                parameters.endCloseDate = parameters.endDate;
                parameters.startDate = undefined;
//                parameters.endDate = undefined;
            }
            loadVulns(parameters);
        } else {
            $scope.vulnList = $scope.allVulnList.slice(($scope.page-1) * $scope.numberToShow, $scope.page * $scope.numberToShow);
        }

        expandVulnList();
    };

    $scope.numberToShow = 50;
    $scope.page = 1;

    var expandVulnList = function(){
        if ($scope.vulnList) {
            $scope.vulnList.forEach(function(vuln){
                if (vuln.vulnerabilityComments && vuln.vulnerabilityComments.length > 0) {
                    vuln.expanded = true;
                }
            })
        }
    };
    var updateParameters = function(){
        if (Object.keys($scope.$parent.parameters).length == 0)
            $scope.$parent.resetFilters();
        var parameters = angular.copy($scope.$parent.parameters);

        vulnSearchParameterService.updateParameters($scope, parameters);
        if (parameters.daysOldModifier) {
            var endDate = new Date();
            if (parameters.daysOldModifier === "LastYear") {
                parameters.endDate = endDate.getTime();
                parameters.startDate = (new Date(endDate.getFullYear(), endDate.getMonth() - 11, 1)).getTime();
            } else if ($scope.parameters.daysOldModifier === "LastQuarter") {
                parameters.endDate = endDate.getTime();
                parameters.startDate = (new Date(endDate.getFullYear(), endDate.getMonth() - 2, 1)).getTime();
            };
            parameters.daysOldModifier = undefined;
        } ;
        parameters.page = $scope.page;
        parameters.descList = ['severity.intValue'];
        parameters.ascList = ["genericVulnAlias.name", "surface.path", "surface.parameter"];
        parameters.numberVulnerabilities = $scope.numberToShow;

        return parameters;
    };

    var loadVulns = function(parameters) {
        $http.post(tfEncoder.encode("/reports/search"), parameters).
            success(function(data) {
                $scope.vulnList = data.object.vulns;
                $scope.numVulns = data.object.vulnCount;
                $scope.numberOfPages = Math.ceil(data.object.vulnCount/$scope.numberToShow);
                expandVulnList();
            }).
            error(function() {
            });
    };

    $scope.$on("complianceVulnList", function(event, allVuns){
        $scope.allVulnList = allVuns;
        $scope.numVulns = $scope.allVulnList.length;
        $scope.numberOfPages = Math.ceil($scope.numVulns/$scope.numberToShow);
        $scope.init();
    });

});
