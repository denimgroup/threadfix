////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.selenium.tests;

import com.denimgroup.threadfix.CommunityTests;
import com.denimgroup.threadfix.selenium.pages.*;
import com.denimgroup.threadfix.selenium.utils.DatabaseUtils;
import junit.framework.TestCase;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.openqa.selenium.By;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@Category(CommunityTests.class)
public class VulnerabilityDetailIT extends BaseDataTest{

    private ApplicationDetailPage applicationDetailPage;

    @Before
    public void initialize() {
        initializeTeamAndAppWithIbmScan();

        applicationDetailPage = loginPage.defaultLogin()
                .clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName)
                .clickViewAppLink(appName, teamName)
                .clickScansTab();
    }

    @Test
    public void testToggleMoreInfoButton() {
        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickToggleMoreInfoButton();

        assertTrue("Toggle were not show", vulnerabilityDetailPage.areToggleDisplayed());

        vulnerabilityDetailPage.clickToggleMoreInfoButton();

        assertFalse("Toggle were show", vulnerabilityDetailPage.areToggleDisplayed());
    }

    @Test
    public void testAddCommentButton() {
        String commentText = "Vulnerability is High";

        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickAddComment()
                .setCommentText(commentText)
                .clickSubmitComment();

        assertTrue("Comment is not shown", vulnerabilityDetailPage.isCommentAvailable(commentText));
    }

    @Test
    public void testAddFileButton() {
        String logFile = ScanContents.SCAN_FILE_MAP.get("Snort Log");

        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickAddFileButton()
                .uploadFile(logFile);

        assertTrue("File has not uploaded", vulnerabilityDetailPage.isFileNameDisplay());
    }

    @Test
    public void testClickDeleteFileButton() {
        String logFile = ScanContents.SCAN_FILE_MAP.get("Snort Log");

        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickAddFileButton()
                .uploadFile(logFile)
                .clickDeleteButton();

        assertTrue("File is still available", vulnerabilityDetailPage.isFileBoxEmpty());
    }

    @Test
    public void testCloseVulnerability() {
        FindingDetailPage findingDetailPage =  applicationDetailPage.clickViewScan()
                .clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickToggleMoreInfoButton()
                .clickCloseVulnerabilityButton();

        vulnerabilityDetailPage.clickApplicationLink(appName);

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "9"));

        applicationDetailPage.expandFieldControls()
                .toggleStatusFilter("Open")
                .toggleStatusFilter("Closed");

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "1"));

        TeamIndexPage teamIndexPage = applicationDetailPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName);

        assertTrue("The total number is not showing correctly", teamIndexPage.isTeamTotalNumberCorrect(teamName, "43"));
        assertTrue("The total number is not showing correctly",
                teamIndexPage.isApplicationTotalNumberCorrect(teamName,appName, "43"));
    }

    @Test
    public void testOpenVulnerability() {
        FindingDetailPage findingDetailPage =  applicationDetailPage.clickViewScan()
                .clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickToggleMoreInfoButton()
                .clickCloseVulnerabilityButton();

        vulnerabilityDetailPage.clickApplicationLink(appName);

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "9"));

        applicationDetailPage.expandFieldControls()
                .toggleStatusFilter("Open")
                .toggleStatusFilter("Closed");

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "1"));

        TeamIndexPage teamIndexPage = applicationDetailPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName);

        assertTrue("The total number is not showing correctly", teamIndexPage.isTeamTotalNumberCorrect(teamName, "43"));
        assertTrue("The total number is not showing correctly",
                teamIndexPage.isApplicationTotalNumberCorrect(teamName,appName, "43"));

        teamIndexPage.clickViewAppLink(appName, teamName)
                .clickScansTab()
                .clickViewScan()
                .clickViewFinding();

        findingDetailPage.clickViewVulnerability()
                .clickToggleMoreInfoButton()
                .clickOpenVulneranilityButton();

        vulnerabilityDetailPage.clickApplicationLink(appName);

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "10"));

        applicationDetailPage.expandFieldControls()
                .toggleStatusFilter("Open")
                .toggleStatusFilter("Closed");

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.areAllVulnerabilitiesHidden());

        teamIndexPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName);

        assertTrue("The total number is not showing correctly", teamIndexPage.isTeamTotalNumberCorrect(teamName, "44"));
        assertTrue("The total number is not showing correctly",
                teamIndexPage.isApplicationTotalNumberCorrect(teamName,appName, "44"));
    }

    @Test
    public void testMarkAsFalsePositiveButton() {
        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickToggleMoreInfoButton()
                .clickMarkasFalsePositivebutton();

        vulnerabilityDetailPage.clickApplicationLink(appName);

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "9"));

        applicationDetailPage.expandFieldControls()
                .toggleStatusFilter("FalsePositive");

        TestCase.assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "1"));

        TeamIndexPage teamIndexPage = applicationDetailPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName);

        assertTrue("The total number is not showing correctly", teamIndexPage.isTeamTotalNumberCorrect(teamName, "43"));
        assertTrue("The total number is not showing correctly",
                teamIndexPage.isApplicationTotalNumberCorrect(teamName,appName, "43"));
    }

    @Test
    public void testUnMarkAsFalsePositive() {
        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickToggleMoreInfoButton()
                .clickMarkasFalsePositivebutton();

        vulnerabilityDetailPage.clickApplicationLink(appName);

        assertTrue("There should only be 9 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "9"));

        applicationDetailPage.expandFieldControls()
                .toggleStatusFilter("FalsePositive");

        assertTrue("There should only be 1 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "1"));

        TeamIndexPage teamIndexPage = applicationDetailPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName);

        assertTrue("The total number is not showing correctly", teamIndexPage.isTeamTotalNumberCorrect(teamName, "43"));
        assertTrue("The total number is not showing correctly",
                teamIndexPage.isApplicationTotalNumberCorrect(teamName,appName, "43"));

        teamIndexPage.clickViewAppLink(appName, teamName)
                .clickScansTab()
                .clickViewScan();

        scanDetailPage.clickViewFinding()
            .clickViewVulnerability();

        vulnerabilityDetailPage.clickToggleMoreInfoButton()
                .clickUnmarkFalsePositive();

        vulnerabilityDetailPage.clickApplicationLink(appName);

        TestCase.assertTrue("There should only be 10 critical vulnerabilities shown.",
                applicationDetailPage.isVulnerabilityCountCorrect("Critical", "10"));

        applicationDetailPage.expandFieldControls()
                .toggleStatusFilter("FalsePositive");

        TestCase.assertTrue("There should only be no vulnerabilities shown.",
                applicationDetailPage.areAllVulnerabilitiesHidden());

        teamIndexPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName);

        assertTrue("The total number is not showing correctly", teamIndexPage.isTeamTotalNumberCorrect(teamName, "44"));
        assertTrue("The total number is not showing correctly",
                teamIndexPage.isApplicationTotalNumberCorrect(teamName,appName, "44"));

    }

    @Test
    public void testViewFindingLinkNavigation() {
        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding()
                .clickViewVulnerability()
                .clickViewFinding();

        assertTrue("Incorrectly Navigate", findingDetailPage.isViewVulnetabilityButtonDisplayed());
    }

    @Test
    public void testAddCommentFieldValidation() {
        String commentText = getRandomString(201);
        String whiteSpace = "   ";

        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability()
                .clickAddComment()
                .setCommentText(whiteSpace)
                .clickSubmitComment();

        assertTrue("Error message was not displayed",
                vulnerabilityDetailPage.isErrorMessageDisplayed("Failure. Message was : The comment cannot be empty."));

        vulnerabilityDetailPage.setCommentText(commentText);

        assertFalse("Add Comment button is enabled and should not be.",
                vulnerabilityDetailPage.isAddCommentButtonEnabled());
    }

    //===========================================================================================================
    // Dynamic Scans
    //===========================================================================================================

    @Test
    public void testDynamicScanData() {
        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability();

        assertTrue("CWE wasn't added", vulnerabilityDetailPage.isCweDataPresent());
        assertTrue("Vulnerability wasn't add to the page", vulnerabilityDetailPage.isVulnerabilityDataPresent());
    }

    @Ignore
    @Test
    public void testDynamicFindingModalPopulatedFields() {
        initializeTeamAndApp();
        String cwe = "Improper Validation of Certificate Expiration";
        String url = "http://www.test.com/";
        String severity = "Medium";
        String parameter = "Test Parameter";
        String description = "Test Description.";

        ApplicationDetailPage applicationDetailPage1 = applicationDetailPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName)
                .clickViewAppLink(appName, teamName);

        applicationDetailPage1.clickActionButton()
                .clickManualFindingButton()
                .setCWE(cwe)
                .setURL(url)
                .setSeverity(severity)
                .setParameter(parameter)
                .setDescription(description)
                .clickDynamicSubmit();

        assertTrue("Manual finding was not added to vulnerabilities listing on application detail page.",
                applicationDetailPage1.isVulnerabilityCountCorrect("Medium", "1"));

        applicationDetailPage1.expandVulnerabilityByType("Medium298")
                .clickViewMoreVulnerabilityLink("Medium2980")
                .clickEditFinding();

        System.out.println(driver.findElement(By.id("parameterInput")).getText());

        assertTrue("Correct radio button is not checked",
                driver.findElement(By.id("dynamicRadioButton")).isSelected());
        assertTrue("CWE did not populate in modal.",
                driver.findElement(By.id("txtSearch")).getText().equals(cwe));
        assertTrue("Parameter value did not populate in modal.",
                driver.findElement(By.id("parameterInput")).getText().equals(parameter));
        assertTrue("Severity did not populate in modal.",
                driver.findElement(By.id("severityInput")).getText().equals(severity));
        assertTrue("Description did not populate in modal.",
                driver.findElement(By.id("descriptionInput")).getText().equals(description));
    }

    //===========================================================================================================
    // Static Scans
    //===========================================================================================================

    @Test
    public void testStaticScanData() {
        String appName = getName();

        DatabaseUtils.createApplication(teamName, appName);
        DatabaseUtils.uploadScan(teamName, appName, ScanContents.SCAN_FILE_MAP.get("Microsoft CAT.NET"));

        ScanDetailPage scanDetailPage = applicationDetailPage.clickViewScan();

        FindingDetailPage findingDetailPage = scanDetailPage.clickViewFinding();

        VulnerabilityDetailPage vulnerabilityDetailPage = findingDetailPage.clickViewVulnerability();

        assertTrue("CWE wasn't added", vulnerabilityDetailPage.isCweDataPresent());
        assertTrue("Vulnerability wasn't add to the page", vulnerabilityDetailPage.isVulnerabilityDataPresent());
    }

    @Ignore
    @Test
    public void testStaticFindingModalPopulatedFields() {
        initializeTeamAndApp();
        String cwe = "Improper Validation of Certificate Expiration";
        String parameter = "Test Parameter";
        String severity = "Medium";
        String sourceFile = "file location";
        String lineNumber = "23";
        String description = "Test Description.";

        ApplicationDetailPage applicationDetailPage1 = applicationDetailPage.clickOrganizationHeaderLink()
                .expandTeamRowByName(teamName)
                .clickViewAppLink(appName, teamName);

        applicationDetailPage1.clickActionButton()
                .clickManualFindingButton()
                .clickStaticRadioButton()
                .setCWE(cwe)
                .setSourceFile(sourceFile)
                .setLineNumber(lineNumber)
                .setSeverity(severity)
                .setParameter(parameter)
                .setDescription(description)
                .clickDynamicSubmit();

        assertTrue("Manual finding was not added to vulnerabilities listing on application detail page.",
                applicationDetailPage1.isVulnerabilityCountCorrect("Medium", "1"));

        applicationDetailPage1.expandVulnerabilityByType("Medium298")
                .clickViewMoreVulnerabilityLink("Medium2980")
                .clickEditFinding();

        assertTrue("Correct radio button is not checked",
                driver.findElement(By.id("staticRadioButton")).isSelected());
        assertTrue("CWE did not populate in modal.",
                driver.findElement(By.name("txtSearch")).getText().contains(cwe));
        assertTrue("Source File did not populate in modal.",
                driver.findElement(By.id("urlStaticSearch")).getText().equals(sourceFile));
        assertTrue("Line Number did not populate in modal.",
                driver.findElement(By.id("lineNumberInput")).getText().equals(lineNumber));
        assertTrue("Parameter value did not populate in modal.",
                driver.findElement(By.id("parameterInput")).getText().equals(parameter));
        assertTrue("Severity did not populate in modal.",
                driver.findElement(By.id("severityInput")).getText().equals(severity));
        assertTrue("Description did not populate in modal.",
                driver.findElement(By.id("descriptionInput")).getText().equals(description));
    }
}
