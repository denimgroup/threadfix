////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.dao;

import com.denimgroup.threadfix.data.entities.*;

import java.util.List;
import java.util.Map;

public interface VulnerabilityFilterDao {

	/**
	 * Retrieve all ThreadFix-wide vulnerability filters
	 */
	List<VulnerabilityFilter> retrieveAllGlobal();

	@SuppressWarnings("unchecked")
	List<VulnerabilityFilter> retrieveAll();

	/**
	 * Retrieve all filters that apply to this organization
	 */
	List<VulnerabilityFilter> retrieveAll(int orgId);
	
	/**
	 * Retrieve all filters that apply to this team and application
	 */
	List<VulnerabilityFilter> retrieveAll(int orgId, int appId);

	VulnerabilityFilter retrieveById(int vulnFilterId);
	
	/**
	 * Returns the DB filter matching those criteria, or null if none is found
	 */
	VulnerabilityFilter retrieveByVulnerabilityAndType(
			int sourceGenericVulnerabilityId, 
			VulnerabilityFilter filter);

	void saveOrUpdate(VulnerabilityFilter vulnerabilityFilter);

	void delete(int filterId);

	List<VulnerabilityFilter> retrieveAllEffective(int orgId);

	List<VulnerabilityFilter> retrieveAllEffective(int orgId, int appId);


	void resetHiddenForApplication(Integer applicationId);

	void resetHiddenForTeam(Integer teamId);

	void resetHiddenAll();


	void applySeverityFilterToApplication(Integer applicationId, SeverityFilter severityFilter);

	void applySeverityFilterGlobal(SeverityFilter filter);

	void applySeverityFilterToTeam(Integer id, SeverityFilter teamFilter);


	void applyFilterToApplication(Integer applicationId, VulnerabilityFilter filter);

	void applyFilterGlobal(VulnerabilityFilter filter);

	void applyFilterToTeam(Integer id, VulnerabilityFilter teamFilter);

	List<Map<String, Object>> getScanClosedVulnerabilitiesMap(List<Integer> filteredSeverities,
															  List<Integer> filteredVulnerabilities);

	List<Map<String, Object>> getScanReopenedVulnerabilitiesMap(List<Integer> filteredSeverities,
																List<Integer> filteredVulnerabilities);

	void hideForScanResultFilter(ScanResultFilter scanResultFilter, Application application);

	String getVulnsToHideSubquery(ScanResultFilter scanResultFilter, Scan scan, Application application, int index);

	VulnerabilityFilter find(GenericVulnerability sourceGenericVulnerability, int orgId, int appId);

	void resetVulnFilterAffect(GenericVulnerability oldGenericVulnerability, int orgId, int appId);
}
