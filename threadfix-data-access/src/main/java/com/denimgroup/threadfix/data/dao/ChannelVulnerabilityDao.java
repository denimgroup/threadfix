////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.dao;

import java.util.List;
import java.util.Map;

import com.denimgroup.threadfix.data.entities.ChannelType;
import com.denimgroup.threadfix.data.entities.ChannelVulnerability;

/**
 * @author bbeverly
 * 
 */
public interface ChannelVulnerabilityDao {

	/**
	 * Returns a single instance of ChannelVulnerability by Channel and code.
	 * 
	 * @param channelType
	 * @param code
	 * @return
	 */
	ChannelVulnerability retrieveByCode(ChannelType channelType, String code);
	
	/**
	 * Returns a single instance of ChannelVulnerability by Channel and code.
	 * 
	 * @param channelType
	 * @param code
	 * @return
	 */
	ChannelVulnerability retrieveByName(ChannelType channelType, String name);
	
	/**
	 * Returns the mapped Generic Vulnerability.
	 * 
	 * @param channelType
	 * @param code
	 * @return
	 */
	boolean hasMappings(int id);

	/**
	 * Retrieves a single instance of the ChannelVulnerability object by its
	 * primary key.
	 * 
	 * @param id
	 * @return
	 */
	ChannelVulnerability retrieveById(int id);
	
	/**
	 * Returns possible matches based on a prefix.
	 * 
	 * @param prefix
	 * @return
	 */
	List<ChannelVulnerability> retrieveSuggested(String prefix);

	/**
	 * Saves or creates a ChannelVulnerability object
	 * 
	 * @param vendorVulnerability
	 */
	void saveOrUpdate(ChannelVulnerability channelVulnerability);

	void saveOrUpdateStateless(ChannelVulnerability channelVulnerability);

	/**
	 * 
	 * @param name
	 * @return
	 */
	boolean isValidManualName(String name);

	List<ChannelVulnerability> retrieveAllManual();

    List<ChannelVulnerability> loadAllUserCreated();

	Map<String, List<ChannelVulnerability>> getChannelVulnsEachChannelType(List<ChannelType> channelTypes);

}
