////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service.impl;

import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.service.VulnerabilityService;
import com.denimgroup.threadfix.service.VulnerabilityStatusService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Calendar;
import java.util.List;

@Service
public class VulnerabilityStatusServiceImpl implements VulnerabilityStatusService {

    private final SanitizedLogger log = new SanitizedLogger(VulnerabilityStatusService.class);

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @Override
    public void openVulnerability(Vulnerability vulnerability, Scan scan, Finding finding, Calendar openTime, Boolean fromScanDeletion, Boolean remapFinding) {
        vulnerability.setActive(true);
        if (openTime == null) {
            vulnerability.setOpenTime(Calendar.getInstance());
        } else {
            vulnerability.setOpenTime(openTime);
        }

        vulnerabilityService.determineVulnerabilityDefectConsistencyState(vulnerability);
    }

    @Override
    public void closeVulnerability(Vulnerability vulnerability, Scan scan, Calendar closeTime, Boolean fromScanDeletion, Boolean fromFindingsMerge) {
        vulnerability.setActive(false);
        if (closeTime == null) {
            vulnerability.setCloseTime(Calendar.getInstance());
        } else {
            vulnerability.setCloseTime(closeTime);
        }

        // This constructor maps the objects for us
        if (scan != null) {
            new ScanCloseVulnerabilityMap(vulnerability, scan);
        }

        vulnerabilityService.determineVulnerabilityDefectConsistencyState(vulnerability);
    }

    @Override
    public void createCloseVulnMaps(Vulnerability vulnerability, List<Scan> scans) {
        for (Scan scan: scans) {
            new ScanCloseVulnerabilityMap(vulnerability, scan);
        }
    }

    @Override
    public void reopenVulnerability(Vulnerability vulnerability, Scan scan, Calendar reopenTime) {
        vulnerability.setActive(true);
        if (reopenTime == null) {
            vulnerability.setOpenTime(Calendar.getInstance());
        } else {
            vulnerability.setOpenTime(reopenTime);
        }

        if (scan != null) {
            new ScanReopenVulnerabilityMap(vulnerability, scan);
        }

        vulnerabilityService.determineVulnerabilityDefectConsistencyState(vulnerability);
    }

    @Override
    public void markVulnerabilityFalsePositive(Vulnerability vulnerability, Scan scan, Boolean fromScanDeletion, Boolean remapFinding) {
        vulnerability.setIsFalsePositive(true);
    }

    @Override
    public void unmarkVulnerabilityFalsePositive(Vulnerability vulnerability, Scan scan, Boolean fromScanDeletion, Boolean remapFinding) {
        vulnerability.setIsFalsePositive(false);
    }

}
