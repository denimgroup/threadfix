////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.data.entities.*;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import java.util.List;

public interface VulnerabilityFilterService {
	
	VulnerabilityFilter load(int vulnFilterId);
	
	VulnerabilityFilter validate(VulnerabilityFilter vulnerabilityFilter, BindingResult bindingResult);

	VulnerabilityFilter validate(VulnerabilityFilter vulnerabilityFilter,
			BindingResult bindingResult, int id);
	
	/**
	 * Note: this method updates all vulnerabilities
	 */
	void save(VulnerabilityFilter vulnerabilityFilter, int orgId, int appId);

	@Transactional(readOnly = false)
	void updateStatistics(int orgId, int appId, Integer oldGenericVulnId);

	@Transactional(readOnly = false)
	void updateStatistics(int orgId, int appId);

	/**
	 * Note: this method updates all vulnerabilities
	 */
	void delete(int filterId, int orgId, int appId);
	
	/**
	 * This method updates all the vulnerabilities attached to the application.
	 */
	void updateVulnerabilities(int orgId, int appId, Integer oldGenericVulnId);

	void updateVulnerabilities(int orgId, int appId);

	void updateVulnerabilities(Scan scan);

	void updateAllVulnerabilities();

	void updateVulnerabilities(Organization organization, List<Integer> applicationIds);

	void updateVulnerabilities(Application application);

	List<VulnerabilityFilter> getPrimaryVulnerabilityList(int orgId, int appId);


	List<VulnerabilityFilter> loadAllGlobal();

	VulnerabilityFilter getNewFilter(int orgId, int appId);


	void updateScanCounts(List<Scan> scan);

	VulnerabilityFilter find(GenericVulnerability sourceGenericVulnerability, int orgId, int appId);
}
