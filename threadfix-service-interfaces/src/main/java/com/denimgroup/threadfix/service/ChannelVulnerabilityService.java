////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2016 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.data.entities.ChannelType;
import com.denimgroup.threadfix.data.entities.ChannelVulnerability;

import java.util.List;
import java.util.Map;

public interface ChannelVulnerabilityService {

    MappingCreateResult createVulnerabilities(String channelName, String channelVulnerabilityCode);

    enum MappingCreateResult {
        SUCCESS("Created the mapping successfully."),
        BAD_GENERIC_VULNERABILITY_ID("Generic Vulnerability Type (CWE) was invalid."),
        BAD_CHANNEL_VULNERABILITY("Scanner Vulnerability Type was invalid."),
        BAD_CHANNEL_TYPE("Scanner type as not found.");

        String message;

        MappingCreateResult(String message) {
            this.message = message;
        }

        public String toString() {
            return message;
        }
    }

    /**
     * Load suggestions based on a prefix.
     *
     * @param prefix
     * @return
     */
    List<ChannelVulnerability> loadSuggested(String prefix);

    /**
     *
     * @param code
     * @return
     */
    boolean isValidManualName(String code);

    /**
     *
     * @return
     */
    List<ChannelVulnerability> loadAllManual();

    MappingCreateResult createMapping(String channelName, int channelVulnerabilityId, String genericVulnerabilityId);

    MappingCreateResult createMapping(String channelName, int channelVulnerabilityId, String genericVulnerabilityId, Integer findingId);

    Map<String, List<ChannelVulnerability>> getChannelVulnsEachChannelType(List<ChannelType> channelTypes);
}
